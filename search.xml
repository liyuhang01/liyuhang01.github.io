<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>操作系统题库二</title>
    <url>/archives/1788a862.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 24 2021 17:02:56 GMT+0800 (中国标准时间) --><h1 id="操作系统原理与实践-题库"><a href="#操作系统原理与实践-题库" class="headerlink" title="操作系统原理与实践-题库"></a>操作系统原理与实践-题库</h1><p><strong>1、什么是操作系统，它的主要功能是什么？</strong></p><p>答案：</p><p><strong>2、下列选项中，（）操作系统中的技术是用“时间”来换取“空间”的。</strong></p><p>A、 缓冲技术</p><p>B、 虚拟存储器</p><p>C、 SPOOLing技术</p><p>D、 快装</p><p>答案： B</p><p><strong>3、设计实时操作系统必须首先考虑系统的（）</strong></p><p>A、 效率</p><p>B、 可移植性</p><p>C、 可靠性</p><p>D、 使用的方便性</p><p>答案： A</p><p><strong>4、一个作业第一次执行时用了5分钟，而第二次执行用了**</strong>6分钟，这说明了操作系统的（）特点。**</p><p>A、 并发性</p><p>B、 共享性</p><p>C、 不确定性</p><p>D、 虚拟性</p><p>答案： C</p><p><strong>5、下述操作系统类型中，（）操作系统一定是由多台计算机组成的系统。</strong></p><p>A、 实时</p><p>B、 批处理</p><p>C、 分时</p><p>D、 分布式</p><p>答案： D</p><p><strong>7、按照所起作用和需要的运行环境，操作系统属于（）。</strong></p><p>A、 支撑软件</p><p>B、 用户软件</p><p>C、 系统软件</p><p>D、 应用软件</p><p>答案： C</p><p><strong>8、什么是多道程序设计技术？多道程序设计技术的主要特点是什么？</strong></p><p>答案： 多道程序设计技术就是把多个程序同时放入内存，使它们共享系统中的各种资源，并发地在处理机上执行。</p><p>多道程序设计技术的特点如下：</p><p>（1）多道，计算机内存中同时存放多道相互独立的程序。</p><p>（2）宏观上并行，指同时进入系统的多道程序都处于运行过程中。</p><p>（3）微观上串行，指在单处理机环境下，内存中的多道程序轮流的占有CPU，交替执行。</p><p><strong>9、操作系统的主要功能是内存管理、设备管理、文件管理、用户接口和( )。</strong></p><p>A、 进程管理</p><p>B、 用户管理</p><p>C、 信息管理</p><p>D、 操作系统管理</p><p>答案： A</p><p><strong>10、操作系统的最基本的两个特征是资源共享和（）。</strong></p><p>A、 多道程序设计</p><p>B、 程序的并发执行</p><p>C、 中断</p><p>D、 程序的顺序执行</p><p>答案： B</p><p><strong>11、采用多道程序设计技术可以提高CPU和外部设备的（）。</strong></p><p>A、 稳定性</p><p>B、 利用率</p><p>C、 可靠性</p><p>D、 兼容性</p><p>答案： B</p><p><strong>12、在计算机系统中，操作系统是（）。</strong></p><p>A、 处于裸机之上的第一层软件</p><p>B、 处于硬件之下的低层软件</p><p>C、 处于软件之上的系统软件</p><p>D、 处于系统软件之上的用户软件</p><p>答案： A</p><p><strong>13、自从有了计算机，就有了操作系统。</strong></p><p>答案： 错误</p><p><strong>14、多道程序设计技术引入后，不仅使得CPU与外设的工作可以并行，也使得设备与设备之间的工作可以并行。</strong></p><p>答案： 正确</p><p><strong>15、SPOOLing技术是用“空间”换取“时间”。</strong></p><p>答案： 正确</p><p><strong>16、操作系统是用来管理计算机软件的一种软件。</strong></p><p>答案： 错误</p><p><strong>17、多道程序设计就是多个程序在某一时刻同时运行。</strong></p><p>答案： 错误</p><p><strong>18、多道程序设计技术将一台物理CPU虚拟为多台逻辑的CPU；SPOOLing技术将一台物理上的I/O设备虚拟为多台逻辑上的I/O设备。</strong></p><p>答案： 正确</p><p><strong>19、顺序执行的程序具有可再现性。</strong></p><p>答案： 正确</p><p><strong>20、多道程序的引入主要是为了提高CPU的利用率。</strong></p><p>答案： 正确</p><p><strong>21、操作系统是一种通用软件。</strong></p><p>答案： 错误</p><p><strong>22、操作系统是随着多道程序设计技术的出现而逐步发展起来的，要保证多道程序的正确运行，在技术上需要解决哪些问题？</strong></p><p>答案： 多道程序设计技术在让程序并发执行的同时，使程序的运行失去了封闭性和可再现性。因此技术上需要解决并发执行时的可再现性，并发执行的条件又称为Bernstein条件。</p><p><strong>23、为下列应用选择一种操作系统类型，将左右两列词连接起来形成最恰当的5对。</strong></p><p><strong>高炉炉温控制 批处理系统</strong></p><p><strong>银行数据处理中心 网络操作系统</strong></p><p><strong>学生上机实习 实时控制系统</strong></p><p><strong>发送电子邮件 实时信息处理系统</strong></p><p><strong>民航订票系统 分时系统</strong></p><p>答案：</p><p>高炉炉温控制 实时控制系统</p><p>银行数据处理中心 批处理系统</p><p>学生上机实习 分时系统</p><p>发送电子邮件 网络操作系统</p><p>民航订票系统 实时信息处理系统</p><p><strong>24、以下四项内容中，（）不是进程创建过程所必需的。</strong></p><p>A、 建立进程控制块</p><p>B、 为进程分配CPU</p><p>C、 为进程分配内存</p><p>D、 将进程链入就绪队列</p><p>答案： B</p><p><strong>25、为什么要引入线程？它与进程有何区别？</strong></p><p>答案：</p><p><strong>26、从线程的调度与切换速度、系统调用和线程的执行时间三方面比较用户级线程和内核级线程的优缺点。</strong></p><p>答案：</p><p><strong>27、假设系统就绪队列中有10个进程，这10个进程轮换执行，每隔300ms轮换一次，CPU在进程切换时所花费的总时间为10ms，试问系统花在进程切换上的时间开销占系统整个时间的比例是多少？</strong></p><p>答案： 10/（300+10）=3.2%</p><p><strong>28、试述线程的特点及其与进程之间的关系。</strong></p><p>答案： 线程是进程内的一个相对独立的运行单元，是操作系统调度和分派的单位。线程只拥有一点必不可少的资源（一组寄存器和栈），但可以和同属于一个进程的其他线程共享进程拥有的资源。</p><p>线程是进程的一部分，是进程内的一个实体；一个进程可以有多个线程，但至少必须有一个线程。</p><p><strong>29、预防死锁不可以去掉以下（）条件。</strong></p><p>A、 请求与保持</p><p>B、 不可剥夺</p><p>C、 互斥</p><p>D、 环路</p><p>答案： C</p><p><strong>30、资源费配图是不可以完全简化的是判断死锁的（）。</strong></p><p>A、 充分条件</p><p>B、 必要条件</p><p>C、 什么也不是</p><p>D、 充分必要条件</p><p>答案： D</p><p><strong>31、设有5个作业同时到达，每个作业的执行时间是2min，它们在一台处理机上按单道方式运行，则平均周转时间为（）。</strong></p><p>A、 6min</p><p>B、 5min</p><p>C、 2.5min</p><p>D、 1min</p><p>答案： A</p><p><strong>32、若系统中有8台绘图仪，有多个进程均需要使用两台，规定每个进程一次仅允许申请一台，则至多允许（）个进程参与竞争，而不会发生死锁。</strong></p><p>A、 8</p><p>B、 7</p><p>C、 6</p><p>D、 5</p><p>答案： B</p><p><strong>33、响应比高者优先作业调度算法除了考虑进程在CPU上的运行时间，还考虑（）。</strong></p><p>A、 输入时间</p><p>B、 完成时间</p><p>C、 周转时间</p><p>D、 等待时间</p><p>答案： D</p><p><strong>34、设有3个作业J1，J2，J3，它们的到达时间和执行时间如下所示。</strong></p><p><strong>作业名 到达时间 执行时间</strong></p><p><strong>J1 8:00 2**</strong>小时**</p><p><strong>J2 8:00 1**</strong>小时**</p><p><strong>J3 8:00 0.25**</strong>小时**</p><p><strong>它们在一台处理机上按单道运行并采用短作业优先调度算法，则3个作业的执行次序是（）。</strong></p><p>A、 J2，J3，J1</p><p>B、 J1，J2，J3</p><p>C、 J3，J2，J1</p><p>D、 J2，J1，J3</p><p>答案： C</p><p><strong>35、设有12个同类资源可供4个进程共享，资源分配情况如下所示</strong></p><p><strong>进程 已占用资源 最大需求数</strong></p><p><strong>P1 2 5</strong></p><p><strong>P2 3 5</strong></p><p><strong>P3 4 7</strong></p><p><strong>P4 1 4</strong></p><p><strong>目前剩余资源数为2.当进程P1，P2，P3，P4又都相继提出申请要求，为使系统不致死锁，应先满足（）进程的要求。</strong></p><p>A、 P1</p><p>B、 P2</p><p>C、 P3</p><p>D、 P4</p><p>答案： B</p><p><strong>36、产生系统死锁的原因可能是（）。</strong></p><p>A、 一个进程进入死循环</p><p>B、 多个进程竞争共享型设备</p><p>C、 进程释放资源</p><p>D、 多个进程竞争资源出现了循环等待</p><p>答案： D</p><p><strong>37、以下（）方法可以解除死锁。</strong></p><p>A、 剥夺资源</p><p>B、 挂起进程</p><p>C、 提高进程优先级</p><p>D、 降低进程优先级</p><p>答案： A</p><p><strong>38、采用有序分配资源的策略可以破坏产生死锁的（）。</strong></p><p>A、 互斥条件</p><p>B、 请求与保持条件</p><p>C、 不可剥夺条件</p><p>D、 环路条件</p><p>答案： D</p><p><strong>39、死锁只发生在相互竞争资源的进程之间。</strong></p><p>答案： 正确</p><p><strong>40、死锁是指系统中所有进程都处于阻塞状态。</strong></p><p>答案： 错误</p><p><strong>41、银行家算法是一种避免死锁的算法。</strong></p><p>答案： 正确</p><p><strong>42、死锁的发生不仅与资源分配策略有关，还与并发进程的执行速度有关。</strong></p><p>答案： 错误</p><p><strong>43、当系统处于不安全状态时，不一定会产生死锁。</strong></p><p>答案： 正确</p><p><strong>44、当进程调度程序未能选中一个进程时，就绪队列和阻塞队列一定为空。</strong></p><p>答案： 错误</p><p><strong>45、当进程调度程序未能选中一个进程时，就绪队列一定为空。</strong></p><p>答案： 正确</p><p><strong>46、不存在只涉及一个进程的死锁。</strong></p><p>答案： 正确</p><p><strong>47、在分时系统中，当用户数一定时，影响响应时间的主要因素是时间片。</strong></p><p>答案： 正确</p><p><strong>48、假设系统有5个进程，它们的到达时间和服务时间如下：</strong></p><p><strong>进程名 到达时间 处理时间</strong></p><p><strong>A 0 3</strong></p><p><strong>B 1 5</strong></p><p><strong>C 3 2</strong></p><p><strong>D 9 5</strong></p><p><strong>E 12 5</strong></p><p><strong>新进程（没有运行过）与老进程（运行过的进程）的条件相同时，假定系统选新进程执行。</strong></p><p><strong>若按先来先服务算法（FCFS）进行CPU调度，请给出各个进程的完成时间、周转时间、带权周转时间，以及所有进程的平均周转时间和平均带权周转时间。</strong></p><p><strong>49、假设系统有5个进程，它们的到达时间和服务时间如下：</strong></p><p><strong>进程名 到达时间 处理时间</strong></p><p><strong>A 0 3</strong></p><p><strong>B 1 5</strong></p><p><strong>C 3 2</strong></p><p><strong>D 9 5</strong></p><p><strong>E 12 5</strong></p><p><strong>新进程（没有运行过）与老进程（运行过的进程）的条件相同时，假定系统选新进程执行。</strong></p><p><strong>若按时间片轮转法（时间片q=1）进行CPU调度，请给出各个进程的完成时间、周转时间、带权周转时间，以及所有进程的平均周转时间和平均带权周转时间。</strong></p><p><strong>50、假设系统有5个进程，它们的到达时间和服务时间如下：</strong></p><p><strong>进程名 到达时间 处理时间</strong></p><p><strong>A 0 3</strong></p><p><strong>B 1 5</strong></p><p><strong>C 3 2</strong></p><p><strong>D 9 5</strong></p><p><strong>E 12 5</strong></p><p><strong>新进程（没有运行过）与老进程（运行过的进程）的条件相同时，假定系统选新进程执行。</strong></p><p><strong>按照短进程优先算法（SPN）进行CPU调度，请给出各个进程的完成时间、周转时间、带权周转时间，以及所有进程的平均周转时间和平均带权周转时间。</strong></p><p><strong>51、假设系统有5个进程，它们的到达时间和服务时间如下：</strong></p><p><strong>进程名 到达时间 处理时间</strong></p><p><strong>A 0 3</strong></p><p><strong>B 1 5</strong></p><p><strong>C 3 2</strong></p><p><strong>D 9 5</strong></p><p><strong>E 12 5</strong></p><p><strong>新进程（没有运行过）与老进程（运行过的进程）的条件相同时，假定系统选新进程执行。</strong></p><p><strong>若按照最短剩余时间优先算法（SRT,时间片q=1）进行CPU调度，请给出各个进程的完成时间、周转时间、带权周转时间，以及所有进程的平均周转时间和平均带权周转时间。</strong></p><p><strong>52、假设系统有5个进程，它们的到达时间和服务时间如下：</strong></p><p><strong>进程名 到达时间 处理时间</strong></p><p><strong>A 0 3</strong></p><p><strong>B 1 5</strong></p><p><strong>C 3 2</strong></p><p><strong>D 9 5</strong></p><p><strong>E 12 5</strong></p><p><strong>新进程（没有运行过）与老进程（运行过的进程）的条件相同时，假定系统选新进程执行。</strong></p><p><strong>若按照多级反馈队列[MFQ，第1个队列的时间片为1，第i（i&gt;1））个队列的时间片q=2(i-1)算法进行CPU调度，请给出各个进程的完成时间、周转时间、带权周转时间，以及所有进程的平均周转时间和平均带权周转时间。</strong></p><p><strong>53、以下解决死锁的方法中，属于预防策略的是（）</strong></p><p>A、 化简资源分配图</p><p>B、 资源的有序分配</p><p>C、 银行家算法</p><p>D、 死锁监测法</p><p>答案： B</p><p><strong>54、下面（）说法是对可剥夺系统的正确描述。</strong></p><p>A、 时间片轮转法是一种可剥夺式调度</p><p>B、 进程因等待某一事件而引起系统调度是一种可剥夺式调度</p><p>C、 优先级低的进程放弃CPU，让优先级高的进程运行</p><p>D、 实时系统采用可剥夺式调度</p><p>答案： C</p><p><strong>55、以下关于进程调度的说法（）正确。</strong></p><p>A、 优先级是进程调度的主要依据，一旦确定就不能改变</p><p>B、 进程通过调度得到CPU</p><p>C、 在单CPU的系统中，任何时刻都有一个进程处于运行状态</p><p>D、 进程申请CPU得不到时，其状态为阻塞</p><p>答案： B</p><p><strong>56、既考虑进程的等待时间，又考虑进程的执行时间的调度算法是（）</strong></p><p>A、 短进程优先</p><p>B、 最短剩余时间优先</p><p>C、 响应比高者优先</p><p>D、 先来先服务</p><p>答案： C</p><p><strong>57、作业从提交到完成的时间间隔称为作业的（）</strong></p><p>A、 响应时间</p><p>B、 等待时间</p><p>C、 运行时间</p><p>D、 周转时间</p><p>答案： D</p><p><strong>58、下述（）调度算法要事先评估进程的运行时间。</strong></p><p>A、 短进程优先</p><p>B、 响应比高者优先</p><p>C、 最短剩余时间优先</p><p>D、 先来先服务</p><p>答案： A</p><p><strong>59、如果所有进程同时到达，下述（）算法使进程的平均周转时间最短。</strong></p><p>A、 优先级调度</p><p>B、 响应比高者优先</p><p>C、 短进程优先</p><p>D、 先来先服务</p><p>答案： C</p><p><strong>60、下述（）调度算法有利于CPU繁忙的进程，而不利于I/O繁忙的进程。</strong></p><p>A、 先来先服务</p><p>B、 时间片轮转</p><p>C、 优先级调度</p><p>D、 短进程优先</p><p>答案： A</p><p><strong>61、以下关于死锁的叙述，（）是正确的。</strong></p><p>A、 死锁的产生只与资源的分配策略有关</p><p>B、 竞争互斥资源是进程产生死锁的根本原因</p><p>C、 死锁是一种僵持状态，发生时系统中任何进程都无法继续执行</p><p>D、 死锁的产生只与并发进程的执行速度有关</p><p>答案： B</p><p><strong>62、以下关于安全状态的说法，（）正确。</strong></p><p>A、 安全状态是没有死锁的状态，非安全状态是可能有死锁的状态</p><p>B、 安全状态是可能有死锁的状态，非安全状态也是可能有死锁的状态</p><p>C、 安全状态是可能没有死锁的状态，非安全状态是有死锁的状态</p><p>D、 安全状态是没有死锁的状态，非安全状态是有死锁的状态</p><p>答案： A</p><p><strong>63、当进程数大于资源数时，进程竞争资源也不一定产生死锁（）</strong></p><p>答案： 正确</p><p><strong>64、在引入了内核级线程的系统中，进程调度程序负责将CPU分配给进程。</strong></p><p>答案： 错误</p><p><strong>65、死锁是多个进程之间竞争资源或彼此通信而引起的一种临时性的阻塞现象。</strong></p><p>答案： 错误</p><p><strong>66、多级反馈队列属于不可剥夺调度算法，只有一个进程运行完毕时，其他进程才可运行。</strong></p><p>答案： 错误</p><p><strong>67、产生死锁的原因是<strong><strong>__</strong></strong>和<strong><strong>____</strong></strong>。</strong></p><p>答案： 资源不足；进程推进顺序非法；</p><p><strong>68、<strong>_____</strong>调度室高级调度，<strong><strong><strong>__</strong></strong></strong>调度是中级调度，<strong><strong><strong>__</strong></strong></strong>调度是低级调度。</strong></p><p>答案： 作业调度；内外存对换；进程调度；</p><p><strong>69、产生死锁的4个必要条件是<strong><strong>__</strong></strong>、<strong><strong>___</strong></strong>、<strong><strong>___</strong></strong>和<strong><strong>_____</strong></strong>。</strong></p><p>答案： 互斥；请求与保持；不可剥夺；环路条件</p><p><strong>70、银行家算法中，当一个进程提出资源请求将导致系统从<strong><strong><strong>___</strong></strong></strong>进入<strong><strong><strong>__</strong></strong></strong>时，系统拒绝它的资源请求。</strong></p><p>答案： 安全状态；不安全状态；非安全状态</p><p><strong>71、判断资源分配图是否可以简化是<strong><strong><strong>____</strong></strong></strong>死锁的方法。</strong></p><p>答案： 检测；</p><p><strong>72、以下（）不是段式存储管理系统的优点。</strong></p><p>A、 方便编程</p><p>B、 方便程序共享</p><p>C、 方便内存管理</p><p>D、 方便对程序保护</p><p>答案： C</p><p><strong>73、在可变分区分配方案中，最佳适应法是将空闲块按（）次序排序的。</strong></p><p>A、 地址递减</p><p>B、 地址递增</p><p>C、 大小递减</p><p>D、 大小递增</p><p>答案： D</p><p><strong>74、在分区存储管理方式中，如果在按地址升序排列的未分配分区表中顺序登记了下列未分配分区：1–起始地址17KB，分区长度为9KB；2–起始地址54KB，分区长度为13KB，现有一个分区被释放，其起始地址为39KB，分区长度为15KB，则系统要（）。</strong></p><p>A、 合并第一个未分配分区</p><p>B、 合并第二个未分配分区</p><p>C、 合并第一个及第二个未分配分区</p><p>D、 不合并任何分区</p><p>答案： B</p><p><strong>75、下列存储管理方案中，（）不存在碎片问题。</strong></p><p>A、 可变分区管理</p><p>B、 可重定位分区管理</p><p>C、 段页式管理</p><p>D、 段式管理</p><p>答案： C</p><p><strong>76、在固定分区存储管理中，处理器需设置下面（）寄存器以保证作业在所在分区内运行。</strong></p><p>A、 变址</p><p>B、 段长</p><p>C、 上，下限</p><p>D、 空闲区</p><p>答案： C</p><p><strong>77、在固定分区管理中，每个分区的大小是（）</strong></p><p>A、 相同</p><p>B、 可以不同，需预先设定</p><p>C、 可以不同，根据进程的大小设定</p><p>D、 随进程的大小变化</p><p>答案： B</p><p><strong>78、在可变分区存储管理中，合并分区的目的是（）</strong></p><p>A、 合并空闲区</p><p>B、 合并分区</p><p>C、 增加内存容量</p><p>D、 便于地址变换</p><p>答案： A</p><p><strong>79、在页式存储管理中，分页是由（）完成的。</strong></p><p>A、 程序员</p><p>B、 编译程序</p><p>C、 硬件</p><p>D、 都不对</p><p>答案： C</p><p><strong>80、在段式存储管理中，分段是由以下（）完成的。</strong></p><p>A、 程序员</p><p>B、 编译程序</p><p>C、 硬件</p><p>D、 都不对</p><p>答案： A</p><p><strong>81、动态重定位需要重定位寄存器的支持（）</strong></p><p>答案： 正确</p><p><strong>82、页是信息的物理单位，段是信息的逻辑单位。</strong></p><p>答案： 正确</p><p><strong>83、存储管理就是管理存储设备的，包括内存和外存。</strong></p><p>答案： 错误</p><p><strong>84、动态重定位就是动态链接（）</strong></p><p>答案： 错误</p><p><strong>85、可变分区就是分区的大小和分区的数目在操作系统运行期间是变化的。</strong></p><p>答案： 正确</p><p><strong>86、用户编制程序时使用符号名地址，处理机访问存储器时使用物理地址。</strong></p><p>答案： 正确</p><p><strong>87、为了减少内部碎片，页的大小越小越好。（）</strong></p><p>答案： 正确</p><p><strong>88、可变分区可以有效地消除外部碎片，但不能消除内部碎片。（）</strong></p><p>答案： 错误</p><p><strong>89、最佳适应算法比首次适应算法具有更好的内存利用率。（）</strong></p><p>答案： 错误</p><p><strong>90、在段式存储管理系统中，段的大小受内存空间的限制。（）</strong></p><p>答案： 正确</p><p><strong>91、在段式存储管理系统中，若程序的逻辑地址用32位表示，其中10位表示段号，则每个段的最大长度是（）</strong></p><p>A、 2的16次方</p><p>B、 2的8次方</p><p>C、 2的24次方</p><p>D、 2的22次方</p><p>答案： D</p><p><strong>92、把程序地址空间中的逻辑地址转换为内存的物理地址称为（）</strong></p><p>A、 加载</p><p>B、 物理化</p><p>C、 重定位</p><p>D、 链接</p><p>答案： C</p><p><strong>93、在以下存储管理方案中，不适用于多道程序设计系统的是（）</strong></p><p>A、 单一连续分区</p><p>B、 可变分区</p><p>C、 固定分区</p><p>D、 页式存储管理</p><p>答案： A</p><p><strong>94、在可变分区系统中，当一个进程撤销后，系统回收其占用的内存空间，回收后造成空闲分区的个数减1的情况是（）</strong></p><p>A、 回收区与空闲区无邻接</p><p>B、 回收区与上下两个空闲区邻接</p><p>C、 回收区与上面的空闲区邻接</p><p>D、 回收区与下面的空闲区邻接</p><p>答案： B</p><p><strong>95、动态重定位技术依赖于（）</strong></p><p>A、 装入程序</p><p>B、 地址变换机构</p><p>C、 重定位寄存器</p><p>D、 目标程序</p><p>答案： C</p><p><strong>96、静态重定位是在（）进行的。</strong></p><p>A、 程序编译时</p><p>B、 程序装入时</p><p>C、 程序链接时</p><p>D、 程序运行时</p><p>答案： B</p><p><strong>97、快表的作用是加快地址变换过程，它采用的硬件是（）。</strong></p><p>A、 通用寄存器</p><p>B、 Cache</p><p>C、 内存</p><p>D、 外存</p><p>答案： B</p><p><strong>98、采用动态分区存储管理系统中，其主存容量为55MB（初始状态全空），采用最佳适配算法，分配和释放的顺序为：分配15MB，分配30MB，释放15MB，分配8MB，分配6MB，此时主存中最大空闲分区的大小是（）。</strong></p><p>A、 7MB</p><p>B、 9MB</p><p>C、 10MB</p><p>D、 15MB</p><p>答案： B</p><p><strong>99、动态重定位是在（）进行的。</strong></p><p>A、 程序编译时</p><p>B、 程序链接时</p><p>C、 程序运行时</p><p>D、 程序装入时</p><p>答案： C</p><p><strong>100、有利于动态链接的内存管理方法是（）。</strong></p><p>A、 可变分区管理</p><p>B、 固定分区管理</p><p>C、 段式管理</p><p>D、 页式管理</p><p>答案： C</p><p><strong>101、将程序地址空间中的逻辑地址变换成物理地址的过程称为<strong><strong>___</strong></strong>。</strong></p><p>答案： 重定位；</p><p><strong>102、在可变分区中采用首次适应算法时，应将空闲区按<strong><strong>_____</strong></strong>次序排列</strong></p><p>答案：地址递增；</p><p><strong>103、在可变分区的分配算法中，倾向于优先使用低地址部分空闲区的是<strong><strong><strong>__</strong></strong></strong>，能使内存空间的空闲分区分布的比较均匀的是<strong><strong><strong><strong>__</strong></strong></strong></strong>，每次分配时，若内存中有和进程需要的分区的大小相等的空闲区，一定能分配给进程的是<strong><strong><strong>__</strong></strong></strong>。</strong></p><p>答案： 首次适应算法；下次适应算法；最佳适应算法；</p><p><strong>104、静态重定位是在<strong><strong><strong>____</strong></strong></strong>时进行，动态重定位是在<strong><strong><strong><strong>___</strong></strong></strong></strong>时进行。</strong></p><p>答案：程序装入内存；程序运行；</p><p><strong>105、静态链接是在<strong><strong><strong>____</strong></strong></strong>时进行，动态链接是在<strong><strong><strong>__</strong></strong></strong>时进行。</strong></p><p>答案： 程序运行前；程序运行；</p><p><strong>106、两个目标模块链接在一起时需要解决<strong><strong><strong><strong>_____</strong></strong></strong></strong>和<strong><strong><strong><strong>____</strong></strong></strong></strong>问题。</strong></p><p>答案： 相对地址的修改；外部符号引用的变换；</p><p><strong>107、在段式存储管理系统中，程序使用的最大段数和每段的最大长度是由<strong><strong><strong><strong>__</strong></strong></strong></strong>解决的。</strong></p><p>答案：逻辑地址结构；</p><p><strong>108、进程有8页，页的大小为1KB，它被映射到共有64个存储块的物理地址空间中，则该进程的逻辑地址的有效位是<strong><strong><strong>_____</strong></strong></strong>，物理地址的有效位是<strong><strong><strong>____</strong></strong></strong>。</strong></p><p>答案： 13位；16位；</p><p><strong>109、在段页式系统中，先将程序分<strong>__</strong>，<strong>____</strong>内分<strong>___</strong>。内存分配以<strong>__</strong>为单位，如果不考虑使用快表的情况，每条访问内存的指令需要<strong><strong>___</strong></strong>次访问内存，其中第_____次是查页表。</strong></p><p>答案： 段；段；页；页；3；2；</p><p><strong>110、在段式存储管理系统中，如果一个进程有15段，每段的大小不超过2KB，则该进程的逻辑地址空间的大小是<strong><strong>__</strong></strong>，其逻辑地址用<strong><strong>___</strong></strong>个二进制位表示。</strong></p><p>答案： 30KB；15；</p><p><strong>111、以下（）方案最容易引起系统抖动。</strong></p><p>A、 固定分配，局部置换</p><p>B、 可变分配，全局置换</p><p>C、 可变分配，局部置换</p><p>D、 固定分配，全局置换</p><p>答案： B</p><p><strong>112、请求页式存储管理的主要特点是（）。</strong></p><p>A、 不要求动态重定位</p><p>B、 不要求进行缺页中断处理</p><p>C、 不要求将作业同时全部装入主存的连续区域</p><p>D、 不要求进行页面置换</p><p>答案： C</p><p><strong>113、设主存的容量为4MB，辅存的容量为40MB，计算机的地址线是24位，则虚存的最大容量是（）。</strong></p><p>A、 4MB</p><p>B、 40MB</p><p>C、 24MB</p><p>D、 16MB</p><p>答案： D</p><p><strong>114、在请求页式存储管理系统中，当所访问的页面不在内存时将产生缺页，缺页中断属于（）</strong></p><p>A、 I/O中断</p><p>B、 程序中断</p><p>C、 内中断</p><p>D、 外中断</p><p>答案： B</p><p><strong>115、虚拟存储管理策略可以（）。</strong></p><p>A、 扩大逻辑外存容量</p><p>B、 扩大逻辑内存容量</p><p>C、 扩大物理外存容量</p><p>D、 扩大物理内存容量</p><p>答案： B</p><p><strong>116、在请求页式管理系统中，页的大小与缺页率的关系是（）</strong></p><p>A、 成正比</p><p>B、 成反比</p><p>C、 成固定比例</p><p>D、 无关</p><p>答案： B</p><p><strong>117、请求段式管理系统的特点是（）</strong></p><p>A、 不要求进行段的保护</p><p>B、 不要求将进程同时全部装入内存的连续区域</p><p>C、 不要求进行缺段中断处理</p><p>D、 不要求进行动态链接</p><p>答案： B</p><p><strong>118、进程在执行过程中发生了缺页中断，操作系统处理后，应让其继续执行（）。</strong></p><p>A、 被中断指令的前一条</p><p>B、 被中断指令的后一条</p><p>C、 被中断的指令</p><p>D、 启动时的第一条指令</p><p>答案： C</p><p><strong>119、在请求页式管理系统中，若采用FIFO页面置换算法，则当分配给进程的页面增加时，缺页的次数（）。</strong></p><p>A、 无影响</p><p>B、 可能增加也可能减少</p><p>C、 增加</p><p>D、 肯定减少</p><p>答案： B</p><p><strong>120、虚拟存储器的理论基础是（）。</strong></p><p>A、 全局性原理</p><p>B、 局部性原理</p><p>C、 动态性</p><p>D、 虚拟性</p><p>答案： B</p><p><strong>121、抖动是操作系统的特征之一。</strong></p><p>答案： 错误</p><p><strong>122、LRU页面置换算法总是选择在主存驻留时间最长的页面淘汰。</strong></p><p>答案： 错误</p><p><strong>123、采用多道程序设计的系统中，系统的道数越多，系统的效率越高。</strong></p><p>答案： 错误</p><p><strong>124、页式存储管理方案易于实现用户使用内存空间的动态扩充。</strong></p><p>答案： 正确</p><p><strong>125、交换技术采用的是以“时间”换取“空间”的策略。</strong></p><p>答案： 正确</p><p><strong>126、在页面共享时，如果多个进程共享一个“程序页面”，则各个进程的逻辑地址中必须对该页使用相同的页号。</strong></p><p>答案： 正确</p><p><strong>127、页式系统难以实现存储保护，是因为一个程序在内存中的页面往往很分散。</strong></p><p>答案： 错误</p><p><strong>128、在请求页式存储管理系统中，为了提高内存的利用率，允许用户使用不同大小的页面。</strong></p><p>答案： 错误</p><p><strong>129、在支持虚拟存储器的系统中，CPU能允许比该计算机内存容量还要大的程序。</strong></p><p>答案： 正确</p><p><strong>130、在请求页式存储管理系统中，LRU置换策略总是优于FIFO置换策略。</strong></p><p>答案： 错误</p><p><strong>131、以下（）不是提高磁盘I/O速度的技术。</strong></p><p>A、 热修复重定向</p><p>B、 预先读</p><p>C、 延迟写</p><p>D、 虚拟盘</p><p>答案： A</p><p><strong>132、为了实现设备无关性，应该（）。</strong></p><p>A、 用户程序必须使用逻辑设备名进行I/O申请</p><p>B、 系统必须设置系统设备表</p><p>C、 用户程序必须使用物理设备名进行I/O申请</p><p>D、 用户程序必须制定设备名</p><p>答案： A</p><p><strong>133、用于设备分配的数据结构有（）。</strong></p><p>A、 系统设备表</p><p>B、 存取控制表</p><p>C、 设备开关表</p><p>D、 文件控制表</p><p>答案： A</p><p><strong>134、通过软件手段，把独占设备改造成若干个用户可共享的设备，这种设备称为（）。</strong></p><p>A、 系统设备</p><p>B、 虚拟设备</p><p>C、 存储设备</p><p>D、 用户设备</p><p>答案： B</p><p><strong>135、以下（）是CPU与I/O之间的接口，它接收从CPU发来的命令，并去控制I/O设备的工作，使CPU从繁杂的设备控制事务中解脱出来。</strong></p><p>A、 中断装置</p><p>B、 系统设备表</p><p>C、 设备控制器</p><p>D、 逻辑设备表</p><p>答案： C</p><p><strong>136、通道对CPU的请求形式是（）。</strong></p><p>A、 陷入</p><p>B、 中断</p><p>C、 通道命令</p><p>D、 跳转指令</p><p>答案： B</p><p><strong>137、缓冲技术中的缓冲池是在（）。</strong></p><p>A、 ROM</p><p>B、 寄存器</p><p>C、 外存</p><p>D、 内存</p><p>答案： D</p><p><strong>138、为了使多个进程有效地同时处理输入/输出，最好使用以下（）技术。</strong></p><p>A、 循环缓冲</p><p>B、 双缓冲</p><p>C、 单缓冲</p><p>D、 缓冲池</p><p>答案： D</p><p><strong>139、中断发生后，应保留（）。</strong></p><p>A、 缓冲区的指针</p><p>B、 被中断的程序</p><p>C、 专用寄存器的内容</p><p>D、 页表</p><p>答案： C</p><p><strong>140、在操作系统中，以下（）是一种硬件机制。</strong></p><p>A、 SPOOLing</p><p>B、 通道</p><p>C、 文件</p><p>D、 虚拟设备</p><p>答案： B</p><p><strong>141、在现代操作系统中，几乎所有的I/O设备与CPU交换数据时，都使用了<strong><strong>____</strong></strong>。</strong></p><p>答案： 缓冲区；</p><p><strong>142、读/写磁盘时，一般把磁盘的访问分成<strong><strong><strong>__</strong></strong></strong>、<strong><strong><strong>_____</strong></strong></strong>和<strong><strong><strong>__</strong></strong></strong>三部分。</strong></p><p>答案： 寻道时间；旋转时间；数据传输时间</p><p>；</p><p><strong>143、设备分配程序在分配设备时，先分配<strong><strong>___</strong></strong>，再分配<strong><strong><strong>___</strong></strong></strong>，最后分配<strong><strong><strong>__</strong></strong></strong>。</strong></p><p>答案： 设备；控制器；通道；</p><p><strong>144、虚拟设备是通过<strong><strong><strong>__</strong></strong></strong>技术把<strong><strong><strong>__</strong></strong></strong>设备变为能为若干用户<strong><strong>____</strong></strong>的设备。</strong></p><p>答案： SPOOLing；独占；共享；</p><p><strong>145、为实现CPU和设备之间的并行工作，系统引入了<strong><strong><strong>_____</strong></strong></strong>和<strong><strong><strong>___</strong></strong></strong>硬件机制。</strong></p><p>答案： 通道；中断；</p><p><strong>146、常用的I/O控制方式有程序直接控制方式、<strong><strong><strong><strong>___</strong></strong></strong></strong>、<strong><strong><strong>___</strong></strong></strong>和<strong><strong><strong>____</strong></strong></strong>。</strong></p><p>答案： 中断控制方式；DMA控制方式；通道方式；</p><p><strong>147、通道是一个独立于<strong><strong>_____</strong></strong>而专门负责I/O的处理机，它控制<strong><strong><strong>___</strong></strong></strong>与内存之间的信息交换。</strong></p><p>答案： CPU；外部设备；</p><p><strong>148、按设备固有属性，一般把设备分为<strong><strong>____</strong></strong>、<strong><strong><strong>____</strong></strong></strong>和<strong><strong><strong>__</strong></strong></strong>。</strong></p><p>答案：独占设备；共享设备；虚拟设备；</p><p><strong>149、设备分配时所需要的数据结构有设备控制表、<strong><strong><strong><strong>__</strong></strong></strong></strong>、<strong><strong><strong>____</strong></strong></strong>和<strong><strong><strong>__</strong></strong></strong>。</strong></p><p>答案： 控制器控制表；通道控制表；系统设备表；</p><p><strong>150、缓冲区的组织可分为<strong><strong>____</strong></strong>、<strong><strong><strong>___</strong></strong></strong>、循环缓冲和<strong><strong><strong>__</strong></strong></strong>。</strong></p><p>答案： 单缓冲；双缓冲；缓冲池；</p><p><strong>151、FAT能描述文件的（）特征。</strong></p><p>A、 文件逻辑结构</p><p>B、 文件物理结构</p><p>C、 文件保护</p><p>D、 文件共享</p><p>答案： B</p><p><strong>152、文件的符号与物理地址的转换是通过（）来实现的。</strong></p><p>A、 索引</p><p>B、 索引节点</p><p>C、 文件目录</p><p>D、 二级索引</p><p>答案： C</p><p><strong>153、在UNIX文件系统中，为了对磁盘空间的空闲块进行有效地管理，采用的方法是（）。</strong></p><p>A、 空闲表</p><p>B、 FAT</p><p>C、 成组链接法</p><p>D、 位示图法</p><p>答案： C</p><p><strong>154、为了防止系统故障造成文件系统损坏，通常采用 ( )方法来保护文件。</strong></p><p>A、 二次转储</p><p>B、 随机转储</p><p>C、 定时转储</p><p>D、 虚拟转储</p><p>答案： B</p><p><strong>155、为了实现对文件的共享访问，在读/写文件时需要对文件进行加锁。现在已有一个用户对某文件进行了读加锁，则另一个用户对该文件的（）加锁操作可以成功。</strong></p><p>A、 加读锁能成功</p><p>B、 加读锁和加写锁都不能成功</p><p>C、 加读锁和写锁都能成功</p><p>D、 加写锁能成功</p><p>答案： A</p><p><strong>156、文件系统采用多级目录结构可以（）。</strong></p><p>A、 缩短文件传送时间</p><p>B、 节省存储空间</p><p>C、 解决命名冲突</p><p>D、 减少系统开销</p><p>答案： C</p><p><strong>157、文件系统是指（）。</strong></p><p>A、 文件的集合</p><p>B、 文件的目录</p><p>C、 实现文件管理的一组软件</p><p>D、 文件及其属性、管理文件的软件和文件系统接口</p><p>答案： D</p><p><strong>158、特殊文件与（）有关。</strong></p><p>A、 文本</p><p>B、 图像</p><p>C、 保密软件</p><p>D、 硬件设备</p><p>答案： D</p><p><strong>159、文件的物理组织方式是由（）来确定的。</strong></p><p>A、 操作系统</p><p>B、 内存容量</p><p>C、 外存容量</p><p>D、 应用程序</p><p>答案： A</p><p><strong>160、文件的物理结构为索引结构时，文件的逻辑结构只能是记录式的。</strong></p><p>答案： 错误</p><p><strong>161、文件系统中文件的内容只能是源代码。</strong></p><p>答案： 错误</p><p><strong>162、树形文件目录结构可以有效地利用文件的存储空间。</strong></p><p>答案： 错误</p><p><strong>163、打开文件操作是建立文件的活动名称表和活动文件表。</strong></p><p>答案： 正确</p><p><strong>164、在文件的物理结构中，链接分配方式最慢，因为磁头不得不在物理块之间移动。</strong></p><p>答案： 正确</p><p><strong>165、使用文件之前必须先<strong>____</strong>文件，使用完毕之后需要<strong>____</strong>文件。</strong></p><p>答案： 打开；关闭；</p><p><strong>166、逻辑文件结构有<strong><strong><strong>___</strong></strong></strong>和<strong><strong><strong>____</strong></strong></strong>两种。</strong></p><p>答案： 流式文件；记录式文件；</p><p><strong>167、文件的转储方法有<strong><strong>____</strong></strong>和<strong><strong><strong>___</strong></strong></strong>。</strong></p><p>答案： 全量转储；增量转储；</p><p><strong>168、在文件系统中，要求物理块必须连续的文件物理组织方式是<strong><strong>_____</strong></strong>文件。</strong></p><p>答案： 顺序；</p><p><strong>169、主目录在树形目录结构中，作为树的<strong><strong>____</strong></strong>节点，称为<strong><strong>___</strong></strong>目录；数据文件作为树的<strong>____</strong>，其他子目录作为树的<strong><strong><strong>__</strong></strong></strong>。</strong></p><p>答案： 根；根；叶子结点；分支结点；</p><p><strong>170、在计算机软件中，操作系统属于（ ）。</strong></p><p>A、 系统软件</p><p>B、 支撑软件</p><p>C、 应用软件</p><p>答案： A</p><p><strong>171、计算机五类部件包括（ ）。</strong></p><p>A、 CPU</p><p>B、 存储器</p><p>C、 输入设备</p><p>D、 输出设备</p><p>答案： ABCD</p><p><strong>172、CPU与键盘鼠标合起来成为主机。</strong></p><p>答案： 错误</p><p><strong>173、寄存器、Cache、内存、磁盘、磁带这几种存储器，容量越来越大，速度越来越慢。</strong></p><p>答案： 正确</p><p><strong>174、合理使用缓存可以带来计算机性能的改善，大大提高存取性能。所以，一些高端领域的CPU设计了两级缓存。</strong></p><p>答案： 错误</p><p><strong>175、（ ）是连接多个部件的信息传输线，是各部件共享的传输介质。</strong></p><p>A、 接口</p><p>B、 总线</p><p>C、 CPU</p><p>D、 存储器</p><p>答案： B</p><p><strong>176、一条单一的指令需要处理的时间称为一个（ ）。</strong></p><p>答案： 指令周期；</p><p><strong>177、常见的中断类别包括以下哪些（ ）？</strong></p><p>A、 程序中断</p><p>B、 时钟中断</p><p>C、 硬件故障中断</p><p>D、 I/O中断</p><p>答案： ABCD</p><p><strong>178、不同的I/O设备具有不同的设备控制器，这些设备控制器均通过I/O接口与主机进行交互。（ ）</strong></p><p>答案： 正确</p><p><strong>179、以下哪些属于CPU应具有的功能（ ）。</strong></p><p>A、 指令控制</p><p>B、 操作控制</p><p>C、 时间控制</p><p>D、 数据加工</p><p>E、 处理中断</p><p>答案： ABCDE</p><p><strong>180、以下用于控制CPU的操作或运算的寄存器有（ ）。</strong></p><p>A、 状态标志寄存器PSW</p><p>B、 程序计数器PC</p><p>C、 通用寄存器</p><p>D、 地址寄存器</p><p>答案： AB</p><p><strong>181、在CPU与内存之间的临时存储器，容量比内存小，存取速度却比内存快很多的存储器是（ ）。</strong></p><p>A、 寄存器</p><p>B、 磁盘</p><p>C、 Cache</p><p>D、 主存</p><p>答案： C</p><p><strong>182、寄存器、Cache、内存、磁带、磁盘这几种存储器，容量越来越大，速度越来越慢。</strong></p><p>答案： 错误</p><p><strong>183、操作系统是对（ ）进行管理的软件。</strong></p><p>A、 软件</p><p>B、 硬件</p><p>C、 计算机资源</p><p>D、 程序</p><p>答案： C</p><p><strong>184、从用户的观点，操作系统是（ ）。</strong></p><p>A、 用户与计算机之间的接口</p><p>B、 控制和管理计算机资源的软件</p><p>C、 合理的组织计算机工作流程的软件</p><p>D、 是扩充裸机功能的的软件，是比裸机功能更强、使用方便的虚拟机</p><p>答案： D</p><p><strong>185、一个计算机系统采用多道程序设计技术后，使多道程序实现了（ ）。</strong></p><p>A、 微观上并行</p><p>B、 宏观上并行</p><p>C、 微观和宏观上均串行</p><p>D、 微观和宏观上均并行</p><p>答案： B</p><p><strong>186、（ ）允许用户把多个作业同时提交给计算机，而无须与计算机进行交互。</strong></p><p>A、 实时系统</p><p>B、 分时系统</p><p>C、 批处理系统</p><p>D、 网络系统</p><p>答案： C</p><p><strong>187、如果分时系统的时间片一定，那么（ ）会使响应时间越长。</strong></p><p>A、 用户数越少</p><p>B、 用户数越多</p><p>C、 内存越少</p><p>D、 内存越多</p><p>答案： B</p><p><strong>188、（ ）和共享是操作系统的两个最基本的特征，两者之间互为存在条件。</strong></p><p>答案： 并发；</p><p><strong>189、（ ）系统不允许用户干预自己的程序。</strong></p><p>答案： 批处理；</p><p><strong>190、在操作系统的发展过程中，多道批处理系统和（ ）系统的出现标志着操作系统的正式形成。</strong></p><p>答案： 分时；</p><p><strong>191、批处理系统按内存中同时存放的运行作业的数目可分为（ ）批处理系统和（ ）批处理系统。</strong></p><p>答案： 单道;多道；多道;单道；</p><p><strong>192、假设有一计算机系统有输入机一台、打印机一台，现在有两道程序投入运行，且程序A先运行，程序B后运行。程序A的运行轨迹为：计算50ms，打印信息100ms，再计算50ms，再打印信息100ms，结束；程序B的运行轨迹为：计算50ms，输入数据70ms，再计算50ms,结束。</strong></p><p><strong>试计算多道运行时，完成两道程序要花的时间为（ ）ms。</strong></p><p>答案： 300；</p><p><strong>193、P、V操作是用原语实现的。</strong></p><p>答案： 正确</p><p><strong>194、（ ）允许在一台主机上同时连接多台终端，多个用户可以通过多台终端同时交互地使用计算机</strong></p><p>A、 分时系统</p><p>B、 实时系统</p><p>C、 网络系统</p><p>D、 批处理系统</p><p>答案： A</p><p><strong>195、操作系统的特征有哪些？</strong></p><p>答案： 1、并发性 2、共享性 3、虚拟性 4、不确定性</p><p><strong>196、操作系统的功能有哪些？</strong></p><p>答案： 1、进程管理 2、存储管理</p><p>3、设备管理 4、文件管理 5、操作系统接口</p><p><strong>197、操作系统的进程管理主要完成那几个方面的任务？</strong></p><p>答案： 1、进程控制 2、进程同步 3、进程通信 4、进程调度</p><p><strong>198、操作系统内存管理中的地址映射完成什么任务？</strong></p><p>答案： 程序员编程不会计算真正的内存地址，因此应用程序编译后产生的机器代码地址是从“0”开始的，程序中的其他地址都是相对于起始地址计算的。程序装入内存，程序地址不可能都从“0”开始计算，因此程序装入内存就需要一个地址变换过程，这个过程就是地址映射，也称地址重定位。</p><p><strong>199、进程同步过程中的协调关系有两种，分别是什么？</strong></p><p>答案： 1、互斥方式 2、同步方式</p><p><strong>200、操作系统的基本类型是</strong></p><p>A、 批处理操作系统、分时操作系统和多任务操作系统</p><p>B、 实时操作系统、分时操作系统和批处理操作系统</p><p>C、 单用户操作系统、多用户操作系统和批处理操作系统</p><p>D、 实时操作系统、分时操作系统和多用户操作系统</p><p>答案： B</p><p><strong>201、分布式系统相比于网络操作系统，具有的特点，下列描述错误的是（)</strong></p><p>A、 系统状态具有确定性</p><p>B、 多机合作</p><p>C、 健壮性</p><p>D、 透明性</p><p>答案： A</p><p><strong>202、在（）的控制下计算机系统能及时处理由过程控制反馈的数据并做出及时响应。</strong></p><p>A、 实时系统</p><p>B、 批处理系统</p><p>C、 分时系统</p><p>D、 网络系统</p><p>答案： A</p><p><strong>203、以下软件中是操作系统的有几个？</strong></p><p><strong>Windows98，Linux，UNIX，Word，DOS，Windows NT，Office，PowerPoint。</strong></p><p>A、 4</p><p>B、 3</p><p>C、 5</p><p>答案： C</p><p><strong>204、多道程序设计技术思想是把多个程序同时放入内存，使它们共享系统中的资源。</strong></p><p>答案： 正确</p><p><strong>205、多道程序设计的特点有：</strong></p><p>A、 多道</p><p>B、 宏观上串行，微观上并行</p><p>C、 宏观上并行，微观上串行</p><p>答案： AC</p><p><strong>206、多道批处理系统和分时系统的出现标志着操作系统的形成。</strong></p><p>答案： 正确</p><p><strong>207、</strong> <strong>进程的含义是什么？进程存在的标识是什么？</strong></p><p>答案： 进程是并发执行的程序在一个数据集合上的执行过程。进程存在的标识是进程控制块（PCB）。</p><p><strong>208、假如有以下程序段。</strong></p><p><strong>S1：a=5-x；</strong></p><p><strong>S2：b=3*a；</strong></p><p><strong>S3：c=a+b；</strong></p><p><strong>S4：d=b+2；</strong></p><p><strong>（1）试画图表示它们执行时的先后次序。</strong></p><p><strong>（2）利用Bernstein条件证明，S1和S2是不可以并发执行的，S3和S4是可以并发执行的。</strong></p><p><strong>209、假如有以下程序段。</strong></p><p><strong>S1:a=5-x;</strong></p><p><strong>S2:b=3*a;</strong></p><p><strong>S3:c=a+b;</strong></p><p><strong>S4:d=b+2;</strong></p><p><strong>（1）试画图表示它们执行时的先后次序。（此问可以在纸上画图拍照上传）</strong></p><p><strong>（2）利用Bernstein条件证明，S1和S2是不可以并发执行的，S3和S4是可以并发执行的。（此问不得采用拍照上传方式）</strong></p><p><strong>210、为什么要引入线程？它与进程有什么区别？</strong></p><p>答案： 引入线程是为了减少程序并发执行时所付出的时间和空间开销，是操作系统具有更好的并发性。</p><p>两者的区别在于：进程是资源的拥有者，不再是调度和分派的基本单位。</p><p>线程是进程的一个实体，是被调度和分派的基本单位，表示进程中的一个控制点，执行一系列指令。</p><p><strong>211、在进程状态转换图中，（）是不可能的。</strong></p><p>A、 运行态–&gt;就绪态</p><p>B、 运行态–&gt;阻塞态</p><p>C、 阻塞态–&gt;运行态</p><p>D、 阻塞态–&gt;就绪态</p><p>答案： C</p><p><strong>212、操作系统对进程进行管理与控制的基本数据结构是（）。</strong></p><p>A、 JCB</p><p>B、 PCB</p><p>C、 PMT</p><p>D、 DCT</p><p>答案： B</p><p><strong>213、一个进程当前处于阻塞状态，则（）。</strong></p><p>A、 它可以被调度而获得处理机</p><p>B、 当I/O完成后，它将变成就绪状态</p><p>C、 它永远不会被执行</p><p>D、 它可能变成就绪状态，也可能直接获得处理机</p><p>答案： B</p><p><strong>214、进程和线程的区别是（）。</strong></p><p>A、 大小不同</p><p>B、 独立调度的单位</p><p>C、 是否拥有资源</p><p>D、 对应的分别是程序和过程</p><p>答案： C</p><p><strong>215、建立进程就是（）。</strong></p><p>A、 建立进程的目标程序</p><p>B、 为其建立进程控制块</p><p>C、 将进程挂起</p><p>D、 建立进程及其子孙的进程控制块</p><p>答案： B</p><p><strong>216、对进程的管理和控制使用（）。</strong></p><p>A、 指令</p><p>B、 原语</p><p>C、 信号量</p><p>D、 信箱通信</p><p>答案： B</p><p><strong>217、下面对进程的描述，错误的是（）。</strong></p><p>A、 进程是一个动态的概念</p><p>B、 进程的执行需要处理机</p><p>C、 进程是有生命期的</p><p>D、 进程是指令的集合</p><p>答案： D</p><p><strong>218、并发程序失去了封闭性是指（）。</strong></p><p>A、 多个相对独立的进程以各自的速度向前推进</p><p>B、 并发进程执行时，在不同时刻发生的错误</p><p>C、 并发进程执行结果与速度无关</p><p>D、 并发进程共享变量，变量的值与并发执行的进程先后顺序有关</p><p>答案： D</p><p><strong>219、当一个进程处于（）状态时，不属于阻塞状态。</strong></p><p>A、 进程正等待着输入一批数据</p><p>B、 进程正等待着打印输出</p><p>C、 进程正等待着另一个进程发来的消息</p><p>D、 进程正等待着给它的一个时间片</p><p>答案： D</p><p><strong>220、进程的并发执行是指若干个进程（）</strong></p><p>A、 同时执行</p><p>B、 在执行时间上是重叠的</p><p>C、 在执行时间上是不重叠的</p><p>D、 共享系统资源</p><p>答案： B</p><p><strong>221、假设系统就绪队列中有20个进程，这20个进程轮换执行，每隔400ms轮换一次，CPU在进程切换时所花费的时间是20ms，试问系统花在进程切换上的开销占系统整个时间的比例是多少？</strong></p><p>答案： 20/(400+20)=4.76%</p><p><strong>222、线程由那几部分组成？</strong></p><p>答案： 1、线程控制块 2、用户栈 3、核心栈</p><p><strong>223、进程的三个基本状态用A、B、C来表示。由A到B是由进程调度所引起的；由B到C是在运行的进程发生了某事件，使之无法继续运行而引起的。判断A为（ ）、B为（ ）、C为（ ）。</strong></p><p>答案：就绪；运行；执行；阻塞；</p><p><strong>224、正在运行的进程，因终端的请求而暂停下来以便研究其运行情况，这时进程应转变为（ ）状态。</strong></p><p>A、 阻塞</p><p>B、 就绪</p><p>C、 就绪挂起</p><p>D、 阻塞挂起</p><p>答案： C</p><p><strong>225、为使进程由就绪转变为就绪挂起，应利用（ ）原语；为使进程由运行状态转变为阻塞状态，应利用 （ ）原语；为使进程由就绪挂起变为就绪，应利用（ ）原语；从阻塞状态变为就绪状态应利用（ ）原语。</strong></p><p>答案： 挂起/suspend；阻塞/block；激活/active；唤醒/wakeup；</p><p><strong>226、进程中断执行时，该进程执行时的信息要被保存下来，以便恢复执行时能从断点处继续。这些CPU状态信息不包括以下的（ ）。</strong></p><p>A、 指令计数器</p><p>B、 栈指针</p><p>C、 进程的就绪、阻塞、运行等状态信息</p><p>D、 进程对应程序的入口地址</p><p>答案： CD</p><p><strong>227、在创建进程时，（ ）不是创建所必需的步骤。</strong></p><p>A、 未进程建立PCB</p><p>B、 为进程分配内存等资源</p><p>C、 为进程分配CPU</p><p>D、 将进程插入就绪队列</p><p>答案： C</p><p><strong>228、线程之所以能减少并发执行的开销是因为线程基本上不拥有资源。（ ）</strong></p><p>答案： 正确</p><p><strong>229、在采用用户级线程的系统中，OS进行CPU调度的对象是（ ）；在采用内核级线程的系统中，CPU调度的对象是（ ）。</strong></p><p>答案： 进程；线程；</p><p><strong>230、对临界区的正确论述</strong></p><p>A、 临界区是指进程中用于实现进程互斥的那段代码</p><p>B、 临界区是指进程中用于实现进程同步的那段代码</p><p>C、 临界区是指进程中用于实现进程通信的那段代码</p><p>D、 临界区是指进程中访问临界资源的那段代码</p><p>答案： A</p><p><strong>231、P、V操作中信号量的值永远代表着某类可用资源的数量。</strong></p><p>答案： 错误</p><p><strong>232、有一只笼子，每次只能放一只动物，猎手向笼子中放猴子，农民向笼子中放猪，动物园等待买笼中的猴子，饭店等待买笼中的猪，试用PV操作写出他们能同步执行的程序。</strong></p><p>答案：</p><p><strong>233、如果有3个进程共享同一程序段，而且每次最多允许两个进程进入该程序段，则信号量的初值应设置为（）</strong></p><p>A、 3</p><p>B、 2</p><p>C、 1</p><p>D、 0</p><p>答案： B</p><p><strong>234、设有4个进程共享一个资源，如果每次只允许一个进程使用该资源，则用P、V操作管理时信号量S的可能取值是（）</strong></p><p>A、 3,2,1,0,-1</p><p>B、 2,1,0,-1,-2</p><p>C、 1,0,-1,-2,-3</p><p>D、 4,3,2,1,0</p><p>答案： C</p><p><strong>235、信号灯可以用来实现进程之间的（）</strong></p><p>A、 调度</p><p>B、 同步与互斥</p><p>C、 同步</p><p>D、 互斥</p><p>答案： B</p><p><strong>236、对于两个并发进程都想进入临界区，设互斥信号量为S，若某时S=0，表示（）</strong></p><p>A、 没有进程进入临界区</p><p>B、 有一个进程进入了临界区</p><p>C、 有两个进程进入了临界区</p><p>D、 有一个进程进入了临界区并且另一个进程正等待进入</p><p>答案： B</p><p><strong>237、以下关于临界区的说法，（）是正确的。</strong></p><p>A、 对于临界区，最重要的是判断哪个进程先进入</p><p>B、 若进程A已进入临界区，而进程B的优先级高于进程A，则进程B可以打断进程A而自己进入临界区</p><p>C、 信号量的初值非负，在其上只能做P、V操作</p><p>D、 两个互斥进程在临界区内，对共享变量的操作是相同的。</p><p>答案： C</p><p><strong>238、并发是指（）</strong></p><p>A、 可平行执行的进程</p><p>B、 可先后执行的进程</p><p>C、 宏观上可同时执行的进程</p><p>D、 不可中断的进程</p><p>答案： C</p><p><strong>239、临界区是（）</strong></p><p>A、 一个缓冲区</p><p>B、 一段数据区</p><p>C、 一段程序</p><p>D、 栈</p><p>答案： C</p><p><strong>240、进程在处理机上执行，他们的关系（）</strong></p><p>A、 进程之间无关，系统是封闭的</p><p>B、 进程之间相互依赖、相互制约</p><p>C、 进程之间，可能有关，也可能无关</p><p>D、 以上都不对</p><p>答案： C</p><p><strong>241、在单处理机中系统处于用户态，如果系统中有n个进程，则就绪队列中的进程个数最多是（）</strong></p><p>A、 1个</p><p>B、 n+1个</p><p>C、 n个</p><p>D、 n-1个</p><p>答案： D</p><p><strong>242、对临界区的描述正确的是（）</strong></p><p>A、 临界区是指进程中用于实现进程互斥的那段代码</p><p>B、 临界区是指进程中用于实现进程同步的那段代码</p><p>C、 临界区是指进程中用于实现进程通信的那段代码</p><p>D、 临界区是指进程中访问临界资源的那段代码</p><p>答案： D</p><p><strong>243、在利用信号量实现互斥时，应将临界区置于P操作和V操作之间。</strong></p><p>答案： 正确</p><p><strong>244、对信号量的操作，只能是（ ）操作和（ ）操作，（ ）操作相当于进程释放资源，（ ）操作相当于进程申请资源，（ ）操作使用顺序不当，可能导致系统死锁。 （请选择P或者V填空）</strong></p><p>答案： P；V；V；P；V；P；P；</p><p><strong>245、如果信号量的初始值为2，表示系统有2个共享资源；如果信号量的当前值为-4，则表示在该信号量上有6个进程等待。</strong></p><p>答案： 错误</p><p><strong>246、使用临界区的准则有（）。</strong></p><p>A、 空闲让进</p><p>B、 忙则等待</p><p>C、 有限等待</p><p>D、 让权等待</p><p>答案： ABCD</p><p><strong>247、**</strong>管程的主要特点<strong>**有（）</strong></p><p>A、 局部数据变量只能被管程的过程访问</p><p>B、 一个进程通过调用管程的一个过程进入管程</p><p>C、 不会出现死锁</p><p>D、 在任何时候，只能有一个进程在管程中执行</p><p>答案： ABD</p><p><strong>248、**</strong>关于管程的叙述正确的是（）**</p><p>A、 管程中的局部数据变量可以被外部直接访问</p><p>B、 当一个进程在管程中执行时，调用管程的其他进程都不会被阻塞</p><p>C、 在管程中的signal()与信号量中的signal()操作实现及意义完全相同</p><p>D、 管程通过使用条件变量提供对同步的支持，这些条件变量包含在管程中，并且只有管程才能访问</p><p>答案： D</p><p><strong>249、**</strong>如果有<strong><strong>5</strong></strong>个进程共享同一程序段，每次允许<strong><strong>3</strong></strong>个进程进入该程序段，若用<strong><strong>PV</strong></strong>操作作为同步机制则信号量<strong><strong>S</strong></strong>为<strong><strong>-1</strong></strong>时表示什么（）**</p><p>A、 有四个进程进入了该程序段</p><p>B、 有一个进程在等待</p><p>C、 有三个进程进入了程序段，有一个进程在等待</p><p>D、 有一个进程进入了该程序段，其余四个进程在等待</p><p>答案： C</p><p><strong>250、信箱通信是一种（）方式</strong></p><p>A、 直接通信</p><p>B、 间接通信</p><p>C、 低级通信</p><p>D、 信号量</p><p>答案： B</p><p><strong>251、在消息缓冲通信中，消息队列是一种（）资源</strong></p><p>A、 临界</p><p>B、 共享</p><p>C、 永久</p><p>D、 可剥夺</p><p>答案： A</p><p><strong>252、以下关于P、V操作的描述（）正确。</strong></p><p>A、 机器指令</p><p>B、 系统调用</p><p>C、 高级通信原语</p><p>D、 低级通信原语</p><p>答案： D</p><p><strong>253、进入管程的互斥是由编译程序实现的</strong></p><p>答案： 正确</p><p><strong>254、管程中使用条件变量来实现同步</strong></p><p>答案： 正确</p><p><strong>255、管程中的条件变量可以在管程外部对他进行访问</strong></p><p>答案： 错误</p><p><strong>256、并发执行的程序具有（）特征。</strong></p><p>A、 顺序性</p><p>B、 封闭性</p><p>C、 可再现性</p><p>D、 间断性</p><p>答案： D</p><p><strong>257、在操作系统中，要想读取文件中的数据，通过（）来实现？</strong></p><p>A、 系统调用</p><p>B、 原语</p><p>C、 文件共享</p><p>D、 中断</p><p>答案： A</p><p><strong>258、进程和程序的本质区别是（）。</strong></p><p>A、 动态或静态</p><p>B、 分时使用或独占计算机资源</p><p>C、 顺序或非顺序的执行其指令</p><p>D、 存储在内存和外存</p><p>答案： A</p><p><strong>259、Bernstein提出了控制进程并发执行的条件</strong></p><p>答案： 正确</p><p><strong>260、只有处于阻塞状态的进程才可能被挂起</strong></p><p>答案： 错误</p><p><strong>261、进程控制块是进程存在的唯一标志。</strong></p><p>答案： 正确</p><p><strong>262、不同进程所执行的程序必定不同。</strong></p><p>答案： 错误</p><p><strong>263、并发执行的程序具有可再现性。</strong></p><p>答案： 错误</p><p><strong>264、原语在执行时不能被中断。</strong></p><p>答案： 正确</p><p><strong>265、任一时刻，若有执行状态的进程，就一定有就绪状态的进程。</strong></p><p>答案： 错误</p><p><strong>266、线程既是拥有资源的单位，又是独立调度和分派的单位。</strong></p><p>答案： 错误</p><p><strong>267、设有一个售票大厅可容纳100人购票，如果厅内不足100人则允许进入，超过则在厅外等候；售票员某时只能给一个购票者服务，购票者买完票后就离开。</strong></p><p><strong>（1）购票者之间是同步关系还是互斥关系？</strong></p><p><strong>（2）用PV操作描述购票者的工作过程。</strong></p><p>答案：</p><p><strong>268、有一只笼子，每次只能放一只动物，猎手向笼子中放猴子，农民向笼子中放猪，动物园等待买笼子中的猴子，饭店等待买笼子中的猪，试用P、V操作写出它们能同步执行的程序。</strong></p><p>答案：</p><p><strong>269、考虑有一个共有150个存储单元的系统，已经按表所示分配给三个进程，试确定下面的请求是否安全。如果安全，请给出安全序列。</strong></p><p><strong>进程 最大需求 已经占有</strong></p><p><strong>1 70 45</strong></p><p><strong>2 60 40</strong></p><p><strong>3 60 15</strong></p><p><strong>（1）第4个进程到达，它最多需要60个存储单元，最初需要25个单元。</strong></p><p><strong>（2）第4个进程到达，它最多需要60个存储单元，最初需要35个单元。</strong></p><p>答案： 45+40+15=100，剩余资源为150-100=50</p><p>1,2,3进程所需资源分别为25,20,45</p><p>（1）是安全的，分配给第4个进程25个单元之后，还剩25个单元，其中第1和第2个进程分别需要25和20个单元就可以完成，所以只要从第1或第2个进程开始的安全序列都是合理的。</p><p>（2）不安全，分配给第4个进程35个单元后，还剩15个单元，分配给这四个进程中的任何一个都不能完成，因此得不到安全序列，是不安全的。</p><p><strong>270、以下（）操作系统中的技术是用来解决进程同步的。</strong></p><p>A、 管道</p><p>B、 通道</p><p>C、 管程</p><p>D、 DMA</p><p>答案： C</p><p><strong>271、下面关于进程的描述，（）是正确的。</strong></p><p>A、 进程执行的相对速度不能由进程自己来控制</p><p>B、 进程利用信号量的P、V操作可以交换大量的信息</p><p>C、 并发进程在访问共享资源时，不可能出现与时间有关的错误</p><p>D、 P、V操作不是原语操作</p><p>答案： A</p><p><strong>272、（）不是进程之间的通信方式。</strong></p><p>A、 过程调用</p><p>B、 消息传递</p><p>C、 共享存储器</p><p>D、 信箱通信</p><p>答案： A</p><p><strong>273、在单处理机中，如果系统中有n个进程，则阻塞队列中的进程个数最多是（）。</strong></p><p>A、 1个</p><p>B、 n+1个</p><p>C、 n个</p><p>D、 n-1个</p><p>答案： C</p><p><strong>274、对临界区应采用同步访问的方式来实现共享。</strong></p><p>答案： 错误</p><p><strong>275、P、V操作既可以用来实现进程之间的同步，也可以实现互斥。</strong></p><p>答案： 正确</p><p><strong>276、进程的互斥是关于进程怎样使用共享资源的问题，因此只要系统中有空闲的共享资源，系统就不会有阻塞的进程。</strong></p><p>答案： 错误</p><p><strong>277、一个临界资源可以对应多个临界区。</strong></p><p>答案： 正确</p><p><strong>278、所有的共享资源都是临界资源。</strong></p><p>答案： 错误</p><p><strong>279、信号量是一种高级进程通信方式，消息缓冲是一种低级进程通信方式</strong></p><p>答案： 错误</p><p><strong>280、下列调度算法，采用非抢占决策模式的是（ ）。</strong></p><p>A、 先来先服务（FCFS）</p><p>B、 短进程优先（SPN）</p><p>C、 响应比高者优先（HRRN）</p><p>D、 时间片轮转（RR）</p><p>答案： ABC</p><p><strong>281、下列调度算法，可能存在进程饥饿现象的是（ ）。</strong></p><p>A、 时间片轮转（RR）</p><p>B、 剩余最短时间优先（SRT）</p><p>C、 高响应比（HRRN）</p><p>D、 反馈（FeedBack）</p><p>答案： BD</p><p><strong>282、**</strong>n<strong>**个并发进程通过初值为1的信号量s共享资源R，当n个进程都通过wait(s)申请访问资源R时，信号量s的值为（ ）。</strong></p><p>A、 0</p><p>B、 n</p><p>C、 -n</p><p>D、 -(n-1)</p><p>答案： D</p><p><strong>283、**</strong>下列哪种方式不支持多处理器环境下的互斥（ ）。**</p><p>A、 中断禁用</p><p>B、 专用机器指令</p><p>C、 信号量</p><p>D、 管程</p><p>答案： A</p><p><strong>284、**</strong>与资源R共享相关<strong>**的信号量s初值为4，经过多次wait和signal操作后s当前值为-2,此时获得R的进程数是（ ）。</strong></p><p>A、 2</p><p>B、 4</p><p>C、 0</p><p>D、 6</p><p>答案： B</p><p><strong>285、**</strong>当一个进程因在互斥信号<strong>**量s上执行signal（s）操作而唤醒另一个进程时，则执行signal操作后s的取值范围是（ ）。</strong></p><p>A、 大于0</p><p>B、 大于等于0</p><p>C、 小于0</p><p>D、 小于等于0</p><p>答案： D</p><p><strong>286、**</strong>在生产者/消费者问题<strong>**中，假设有5个生产者，5个消费者共享容量为8的缓冲空间，则实施互斥访问缓冲空间的信号量初始值为（ ）。</strong></p><p>A、 0</p><p>B、 1</p><p>C、 5</p><p>D、 8</p><p>答案： B</p><p><strong>287、**</strong>假定系统中有<strong><strong>5</strong></strong>个进程<strong><strong>P1</strong></strong>、<strong><strong>P2</strong></strong>、<strong><strong>P3</strong></strong>、<strong><strong>P4</strong></strong>和<strong><strong>P5</strong></strong>；<strong><strong>3</strong></strong>类资源<strong><strong>A</strong></strong>、<strong><strong>B</strong></strong>和<strong><strong>C,</strong></strong>其资源数量分别为<strong><strong>17</strong></strong>、<strong><strong>5</strong></strong>和<strong><strong>20</strong></strong>。<strong><strong>T0</strong></strong>时刻的资源分配情况如下表，系统采用银行家算法实施死锁避免策略，试问<strong><strong>T0</strong></strong>时刻，下列进程序列是安全序列的有（** <strong>）</strong></p><p><strong><img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="IMG_256"></strong></p><p>A、 P4-P2-P3-P1-P5</p><p>B、 P4-P2-P3-P5-P1</p><p>C、 P5-P1-P2-P3-P4</p><p>D、 P5-P4-P2-P1-P3</p><p>答案： ABCD</p><p><strong>288、**</strong>求进程一次性申请所有<strong>**资源，操作系统阻塞进程直到其所有资源申请得到满足，这破坏的是死锁产生条件中的（</strong> <strong>）。</strong></p><p>A、 互斥</p><p>B、 占有且等待</p><p>C、 不可抢占</p><p>D、 循环等待</p><p>答案： B</p><p><strong>289、**</strong>为了解决哲学家就餐中的死锁问题，可以按顺时针方向给餐叉连续编号，每个哲学家就餐前先拿编号低的餐叉，再拿编号高的餐叉，这实际上是破坏了死锁产生条件中的（ ）。**</p><p>A、 互斥</p><p>B、 占有且等待</p><p>C、 不可抢占（非剥夺）</p><p>D、 环路条件</p><p>答案： D</p><p><strong>290、**</strong>死锁的避免是根据（ ）采取措施实现的。**</p><p>A、 配置足够的系统资源</p><p>B、 给进程一次性分配所有资源</p><p>C、 破坏占有且等待条件</p><p>D、 防止系统进入不安全状态</p><p>答案： D</p><p><strong>291、关于临界资源和临界区的说法错误的是( )。</strong></p><p>A、 临界区不允许两个或多个进程同时进入。</p><p>B、 有限等待原则要求程序员尽量把临界区设置大一些。</p><p>C、 让权等待可以让系统工作效率更高。</p><p>D、 同一个线程内可以设置多个不同的临界区。</p><p>答案： B</p><p><strong>292、关于P-V操作的说法错误的是( )。</strong></p><p>A、 P操作可能会阻塞调用进程。</p><p>B、 V操作会把信号量加1。</p><p>C、 P操作可以唤醒一个进程。</p><p>D、 P操作和V操作在所有并发进程中成对出现。</p><p>答案： C</p><p><strong>293、关于死锁不正确的说法是 。</strong></p><p>A、 资源数量不够不一定产生死锁。</p><p>B、 每个死锁的进程一定在等待某个资源。</p><p>C、 每个死锁的进程一定持有某个资源。</p><p>D、五个哲学家并发就餐的过程一定会发生死锁。</p><p>答案： D</p><p><strong>294、异步性会使得每个进程都按自己的逻辑和速度向前运行。</strong></p><p>答案： 正确</p><p><strong>295、线程的并发粒度比进程更细，有利于提升系统并发效率。</strong></p><p>答案： 正确</p><p><strong>296、在一个分区存储管理系统中，按地址排列的内存空闲分区的大小是10KB,4KB,20KB,18KB,7KB,9KB,12KB和15KB。对于以下请求：</strong></p><p><strong>进程1请求12KB</strong></p><p><strong>进程2请求10KB</strong></p><p><strong>进程3请求9KB</strong></p><p><strong>（1）如果采用首次适应算法，将分配哪些空闲分区？</strong></p><p><strong>（2）采用最佳适应法又如何？</strong></p><p>答案：</p><p>（1）进程1存放在20KB位置，进程2存放在10KB位置，进程3存放在18KB位置</p><p>（2）进程1存放在12KB位置，进程2存放在10KB位置，进程3存放在9KB位置</p><p><strong>297、某虚拟存储器的用户地址空间有32个页面，每页大小为1KB。内存的大小为16KB。假设某用户的页表如下。试将虚拟地址0x0A5C和0x093C变换为物理地址。</strong></p><p><strong>页号 存储块号</strong></p><p><strong>0 5</strong></p><p><strong>1 10</strong></p><p><strong>2 4</strong></p><p><strong>3 7</strong></p><p>答案：页面大小为1KB，所以需要10位二进制位表示，16位地址中的后10位为页内位移，前6位为页号。</p><p>0x0A5C的二进制是0000 1010 0101 1100，由此可得页号为000010，页内位移为1001011100，转换为十进制页号是2。2号页面对应的块号为4，故物理地址应是000100 1001011100。</p><p>0x093C的二进制是0000 1001 0011 1100，由此可得页号为000010，页内位移为0100111100，转换为十进制页号是2。2号页面对应的块号为4，故物理地址应为000100 0100111100。</p><p><strong>332、某段式存储管理系统的段表如下：</strong></p><p><strong>段号 段大小 段地址</strong></p><p><strong>0 10KB 30KB</strong></p><p><strong>1 8KB 60KB</strong></p><p><strong>2 15KB 90KB</strong></p><p><strong>请将逻辑地址[0,137]、[1,5000]、[2,3000]转换成物理地址。</strong></p><p>答案：</p><p>[0,137]段号为0，对应的段起始地址为30KB，段内地址为137，未越界。故物理地址为30K+137=30720+137=30857.</p><p>[1,5000]段号为1，对应的段起始地址为60KB，段内地址为5000，未越界。故物理地址为60K+5000=61140+5000=66440.</p><p>[2,3000]段号为2，对应的段起始地址为90KB，段内地址为3000，未越界。故物理地址为90K+3000=92160+3000=95160.</p><p><strong>298、假设页的大小为4KB，一个页表项占4B。如果要映射一个64位的地址空间，并且要求每个页表只占用1页，则需要几级页表？</strong></p><p>答案：</p><p>页的大小是4KB，占用12位，一个页表项是4B，意味着一个页表能够存放1024个页表项，即2的10次方，占用10位。64位地址还剩余42位用于外层页号，显然过大。再次划分外层页表1024个页表项，共10位，以此类推，共可划分为6级，可划分为三级页表，其中页表项共256个。</p><p>6级页 5级页 4级页 3级页 2级页 内部页表</p><p>2位 | 10位 | 10位 | 10位 | 10位 | 10位|页内位移12</p><p><strong>299、假设一个任务被划分成4个大小相等的段，并且系统中为每个段建立了一个有8项的段表。该系统分段与分页相结合。假设页的大小为2KB。</strong></p><p><strong>（1）每段的最大尺寸是多少？</strong></p><p><strong>（2）该任务的逻辑地址空间最大是多少？</strong></p><p><strong>（3）假设该任务访问到物理单元0x00021ABC中的一个元素，那么为它产生的逻辑地址的格式是什么？该系统的物理地址空间最大为多少？</strong></p><p>答案：</p><p>（1）段大最大尺寸：8*2KB=16KB</p><p>（2）任务的逻辑地址空间最大=16K*4=64KB</p><p>（3）逻辑地址格式</p><p>段号2位 页号3位 页内位移11位</p><p>物理单元0x00021ABC中地址为32位（二进制）</p><p>物理地址空间最大为232=4GB</p><p><strong>300、以下()不是段式存储管理系统的优点。</strong></p><p>A、 方便编程</p><p>B、 方便程序共享</p><p>C、 方便内存管理</p><p>D、 方便对程序保护</p><p>答案： C</p><p><strong>301、在可变分区分配方案中,最佳适应法是将空闲块按()次序排序的。</strong></p><p>A、 地址递减</p><p>B、 地址递增</p><p>C、 大小递减</p><p>D、 大小递增</p><p>答案： D</p><p><strong>302、在分区存储管理方式中,如果在按地址升序排列的未分配分区表中顺序登记了下列未分配分区:1–起始地址17KB,分区长度为9KB;2–起始地址54KB,分区长度为13KB,现有一个分区被释放,其起始地址为39KB,分区长度为15KB,则系统要()。</strong></p><p>A、 合并第一个未分配分区</p><p>B、 合并第二个未分配分区</p><p>C、 合并第一个及第二个未分配分区</p><p>D、 不合并任何分区</p><p>答案： B</p><p><strong>303、下列存储管理方案中,()不存在碎片问题。</strong></p><p>A、 可变分区管理</p><p>B、 可重定位分区管理</p><p>C、 段页式管理</p><p>D、 段式管理</p><p>答案： C</p><p><strong>304、在固定分区存储管理中,处理器需设置下面()寄存器以保证作业在所在分区内运行。</strong></p><p>A、 变址</p><p>B、 段长</p><p>C、 上,下限</p><p>D、 空闲区</p><p>答案： C</p><p><strong>305、在固定分区管理中,每个分区的大小是()</strong></p><p>A、 相同</p><p>B、 可以不同,需预先设定</p><p>C、 可以不同,根据进程的大小设定</p><p>D、 随进程的大小变化</p><p>答案： B</p><p><strong>306、在可变分区存储管理中,合并分区的目的是( )</strong></p><p>A、 合并空闲区</p><p>B、 合并分区</p><p>C、 增加内存容量</p><p>D、 便于地址变换</p><p>答案： A</p><p><strong>307、在页式存储管理中,分页是由( )完成的。</strong></p><p>A、 程序员</p><p>B、 编译程序</p><p>C、 硬件</p><p>D、 都不对</p><p>答案： C</p><p><strong>308、在段式存储管理中,分段是由以下( )完成的。</strong></p><p>A、 程序员</p><p>B、 编译程序</p><p>C、 硬件</p><p>D、 都不对</p><p>答案： A</p><p><strong>309、缺页中断与一般的中断没有区别。</strong></p><p>答案： 错误</p><p><strong>310、段式系统中段的共享比页式系统中页的共享更方便。</strong></p><p>答案： 正确</p><p><strong>311、在段页式系统中，如果没有块表，逻辑地址变换到物理地址的过程需要访问三次内存。</strong></p><p>答案： 正确</p><p><strong>312、页式系统的优点是消除了外部碎片，更有效地利用了内存。</strong></p><p>答案： 正确</p><p><strong>313、可变分区可以有效地消除外部碎片,但不能消除内部碎片。()</strong></p><p>答案： 错误</p><p><strong>314、用户编制程序时使用符号名地址,处理机访问存储器时使用物理地址。()</strong></p><p>答案： 正确</p><p><strong>315、为了减少内部碎片,页的大小越小越好。()</strong></p><p>答案： 正确</p><p><strong>316、设备管理的（）功能来实现用户所编制的程序与实际使用的物理设备无关。</strong></p><p>A、 设备独立性</p><p>B、 设备分配</p><p>C、 缓冲管理</p><p>D、 虚拟设备</p><p>答案： A</p><p><strong>317、通道是一种（）</strong></p><p>A、 I/O端口</p><p>B、 I/O专用处理器</p><p>C、 数据通道</p><p>D、 卫星机</p><p>答案： B</p><p><strong>318、在中断处理中，输入输出中断是指（）</strong></p><p>A、 设备出错</p><p>B、 数据传输结束</p><p>C、 设备出错或数据传输结束</p><p>D、 数据传输开始</p><p>答案： C</p><p><strong>319、系统允许一个用户进程同时使用多台I/O设备并行工作</strong></p><p>答案： 正确</p><p><strong>320、DMA控制方式可以一次完成多个数据块的传送。</strong></p><p>答案： 错误</p><p><strong>321、只有引入通道后，CPU和I/O设备才能并行工作。</strong></p><p>答案： 错误</p><p><strong>322、以下()方案最容易引起系统抖动。</strong></p><p>A、 固定分配,局部置换</p><p>B、 可变分配,全局置换</p><p>C、 可变分配,局部置换</p><p>D、 固定分配,全局置换</p><p>答案： B</p><p><strong>323、设主存的容量为4MB,辅存的容量为40MB,计算机的地址线是24位,则虚存的最大容量是()。</strong></p><p>A、 4MB</p><p>B、 40MB</p><p>C、 24MB</p><p>D、 16MB</p><p>答案： D</p><p><strong>324、在请求页式管理系统中,页的大小与缺页率的关系是()</strong></p><p>A、 成正比</p><p>B、 成反比</p><p>C、 成固定比例</p><p>D、 无关</p><p>答案： B</p><p><strong>325、进程在执行过程中发生了缺页中断,操作系统处理后,应让其继续执行()。</strong></p><p>A、 被中断指令的前一条</p><p>B、 被中断指令的后一条</p><p>C、 被中断的指令</p><p>D、 启动时的第一条指令</p><p>答案： C</p><p><strong>326、在请求页式管理系统中,若采用FIFO页面置换算法,则当分配给进程的页面增加时,缺页的次数()。</strong></p><p>A、 无影响</p><p>B、 可能增加也可能减少</p><p>C、 增加</p><p>D、 肯定减少</p><p>答案： B</p><p><strong>327、采用多道程序设计的系统中,系统的道数越多,系统的效率越高。</strong></p><p>答案： 错误</p><p><strong>328、在请求页式存储管理系统中,为了提高内存的利用率,允许用户使用不同大小的页面。</strong></p><p>答案： 错误</p><p><strong>329、在支持虚拟存储器的系统中,CPU能允许比该计算机内存容量还要大的程序。</strong></p><p>答案： 正确</p><p><strong>330、在请求页式存储管理系统中,LRU置换策略总是优于FIFO置换策略。</strong></p><p>答案： 错误</p><p><strong>331、为了减少缺页中断率，页应该小一些。</strong></p><p>答案： 错误</p><p><strong>332、引入缓冲技术的主要目的是</strong></p><p>A、改善用户编程环境</p><p>B、提高CPU的处理速度</p><p>C、降低计算机的硬件成本</p><p>D、缓解外部设备与CPU速度不匹配的矛盾</p><p>答案： D</p><p><strong>333、在SPOOLing系统中，用户的输出数据首先送入</strong></p><p>A、 磁盘固定区域</p><p>B、 内存固定区域</p><p>C、 打印机</p><p>D、 输出设备</p><p>答案： A</p><p><strong>334、大多数低速设备都属于</strong></p><p>A、 SPOOLing</p><p>B、 虚拟设备</p><p>C、 共享数据</p><p>D、 独享数据</p><p>答案： D</p><p><strong>335、等待设备的进程队列有时不必以FCFS顺序排队。</strong></p><p>答案： 正确</p><p><strong>336、逻辑设备表中存有设备驱动程序的地址</strong></p><p>答案： 正确</p><p><strong>337、缓冲池的作用（）</strong></p><p>A、 扩充内存</p><p>B、 进程需要</p><p>C、 扩充外存</p><p>D、 缓解I/O设备与CPU速度不匹配</p><p>答案： D</p><p><strong>338、DMA方式是在（）之间建立一条直接数据通路。</strong></p><p>A、 两个I／O设备</p><p>B、 I/O设备和CPU</p><p>C、 CPU和主存</p><p>D、 I/O设备和内存</p><p>答案： D</p><p><strong>339、Spooling系统中的用户程序可以随时将输出数据送到输出井中，待输出设备空闲时 再由 Spooling系统完成数据的输出操作。</strong></p><p>答案： 正确</p><p><strong>340、有关设备管理的叙述中不正确的是（）</strong></p><p>A、 I/O操作完成后会触发中断</p><p>B、 通道是处理输入/输出的软件</p><p>C、 所有设备的启动工作都由系统统一来做</p><p>D、 编制好的通道程序是存放在主存中的</p><p>答案： B</p><p><strong>341、虚拟设备是指（）。</strong></p><p>A、 允许用户使用比系统中具有的物理设备更多的设备</p><p>B、 允许用户以标准化方式来使用物理设备</p><p>C、 把一个物理设备变换成多个对应的逻辑设备</p><p>D、 允许用户程序不必全部装入主存便可使用系统中的设备</p><p>答案： C</p><p><strong>342、磁盘调度的目的是为了缩短（）时间。</strong></p><p>A、 寻道</p><p>B、 旋转延迟</p><p>C、 数据传送</p><p>D、 磁盘启动</p><p>答案： A</p><p><strong>343、按____分类可将设备分为块设备和字符设备。</strong></p><p>A、 共享属性；</p><p>B、 信息交换单位；</p><p>C、 操作特性；</p><p>D、 从属关系；</p><p>答案： B</p><p><strong>344、为了使多个进程能有效地同时处理输入和输出，最好使用____结构的缓冲技术。</strong></p><p>A、 单缓冲；</p><p>B、 双缓冲；</p><p>C、 循环缓冲；</p><p>D、 缓冲池；</p><p>答案： D</p><p><strong>345、T是读外存数据送内存缓冲区时间，M是数据从缓冲区传送到用户区的时间，C是读内存用户区数据进行计算的时间。在单缓冲情况下，系统对一块数据的处理时间为 （ ）。</strong></p><p>A、 (C+T)</p><p>B、 max(C,T)+M</p><p>C、 max(C+M,T)</p><p>D、 max(C,T)</p><p>答案： B</p><p><strong>346、驱动调度算法中，（ ）算法可能会随时改变移动臂的运动方向。</strong></p><p>A、 电梯调度</p><p>B、 先来先服务</p><p>C、 最短寻道优先</p><p>D、 单向扫描</p><p>答案： BC</p><p><strong>347、共享设备可以供多个进程共同进行存入和读出。每次操作时，它总是一次传输若干数据。因此，共享设备一般为“块设备”。</strong></p><p>答案： 正确</p><p><strong>348、从工作方式上说，大部分独享设备的输入输出操作都是按字符的方式进行传送的，因此这种设备又称作“字符设备”。</strong></p><p>答案： 正确</p><p><strong>349、磁盘属于什么设备。</strong></p><p>A、 中速设备</p><p>B、 高速设备</p><p>C、 块设备</p><p>D、 字符设备</p><p>答案： BC</p><p><strong>350、设备分配过程涉及的数据结构有。</strong></p><p>A、 SDT（系统设备表）</p><p>B、 DCT（设备控制表）</p><p>C、 COCT（控制器控制表）</p><p>D、 CHCT（通道控制表）</p><p>答案： ABCD</p><p><strong>351、设备管理的管理目标是（ ）。</strong></p><p>A、 方便用户使用</p><p>B、 提高设备利用率</p><p>C、 通过管理调度提高I/O效率</p><p>D、 通过软件方法扩充设备功能</p><p>答案： ABCD</p><p><strong>352、对于采用链接分配的文件，可以进行随机访问。</strong></p><p>答案： 错误</p><p><strong>353、文件的逻辑结构是指文件在磁盘上的存储组织方式。</strong></p><p>答案： 错误</p><p><strong>354、在多级目录结构中对文件的访问是通过路径名和用户目录名进行的。</strong></p><p>答案： 错误<br>解析：在多级目录结构中对文件的访问是通过路径名和文件名进行的</p><p><strong>355、文件系统负责文件存储空间的管理但不能实现文件名到物理地址的转换</strong></p><p>答案： 错误</p><p><strong>356、文件目录存放的信息是（）。</strong></p><p>A、 某一文件的文件目录</p><p>B、 该目录中所有子目录文件和数据文件的目录</p><p>C、 该目录中所有数据文件目录</p><p>D、 某一文件存放的数据信息</p><p>答案： B<br>解析：文件目录是FCB的有序集合，一个目录中既有子目录也有数据文件。<br>因此文件目录存放的是该目录中所有子目录文件和数据文件的目录项</p><p><strong>357、下列文件物理结构中，适合随机访问且易于文件扩展的是（）。</strong></p><p>A、 连续结构</p><p>B、 索引结构</p><p>C、 链接结构且磁盘块变长</p><p>D、 链接结构且磁盘块定长</p><p>答案： B</p><p><strong>358、下列关于索引文件的叙述中，（）是正确的。</strong></p><p>A、 建立索引的目的是为了减少存储空间</p><p>B、 索引文件的索引表中每个记录的索引项可以有多个</p><p>C、 索引表中含有索引文件的数据及其物理地址</p><p>D、 对索引文件存取时，必须先查找其索引表</p><p>答案： D</p><p><strong>359、文件系统中，文件访问控制信息存储的合理位置是（）。</strong></p><p>A、 文件控制块</p><p>B、 文件分配表</p><p>C、 用户口令表</p><p>D、 系统注册表</p><p>答案： A</p><p><strong>360、文件系统在创建一个文件时，为它建立一个（）。</strong></p><p>A、文件目录项</p><p>B、 逻辑空间</p><p>C、 逻辑结构</p><p>D、 目录文件</p><p>答案： A</p><p><strong>361、文件的物理结构有（ ）等类型。</strong></p><p>A、 顺序结构</p><p>B、 链接式结构</p><p>C、 流式结构</p><p>D、 索引式结构</p><p>答案： ABD</p><p><strong>362、某文件系统采用混合索引的方式组织元数据，包含5个直接块，1个一次间接块和2个两次间接块，若每个物理块为4KB，每个地址指针长度为32比特，则本文件系统中可支持的最大文件规模约（ ）GB。（精确到整数即可）</strong></p><p>答案：8</p><p><strong>363、假定磁盘总大小为512GB，每个簇包含16个扇区，每个扇区512B，采取位示图的磁盘空闲空间管理方式，则位示图占用空间为（ ）MB</strong></p><p>答案：8；</p><p><strong>364、文件目录是（）的有序集合</strong></p><p>A、 文件控制块</p><p>B、 文件信息</p><p>C、 文件名</p><p>D、 文件属性</p><p>答案： A</p><p><strong>365、无结构文件的含义是（ ）</strong></p><p>A、 变长记录的文件</p><p>B、 索引文件</p><p>C、 流式文件</p><p>D、 索引顺序文件</p><p>答案： C</p><p><strong>366、文件系统采用二级文件目录可以( )</strong></p><p>A、 缩短访问存储器的时间</p><p>B、 实现文件共享</p><p>C、 节省内存空间</p><p>D、 解决不同用户间的文件命名冲突</p><p>答案： D</p><p><strong>367、用磁带作为文件存贮介质时，文件只能组织成（ ）</strong></p><p>A、 顺序文件</p><p>B、 链接文件</p><p>C、 索引文件</p><p>D、 目录文件</p><p>答案： A</p><p><strong>368、从用户使用角度来看，文件管理系统的首先是实现了对文件的“按名存取”。</strong></p><p>答案： 正确</p><p><strong>369、文件管理系统不仅要为外存空间设置相应的数据结构，还要提供对外存空间进行分配和回收的手段。</strong></p><p>答案： 正确</p><p><strong>370、一个文件系统中，其FCB占64B，一个盘块大小为1KB，采用一级目录。假定文件目录中有3200个目录项。则查找一个文件平均需要（）次访问磁盘。</strong></p><p>A、 54</p><p>B、 50</p><p>C、 100</p><p>D、 200</p><p>答案： C<br>解析：一级目录的平均访盘次数为1/2盘块数</p><p><strong>371、位示图可用于（）</strong></p><p>A、 内存空间的管理</p><p>B、 磁盘空间的管理</p><p>C、 文件的保密</p><p>D、 文件目录的查找</p><p>答案： B<br>解析：位图法用来管理磁盘空闲空间</p><p><strong>372、文件的存储空间管理实质上是对（）的组织和管理。</strong></p><p>A、 文件目录</p><p>B、 文件控制块</p><p>C、 外存己占用区域</p><p>D、 外存空闲区</p><p>答案： D</p><p><strong>373、下列文件中属于逻辑结构的文件是____文件</strong></p><p>A、 连续文件；</p><p>B、 系统文件</p><p>C、 流式文件</p><p>D、 库文件</p><p>答案： C</p><p><strong>374、文件路径名是指____</strong></p><p>A、 文件名和文件扩展名；</p><p>B、 一系列的目录文件名和该文件的文件名；</p><p>C、 从根目录到文件所经历的路径中的各符号名的集合；</p><p>D、 目录文件名和文件名的集合；</p><p>答案： C</p><p><strong>375、对一个文件的访问，常由____共同限制。</strong></p><p>A、 用户访问权限和文件属性；</p><p>B、 优先级和文件属性；</p><p>C、 文件属性的口令</p><p>D、 用户访问权限和用户优先级；</p><p>答案： A</p><p><strong>376、常用的文件存取方法有两种：顺序存取和____存取。</strong></p><p>A、 随机</p><p>B、 流式</p><p>C、 串联；</p><p>D、 顺序；</p><p>答案： A</p><p><strong>377、 文件系统用____组织文件。</strong></p><p>A、 目录</p><p>B、 堆栈</p><p>C、 指针</p><p>D、 路径</p><p>答案： A</p><p><strong>378、用户按下键盘以后，操作系统中的什么程序第一个做出反应？（）</strong></p><p>A、 用户库函数</p><p>B、 文件处理程序</p><p>C、 中断处理程序</p><p>D、 系统调用程序</p><p>答案： C</p><p><strong>379、目录解析工作的最终目标是什么？（）</strong></p><p>A、 根据文件的FCB读出文件的内容</p><p>B、 根据用户输入的文件路径名读出文件的内容</p><p>C、 根据用户输入的文件路径名找到该文件的FCB</p><p>D、 格式化整个磁盘</p><p>答案： C</p><p><strong>380、使用自动补全功能时，输入命令名或文件名的前1个或几个字母后按什么键？</strong></p><p>A、 Ctrl</p><p>B、 Tab</p><p>C、 Alt</p><p>D、 Esc</p><p>答案： B</p><p><strong>381、文件的存储空间管理实质上是对()的组织和管理。</strong></p><p>A、 文件目录</p><p>B、 文件控制块</p><p>C、 外存己占用区域</p><p>D、 外存空闲区</p><p>答案： D</p><p><strong>382、在文件系统中,文件的不同物理结构有不同的优缺点。在下列文件的物理结构中,<strong>__</strong>具有直接读写文件任意一个记录的能力,又提高了文件存储空间的利用率。</strong></p><p>A、 链接结构;</p><p>B、 顺序结构;</p><p>C、 索引结构;</p><p>D、 Hash结构;</p><p>答案： C</p><p><strong>383、Spooling系统中的用户程序可以随时将输出数据送到输出井中,待输出设备空闲时 再由 Spooling系统完成数据的输出操作。</strong></p><p>答案： 正确</p><p><strong>384、共享设备可以供多个进程共同进行存入和读出。每次操作时,它总是一次传输若干数据。因此,共享设备一般为“块设备”。</strong></p><p>答案： 正确</p><p><strong>385、从工作方式上说,大部分独享设备的输入输出操作都是按字符的方式进行传送的,因此这种设备又称作“字符设备”。</strong></p><p>答案： 正确</p><p><strong>386、文件管理系统不仅要为外存空间设置相应的数据结构,还要提供对外存空间进行分配和回收的手段。</strong></p><p>答案： 正确</p><p><strong>387、Linux中关于用户主目录说法正确的是。</strong></p><p>A、 /home 目录下与用户名相同的子目录</p><p>B、根目录下与用户名相同的子目录</p><p>C、 超级用户是/root，普通用户是/home 下与用户名相同的子目录</p><p>D、 都不对</p><p>答案： C<br>解析：</p><p><strong>388、使用ln命令生成了一个指向文件old的符号链接new，如果你将old文件删除，是否还能够访问文件中的数据？</strong></p><p>A、 不能再访问</p><p>B、 仍然可以访问</p><p>答案： A</p><p><strong>389、建立一个新文件可以使用的命令是（）。</strong></p><p>A、 chmod</p><p>B、 cp</p><p>C、 touch</p><p>答案： C</p><p><strong>390、写出root用户主目录是（ ），userA用户主目录是（ ）。</strong></p><p>答案： /root；/home/userA；</p><p><strong>391、查看当前目录命令是（ ），改变当前目录命令是（ ）。</strong></p><p>A、 pwd cd</p><p>B、 cd pwd</p><p>C、 cat mkdir</p><p>D、 ls pwd</p><p>答案： A</p><p><strong>392、cd ～和cd 都表示返回当前账户的主目录。</strong></p><p>答案： 正确</p><p><strong>393、Linux中权限最大的账户是admin</strong></p><p>答案： 错误</p><p><strong>394、Linux一般有3个主要部分：内核、命令解释层和实用工具。</strong></p><p>答案： 正确</p><p><strong>395、把程序地址空间中的逻辑地址转换为内存的物理地址，称为（ ）。</strong></p><p>A、 加载</p><p>B、 重定位</p><p>C、 物理化</p><p>D、 链接</p><p>答案： B</p><p><strong>396、如果忘记了ls命令的用法，可以采用（ ）命令获得帮助。</strong></p><p>A、 ？ ls</p><p>B、 help ls</p><p>C、 man ls</p><p>D、 get ls</p><p>答案： C</p><p><strong>397、（ ）命令可以把f1.txt复制为f2.txt。</strong></p><p>A、 cat f1.txt f2.txt</p><p>B、 copy f1.txt f2.txt</p><p>C、 cp f1.txt f2.txt</p><p>答案： C</p><p><strong>398、如果当前目录是/home/sea/china，那么china的父目录是（ ）。</strong></p><p>答案：/home/sea；</p><p><strong>399、如果运行命令chmod 664 /mlx/file，则file文件的权限为（ ）。</strong></p><p>A、 rw-rw-r–</p><p>B、 r-xr-xr–</p><p>C、 rwxrwxrw-</p><p>答案： A</p><p><strong>400、Linux的内核版本2.3.20是（ ）的版本。</strong></p><p>A、 不稳定</p><p>B、 稳定的</p><p>C、 第三次修订</p><p>D、 第二次修订</p><p>答案： A</p><p><strong>401、在vi编辑器中的命令模式下，用户需要切换到插入模式下才能输入字符，这时在命令模式下按下（ ）键即可进入插入模式。</strong></p><p>A、 X</p><p>B、 i</p><p>C、 d</p><p>D、 Y</p><p>答案： B</p><p><strong>402、Linux系统中可用于添加用户账户的命令是（ ）。</strong></p><p>A、 passwd</p><p>B、 useradd</p><p>C、 userdel</p><p>D、 groupadd</p><p>答案： B</p><p><strong>403、不存盘退出vi编辑器，应键入（ ）。</strong></p><p>A、 Esc</p><p>B、 :wq</p><p>C、 exit</p><p>D、 :q！</p><p>答案： D</p><p><strong>404、Linux下，不同的账户可以使用相同的密码。</strong></p><p>答案： 正确</p><p><strong>405、进程A、B共享资源X，需要互斥执行，进程B、C共享资源Y，也需要互斥执行，因此进程A、C必须互斥执行。</strong></p><p>答案： 错误</p><p><strong>406、一个进程正在临界区中执行时不能被中断。</strong></p><p>答案： 错误</p><p><strong>407、在单处理机中，如果系统中有n个进程，则运行队列中的进程个数最多是（）</strong></p><p>A、 1个</p><p>B、 n+1个</p><p>C、 n个</p><p>D、 n-1个</p><p>答案： A</p><p><strong>408、用信号量S实现对系统中4台打印机的互斥使用，S.value的初值应设置为（ ），若S.value的当前值为-1，则表示S.L队列中有（ ）个等待的进程。</strong></p><p>答案： 4；1；</p><p><strong>409、对临界区的描述正确的是()</strong></p><p>A、 临界区是指进程中用于实现进程互斥的那段代码</p><p>B、 临界区是指进程中用于实现进程同步的那段代码</p><p>C、 临界区是指进程中用于实现进程通信的那段代码</p><p>D、 临界区是指进程中访问临界资源的那段代码</p><p>答案： D</p><p><strong>410、在一个新分区上建立文件系统应该使用的命令是（ ）。</strong></p><p>A、 fdisk</p><p>B、 makefs</p><p>C、 mkfs</p><p>D、 format</p><p>答案： C</p><p><strong>411、shell中，可以通过赋值语句直接给变量赋值，通过在变量名前加$字符引用变量的值。</strong></p><p>答案： 正确</p><p><strong>412、下面关于防火墙说法错误的是（ ）。</strong></p><p>A、 防火墙可以防止病毒通过网络传播</p><p>B、 防火墙可以由路由器实现</p><p>C、 所有进出网络的通信流都应该通过防火墙</p><p>D、 防火墙可以过滤外网的访问</p><p>答案： A</p><p><strong>413、在以下人为的恶意攻击行为中，属于主动攻击的是</strong></p><p>A、 发送被篡改的数据</p><p>B、 数据窃听</p><p>C、 数据流分析</p><p>D、 截获数据包</p><p>答案： A</p><p><strong>414、计算机病毒最主要的特征是（）</strong></p><p>A、 传染性和破坏性</p><p>B、 破坏性和突发性</p><p>C、 欺骗性和偶发性</p><p>D、 变异性和周期性</p><p>答案： A</p><p><strong>415、下面不属于网络安全服务的是（）</strong></p><p>A、 访问控制技术</p><p>B、 数据加密技术</p><p>C、 身份认证技术</p><p>D、 数据一致性技术</p><p>答案： D</p><p><strong>416、DES是一种非对称加密算法。</strong></p><p>答案： 错误</p><p><strong>417、数字签名一般采用对称加密机制。</strong></p><p>答案： 错误</p><p><strong>418、计算机安全中的系统安全主要是指（）</strong></p><p>A、 应用系统安全</p><p>B、 硬件系统安全</p><p>C、 数据库系统安全</p><p>D、 操作系统安全</p><p>答案： D</p><p><strong>419、进程同步主要是对多个相关进程在执行次序进行协调。同步机制应遵守的准则是（ ）、（ ）、（ ）和（ ）。</strong></p><p>答案：空闲让进；忙则等待；有限等待；让权等待；</p><p><strong>420、设有10个进程共享一个互斥段，如果最多允许有1个进程进入互斥段，则所采用的互斥信号量初值应设置（ ），如果最多允许有3个进程同时进入互斥段，则所采用的的互斥信号量初值应设置为（ ）。</strong></p><p>答案： 1；3；</p><p><strong>421、创建原语用来创建一个新进程，并将此新进程投入阻塞队列</strong></p><p>答案： 错误</p><p><strong>422、特权指令只能在核心态下运行，而不能在用户态下执行</strong></p><p>答案： 正确</p><p><strong>423、操作系统的最基本的两个特征是资源共享和()。</strong></p><p>A、 多道程序设计</p><p>B、 程序的并发执行</p><p>C、 中断</p><p>D、 程序的顺序执行</p><p>答案： B</p><p><strong>424、多道程序设计技术将一台物理CPU虚拟为多台逻辑的CPU;SPOOLing技术将一台物理上的I/O设备虚拟为多台逻辑上的I/O设备。</strong></p><p>答案： 正确</p><p><strong>425、下列选项中，在用户态执行的是（）</strong></p><p>A、 命令解释程序</p><p>B、 缺页处理程序</p><p>C、 进程调度程序</p><p>D、 时钟中断处理程序</p><p>答案： A</p><p><strong>426、在用户级线程模型中，若一个进程中有多个线程，当进程中的某个线程被阻塞后。</strong></p><p>A、 该进程的其他线程仍可继续运行</p><p>B、 整个进程都将阻塞</p><p>C、 该阻塞线程将被撤销</p><p>D、 该阻塞线程将永远不可能在执行</p><p>答案： B</p><p><strong>427、操作系统对进程的管理和控制主要是通过PCB来实现的。</strong></p><p>答案： 正确</p><p><strong>428、预防死锁不可以禁止以下（）条件。</strong></p><p>A、 请求与保持</p><p>B、 不可剥夺</p><p>C、 互斥</p><p>D、 环路</p><p>答案： C</p><p><strong>429、某系统中有13台磁带机，K个进程共享这些设备，每个进程最多请求使用3台，则系统不会死锁的K值是（）。</strong></p><p>A、 不小于3</p><p>B、 不大于6</p><p>C、 不大于13</p><p>D、 在6与10之间</p><p>答案： B</p><p><strong>430、对系统资源分配图进行简化，可以检测死锁。</strong></p><p>答案： 正确</p><p><strong>431、银行家算法是一种检测死锁的算法。</strong></p><p>答案： 错误</p><p><strong>432、在面向用户的调度准则中，（）是选择实时调度算法的重要准则。</strong></p><p>A、 响应时间快</p><p>B、 平均周转时间短</p><p>C、 截止时间的保证</p><p>D、 优先权高的作业能获得优先服务</p><p>E、 服务费低</p><p>答案： C</p><p><strong>433、资源分配图是不可以完全简化的是判断死锁的（）。</strong></p><p>A、 充分条件</p><p>B、 必要条件</p><p>C、 充分必要条件</p><p>D、 什么也不是</p><p>答案： C</p><p><strong>434、在面向用户的调度准则中，（）准则是为了照顾紧急作业用户的要求而设置的。</strong></p><p>A、 响应时间快</p><p>B、 平均周转时间短</p><p>C、 截止时间的保证</p><p>D、 优先权高的作业能获得优先服务</p><p>E、 服务费低</p><p>答案： D</p><p><strong>435、采用动态分区存储管理系统中,其主存容量为55MB(初始状态全空),采用最佳适配算法,分配和释放的顺序为:分配15MB,分配30MB,释放15MB,分配8MB,分配6MB,此时主存中最大空闲分区的大小是()。</strong></p><p>A、 7MB</p><p>B、 9MB</p><p>C、 10MB</p><p>D、 15MB</p><p>答案： B</p><p><strong>436、虚拟存储器受到的限制除了外存的容量，还有（）。</strong></p><p>A、 指令中的地址长度</p><p>B、 内存的容量</p><p>C、 硬件的好与否</p><p>D、 以上观点都对</p><p>答案： A</p><p><strong>437、设有4个作业同时到达，每个作业的执行时间是2min，它们在一台处理机上按单道方式运行，则平均周转时间为（）。</strong></p><p>A、 5min</p><p>B、 2.5min</p><p>C、 1min</p><p>D、 8min</p><p>答案： A</p><p><strong>438、设有12个同类资源可供4个进程共享，资源分配情况如表所示。目前剩余资源数为2。当进程P1、P2、P3、P4又都相继提出申请要求，为使系统不致死锁，应先满足（）进程的要求。</strong></p><p><strong><img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="IMG_262"></strong></p><p>A、 P1</p><p>B、 P2</p><p>C、 P3</p><p>D、 P4</p><p>答案： B</p><p><strong>439、设有3个作业J1、J2、J3，它们的到达时间和执行时间如表所示。它们在一台处理机上按单道运行并采用短作业优先调度算法，则3个作业的执行次序是（）。</strong></p><p><strong><img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg" alt="IMG_263"></strong></p><p>A、 J1、J2、J3</p><p>B、 J2、J3、J1</p><p>C、 J3、J2、J1</p><p>D、 J2、J1、J3</p><p>答案： B</p><p><strong>440、以下关于优先级设定的说法，（）正确。</strong></p><p>A、 用户进程的优先级应高于系统进程的优先级</p><p>B、 资源要求多的进程优先级应高于资源要求少的进程的优先级</p><p>C、 随着进程的执行时间的增加，进程的优先级应提高</p><p>D、 随着进程的执行时间的增加，进程的优先级应降低</p><p>答案： D</p><p><strong>441、支持多道程序设计的操作系统在运行过程中，不断地选择新进程运行来实现CPU的共享，但其中（）不是引起操作系统选择新进程的直接原因。</strong></p><p>A、 执行进程的时间片用完</p><p>B、 执行进程出错</p><p>C、 执行进程要等待某一事件发生</p><p>D、 有新进程进入就绪队列</p><p>答案： D</p><p><strong>442、设m为同类资源R的数目，n为系统中并发进程数。当n个进程共享m个互斥资源R时，每个进程对R的最大需求是w；则下列情况会出现死锁的是（ ）。</strong></p><p>A、 m=2,n=1,w=2</p><p>B、 m=2,n=2,w=1</p><p>C、 m=4,n=3,w=2</p><p>D、 m=4,n=2,w=3</p><p>答案： D</p><p><strong>443、在段式存储管理系统中,若程序的逻辑地址用24位表示,其中8位表示段号,则每个段的最大长度是()</strong></p><p>A、 2的16次方</p><p>B、 2的8次方</p><p>C、 2的24次方</p><p>D、 2的32次方</p><p>答案： A</p><p><strong>444、在请求页式存储管理系统中，若所需的页不在内存，则会引起（）。</strong></p><p>A、 输入、输出中断</p><p>B、 缺页中断</p><p>C、 时钟中断</p><p>D、 越界中断</p><p>答案： B</p><p><strong>445、信号量是解决进程同步与互斥问题的唯一手段（）</strong></p><p>答案： 错误</p><p><strong>446、当系统处于不安全状态时，就一定会产生死锁。</strong></p><p>答案： 错误</p><p><strong>447、线程不是单独占有资源的单位，线程共享其所属进程的资源**</strong>。**</p><p>答案： 正确</p><p><strong>448、进程数目主要受（ ）的限制</strong></p><p>A、 CPU速度</p><p>B、 用户数量</p><p>C、 终端数目</p><p>D、 打开文件数目</p><p>答案： A</p><p><strong>449、以下操作系统中的技术中，（）技术是用来解决进程同步的。</strong></p><p>A、 管道</p><p>B、 通道</p><p>C、 管程</p><p>D、 DMA</p><p>答案： C</p><p><strong>450、同步是进程之间逻辑上的（）关系。</strong></p><p>A、 制约</p><p>B、 调用</p><p>C、 连接</p><p>D、 排斥</p><p>答案： A</p><p><strong>451、管程中使用条件变量提供对同步的支持，条件变量只有在管程中才能被访问。</strong></p><p>答案： 正确</p><p><strong>452、在利用信号量实现互斥时，应将临界区置于（ ）操作和（ ）操作之间。</strong></p><p>答案：P；V；</p><p><strong>453、并发进程中涉及相同变量的程序段称为（ ），对这段程序要（ ）执行。</strong></p><p>答案： 临界区；互斥；</p><p><strong>454、一个进程有8个页面，对页面的访问轨迹如下：</strong></p><p><strong>1**</strong>，<strong><strong>0</strong></strong>，<strong><strong>2</strong></strong>，<strong><strong>2</strong></strong>，<strong><strong>1</strong></strong>，<strong><strong>7</strong></strong>，<strong><strong>6</strong></strong>，<strong><strong>7</strong></strong>，<strong><strong>0</strong></strong>，<strong><strong>1</strong></strong>，<strong><strong>2</strong></strong>，<strong><strong>0</strong></strong>，<strong><strong>3</strong></strong>，<strong><strong>0</strong></strong>，<strong><strong>4</strong></strong>，<strong><strong>5</strong></strong>，<strong><strong>1</strong></strong>，<strong><strong>5</strong></strong>，<strong><strong>2</strong></strong>，<strong><strong>4</strong></strong>，<strong><strong>5</strong></strong>，<strong><strong>6</strong></strong>，<strong>**7</strong></p><p><strong>分别说明当分配给该进程的存储块数M=3时，采用LRU置换算法的缺页次数和缺页率。</strong></p><p><strong>455、采用镜像技术实现磁盘数据保护的是（ ）。</strong></p><p>A、 RAID 1</p><p>B、 RAID 0</p><p>C、 RAID 3</p><p>D、 RAID 5</p><p>答案： A</p><p><strong>456、RAID技术既可以扩充容量，也可以提示磁盘I/O性能，并且各RAID级别都可以实现容错。（ ）</strong></p><p>答案： 错误</p><p><strong>457、一个磁盘有100个柱面，每个柱面有10个磁道，每个磁道有20个扇区，问一个柱面有多少个扇区（ ）。</strong></p><p>A、 2000</p><p>B、 200</p><p>C、 100</p><p>D、 20000</p><p>答案： B</p><p><strong>458**</strong>、一个作业第一次执行时用了5分钟,而第二次执行用了6分钟,这说明了操作系统的()特点。**</p><p>A、 并发性</p><p>B、 共享性</p><p>C、 虚拟性</p><p>D、 不确定性</p><p>答案： D</p><p><strong>459**</strong>、采用多道程序<strong><strong>设计</strong></strong>技术可以提高CPU和外部设备的()。**</p><p>A、 稳定性</p><p>B、 可靠性</p><p>C、 利用率</p><p>D、 兼容性</p><p>答案： C</p><p><strong>460**</strong>、在计算机系统中,操作系统是()。**</p><p>A、 处于裸机之上的第一层软件</p><p>B、 处于硬件之下的低层软件</p><p>C、 处于软件之上的系统软件</p><p>D、 处于系统软件之上的用户软件</p><p>答案： A<br><strong>461**</strong>、多道程序设计技术引入后,不仅使得CPU与外设的工作可以并行,也使得设备与设备之间的工作可以并行。**</p><p>答案： 正确</p><p><strong>462**</strong>、操作系统是对( )进行管理的软件。**</p><p>A、 软件</p><p>B、 硬件</p><p>C、 计算机资源</p><p>D、 程序</p><p>答案： C</p><p><strong>463、一个计算机系统采用多道程序设计技术后,使多道程序实现了( )。</strong></p><p>A、 微观上并行</p><p>B、 宏观上并行</p><p>C、 微观和宏观上均串行</p><p>D、 微观和宏观上均并行</p><p>答案： B</p><p><strong>464**</strong>、( )允许用户把多个<strong><strong>作业</strong></strong>同时提交给计算机,而无须与计算机进行交互。**</p><p>A、 实时系统</p><p>B、 分时系统</p><p>C、 批处理系统</p><p>D、 网络系统</p><p>答案： C</p><p><strong>465**</strong>、如果分时系统的时间片一定,那么( )会使响应时间越长。**</p><p>A、 用户数越少</p><p>B、 用户数越多</p><p>C、 内存越少</p><p>D、 内存越多</p><p>答案： B</p><p><strong>466、____和共享是操作系统的两个最基本的特征,两者之间互为存在条件。</strong></p><p>答案：并发；；</p><p><strong>467、在操作系统的发展过程中,多道批处理系统和____系统的出现标志着操作系统的正式形成。</strong></p><p>答案：分时；</p><p><strong>468、批处理系统按内存中同时存放的运行作业的数目可分为<strong><strong>批处理系统和</strong></strong>批处理系统。</strong></p><p>答案：单道；多道；</p><p><strong>469、假设有一计算机系统有输入机一台、打印机一台,现在有两道程序投入运行,且程序A先运行,程序B后运行。程序A的运行轨迹为:计算50ms,打印信息100ms,再计算50ms,再打印信息100ms,结束;程序B的运行轨迹为:计算50ms,输入数据70ms,再计算50ms,结束。<br>试计算多道运行时,完成两道程序要花的时间为____ms。</strong></p><p>答案：300；</p><p><strong>470、下面关于进程的描述，不正确的是（）</strong></p><p>A、 进程是多道程序环境中的一个程序</p><p>B、 进程由程序、数据、栈和PCB组成</p><p>C、 线程是一种特殊的进程</p><p>D、 进程是程序在一个数据集合上的执行过程，它是系统进行资源分配的单位</p><p>答案： A</p><p><strong>471、单处理机情况下，以下关于进程的说法，正确的是（）。</strong></p><p>A、 进程就是程序，它是程序的另一种叫法</p><p>B、 进程被创建后，在它消亡之前，任何时刻总是处于运行、就绪或阻塞3种状态之一</p><p>C、 两个进程可以同时处于运行状态</p><p>D、 多个不同的进程可以包含相同的程序</p><p>答案： D</p><p><strong>472、进程是一个具有一定独立功能的程序在其数据集合上的一次（）</strong></p><p>A、 等待活动</p><p>B、 单独活动</p><p>C、 运行活动</p><p>D、 关联操作</p><p>答案： C</p><p><strong>473、以下进程控制块中的四项内容，（）主要是由处理机各种寄存器中的内容组成的。</strong></p><p>A、 进程标识信息</p><p>B、 进程调度信息</p><p>C、 进程控制信息</p><p>D、 处理机状态信息</p><p>答案： D</p><p><strong>474、一个进程被唤醒意味着（）</strong></p><p>A、 进程重新得到CPU</p><p>B、 进程变为就绪状态</p><p>C、 进程的优先级变为最大</p><p>D、 一个进程被挂起</p><p>答案： B</p><p><strong>475、在单处理机系统中有n（n&gt;2)个进程，不可能发生的情况是（）</strong></p><p>A、 没有进程运行，没有就绪进程，n个阻塞进程</p><p>B、 有2个进程运行，有1个就绪进程，n-3个阻塞进程</p><p>C、 有1个进程运行，没有就绪进程，n-1个阻塞进程</p><p>D、 有1个进程运行，有n-1个就绪进程，没有阻塞进程。</p><p>答案： B</p><p><strong>476、进程可以并发执行的条件是Bernstein。</strong></p><p>答案： 正确</p><p><strong>477、进程是一段独立的程序</strong></p><p>答案： 错误</p><p><strong>478、并发是指若干事件在不同时刻发生。</strong></p><p>答案： 错误</p><p><strong>479、一个程序在执行过程中不能产生多个进程。</strong></p><p>答案： 错误</p><p><strong>480、在内核级线程模型中，若一个进程中有多个线程，当进程中的某个线程被阻塞后。</strong></p><p>A、 该进程的其他线程仍可继续运行</p><p>B、 整个进程都将阻塞</p><p>C、 该阻塞进程将被撤销</p><p>D、该阻塞线程将永远不可能在执行</p><p>答案： A</p><p><strong>481、在实现了用户级线程的系统中，CPU调度的对象是（ ），在实现了内核级线程的系统中，CPU调度的对象是（ ）。</strong></p><p>答案：进程；线程；</p><p><strong>482、在一个单处理机系统中，若有6个用户进程，且假设当前时刻为用户态，则处于就绪队列的进程最多有（ ）个，最少有（ ）个。</strong></p><p>答案： 5；0；</p><p><strong>483、信号灯只能描述进程之间的同步关系。</strong></p><p>答案： 错误</p><p><strong>484、进程A和B共享同一临界资源，并且进程A正处于对应的临界区内执行。请从下列描述中选择一条正确的描述。</strong></p><p>A、 进程A的执行不能被中断，即临界区的代码具有原子性。</p><p>B、 进程A的执行能被中断，但中断A后，不能将CPU调度给B进程。</p><p>C、 进程A的执行能被中断，而且只要B进程就绪，就可以将CPU调度给B进程。</p><p>D、 进程A的执行能被中断，而且只要B进程就绪，就必定将CPU调度给B进程。</p><p>答案： C</p><p><strong>485、用信号量S实现对系统中4台打印机的互斥使用，S.value的初值应设置为（），若S.value的当前值为-1，则表示S.L队列中有（）个等待的进程。</strong></p><p>答案：4；1；</p><p><strong>486、死锁就是循环等待。</strong></p><p>答案： 错误</p><p><strong>487、在面向用户的调度准则中，（）是选择分时系统中进程调度算法的重要准则。</strong></p><p>A、 响应时间快</p><p>B、 平均周转时间短</p><p>C、 截止时间的保证</p><p>D、 优先权高的作业能获得优先服务</p><p>E、 服务费低</p><p>答案： A<br>解析：</p><p><strong>488、在面向用户的调度准则中，（）是批处理系统中选择作业调度算法的重要准则。</strong></p><p>A、 响应时间快</p><p>B、 平均周转时间短</p><p>C、 截止时间的保证</p><p>D、 优先权高的作业能获得优先服务</p><p>E、 服务费低</p><p>答案： B<br>解析：</p><p><strong>489、下列算法中，（）只能采用非抢占调度方式，（）只能采用抢占调度方式，而其余的算法既可采用抢占方式，也可采用非抢占方式。</strong></p><p><strong>（选择正确答案前面的标号填空。 A.高优先权优先法 B.时间片轮转法 C.FCFS调度算法 D.短作业优先算法）</strong></p><p>答案：C；B；</p><p><strong>490**</strong>、在可变分区<strong><strong>存储</strong></strong>管理中,合并分区的目的是()**</p><p>A、 合并空闲区</p><p>B、 合并分区</p><p>C、 增加内存容量</p><p>D、 便于地址变换</p><p>答案： A</p><p><strong>491**</strong>、在页式存储<strong><strong>管理</strong></strong>中,分页是由()完成的。**</p><p>A、 程序员</p><p>B、 编译程序</p><p>C、 硬件</p><p>D、 都不对</p><p>答案： C</p><p><strong>492**</strong>、在段式存储管理中,分段是由以下()完成的。**</p><p>A、 程序员</p><p>B、 编译程序</p><p>C、 硬件</p><p>D、 都不对</p><p>答案： A</p><p><strong>493**</strong>、页是信息的<strong><strong>物理</strong></strong>单位,段是信息的逻辑单位。**</p><p>答案： 正确</p><p><strong>494**</strong>、存储管理就是管理存储设备的,包括内存和外存。**</p><p>答案： 错误</p><p><strong>495**</strong>、在段式存储管理系统中,段的大小受内存空间的限制。()**</p><p>答案： 正确</p><p><strong>496**</strong>、在以下存储<strong><strong>管理</strong></strong>方案中,不适用于多道程序设计系统的是()**</p><p>A、 单一连续分区</p><p>B、 可变分区</p><p>C、 固定分区</p><p>D、 页式存储管理</p><p>答案： A</p><p><strong>497**</strong>、在可变分区系统中,当一个进程撤销后,系统回收其占用的内存空间,回收后造成空闲分区的<strong><strong>个数</strong></strong>减1的情况是()**</p><p>A、 回收区与空闲区无邻接</p><p>B、 回收区与上下两个空闲区邻接</p><p>C、 回收区与上面的空闲区邻接</p><p>D、 回收区与下面的空闲区邻接</p><p>答案： B</p><p><strong>498**</strong>、静态重定位是在()进行的。**</p><p>A、 程序编译时</p><p>B、 程序装入时</p><p>C、 程序链接时</p><p>D、 程序运行时</p><p>答案： B</p><p><strong>499**</strong>、快表的作用是加快地址变换过程,它采用的硬件是()。**</p><p>A、 通用寄存器</p><p>B、 Cache</p><p>C、 内存</p><p>D、 外存</p><p>答案： B</p><p><strong>500**</strong>、动态重定位是在()进行的。**</p><p>A、 程序编译时</p><p>B、 程序链接时</p><p>C、 程序运行时</p><p>D、 程序装入时</p><p>答案： C</p><p><strong>501**</strong>、在可变分区中<strong><strong>采用</strong></strong>首次适应算法时,应将空闲区按____次序排列**</p><p>答案： 第1空:地址递增；</p><p><strong>502**</strong>、在可变分区的分配算法中,倾向于优先使用低地址部分空闲区的是<strong><strong>,能使内存空间的空闲分区分布的比较均匀的是</strong></strong>,每次分配时,若内存中有和进程需要的分区的大小相等的空闲区,一定能分配给进程的是____。**</p><p>答案： 第1空:首次适应算法<br>第2空:下次适应算法<br>第3空:最佳适应算法；</p><p><strong>503**</strong>、静态重<strong><strong>定位</strong></strong>是在<strong><strong>时进行,动态重定位是在</strong></strong>时进行。**</p><p>答案： 第1空:程序装入内存<br>第2空:程序运行；</p><p><strong>504**</strong>、静态链接是在<strong><strong>时进行,动态链接是在</strong></strong>时进行。**</p><p>答案： 第1空:程序运行前<br>第2空:程序运行；</p><p><strong>505**</strong>、两个目标模块链接在一起时需要解决<strong><strong>和</strong></strong>问题。**</p><p>答案： 第1空:相对地址的修改<br>第2空:外部符号引用的变换；</p><p><strong>506**</strong>、在段式存储管理系统中,程序使用的最大段数和每段的最大长度是由____解决的。**</p><p>答案： 第1空:<br>逻辑地址结构；</p><p><strong>507**</strong>、进程有8页,页的大小为1KB,它被映射到共有64个存储块的物理地址空间中,则该进程的逻辑地址的有效位是<strong><strong>,物理地址的有效位是</strong></strong>。**</p><p>答案： 第1空:13位<br>第2空:16位；</p><p><strong>508、在段页式系统中,先将程序分<strong><strong>,</strong></strong>内分<strong><strong>。内存分配以</strong></strong>为单位,如果不考虑使用快表的情况,每条访问内存的指令需要<strong><strong>次访问内存,其中第</strong></strong>次是查页表。</strong></p><p>答案： 段；段；页；页；3；三；2；二；</p><p><strong>509、在段式存储管理系统中,如果一个进程有15段,每段的大小不超过2KB,则该进程的逻辑地址空间的大小是<strong><strong>,其逻辑地址用</strong></strong>个二进制位表示。</strong></p><p>答案：30KB;30kb；15；</p><p><strong>510、页式系统的地址变化需要用户自己完成。</strong></p><p>答案： 错误</p><p><strong>511**</strong>、在页面共享时,如果多个进程共享一个“程序页面”,则各个进程的逻辑地址中必须对该页使用相同的页号。**</p><p>答案： 正确</p><p><strong>512**</strong>、页式系统难以实现存储保护,是因为一个程序在内存中的页面往往很分散。**</p><p>答案： 错误</p><p><strong>513、下面的页面置换算法中，引起抖动可能性最大的是（）。</strong></p><p>A、 OPT</p><p>B、 FIFO</p><p>C、 LRU</p><p>D、 CLOCK</p><p>答案： B</p><p><strong>514、内存空间是（）。</strong></p><p>A、 一维的</p><p>B、 二维的</p><p>C、 三维的</p><p>D、 四维的</p><p>答案： A</p><p><strong>515、逻辑地址对应的是（）。</strong></p><p>A、 数据的地址</p><p>B、 内存的基址</p><p>C、 模块的地址</p><p>D、 外存的基址</p><p>答案： C</p><p><strong>516、物理地址对应的是（）。</strong></p><p>A、 数据的地址</p><p>B、 外存的基址</p><p>C、 模块的地址</p><p>D、 内存的基址</p><p>答案： D</p><p><strong>517、在请求页式存储管理系统中，页表的作用是实现从页号到物理块号的（）。</strong></p><p>A、 逻辑映射</p><p>B、 地址映射</p><p>C、 物理映射</p><p>D、 逻辑地址映射</p><p>答案： B</p><p><strong>518、系统抖动现象的发生是由（）引起的。</strong></p><p>A、 置换算法选择不当</p><p>B、 内存容量不足</p><p>C、 交换的信息量过大</p><p>D、 虚拟容量不足</p><p>答案： A</p><p><strong>519、为了减少内存碎片，页应该小一些。</strong></p><p>答案： 正确</p><p><strong>520、为提高对换空间的利用率，一般对其使用离散的分配方式。</strong></p><p>答案： 错误</p><p><strong>521、在请求段式存储管理系统中，分段的尺寸要受到内存空间的限制。</strong></p><p>答案： 正确</p><p><strong>522**</strong>、DMA方式是在()之间建立一条直接数据通路。**</p><p>A、 两个I/O设备</p><p>B、 I/O设备和CPU</p><p>C、 CPU和主存</p><p>D、 I/O设备和内存</p><p>答案： D</p><p><strong>523**</strong>、虚拟设备是指()。**</p><p>A、 允许用户使用比系统中具有的物理设备更多的设备</p><p>B、 允许用户以标准化方式来使用物理设备</p><p>C、 把一个物理设备变换成多个对应的逻辑设备</p><p>D、 允许用户程序不必全部装入主存便可使用系统中的设备</p><p>答案： C</p><p><strong>524**</strong>、通过硬件和软件的功能扩充,把原来独占的设备改造成能为若干用户共享的设备,这种设备称为____。**</p><p>A、 虚拟设备;</p><p>B、 存储设备;</p><p>C、 系统设备;</p><p>D、 用户设备;</p><p>答案： A</p><p><strong>525**</strong>、在采用<strong><strong>SPOOLing</strong></strong>技术的系统中,用户的打印结果首先被送到____。**</p><p>A、 打印机;</p><p>B、 内存固定区域;</p><p>C、 磁盘固定区域;</p><p>D、 终端;</p><p>答案： C</p><p><strong>526、I/O软件的分层结构中,<strong>__</strong>负责将把用户提交的逻辑I/O请求转化为物理I/O操作的启动和执行。</strong></p><p>A、 I/O中断处理程序;</p><p>B、 独立于设备的I/O软件;</p><p>C、 设备驱动程序;</p><p>D、 用户空间的I/O软件;</p><p>答案： C</p><p><strong>527**</strong>、文件目录是( )的有序集合**</p><p>A、 文件控制块</p><p>B、 文件信息</p><p>C、 文件名</p><p>D、 文件属性</p><p>答案： A</p><p><strong>528**</strong>、用磁带作为文件存贮介质时,文件只能组织成( )**</p><p>A、 顺序文件</p><p>B、 链接文件</p><p>C、 索引文件</p><p>D、 目录文件</p><p>答案： A</p><p><strong>529、一个文件系统中,其FCB占64B,一个盘块大小为1KB,采用一级目录。假定文件目录中有3200个目录项。则查找一个文件平均需要()次访问磁盘。</strong></p><p>A、 54</p><p>B、 50</p><p>C、 100</p><p>D、 200</p><p>答案： C<br>解析：一个文件控制块就是一个文件目录项。一个FCB占32字节，盘块大小为1KB，则一个盘块存放16个FCB,3200个目录项占用200个盘块，所以，查找一个文件平均访问磁盘100次。</p><p><strong>530**</strong>、位示图可用于()**</p><p>A、 内存空间的管理</p><p>B、 磁盘空间的管理</p><p>C、 文件的保密</p><p>D、 文件目录的查找</p><p>答案： B</p><p><strong>531**</strong>、对一个文件的访问,常由____共同限制。**</p><p>A、 用户访问权限和文件属性;</p><p>B、 优先级和文件属性;</p><p>C、 文件属性的口令</p><p>D、 用户访问权限和用户优先级;</p><p>答案： A</p><p><strong>532、常用的文件存取方法有两种:顺序存取和____存取。</strong></p><p>A、 随机</p><p>B、 流式</p><p>C、 串联;</p><p>D、 顺序;</p><p>答案： A</p><p><strong>533**</strong>、用户按下键盘以后,操作系统中的什么程序第一个做出反应?()**</p><p>A、 用户库函数</p><p>B、 文件处理程序</p><p>C、 中断处理程序</p><p>D、 系统调用程序</p><p>答案： C</p><p><strong>534**</strong>、设备驱动程序层的作用是为内核 I/O子系统隐藏设备控制器之间的差异。**</p><p>答案： 正确</p><p><strong>535**</strong>、在SPOOLing技术中,用户进程可以直接高效的使用字符设备。**</p><p>答案： 错误</p><p><strong>536**</strong>、从用户使用角度来看,文件管理系统的首先是实现了对文件的“按名存取”。**</p><p>答案： 正确</p><p><strong>537**</strong>、文件管理系统不仅要为外存空间设置相应的数据结构,还要提供对外存空间进行分配和回收的手段。**</p><p>答案： 正确</p><p><strong>538**</strong>、驱动调度算法中, 算法可能会随时改变移动臂的运动方向。**</p><p>A、 电梯调度</p><p>B、 先来先服务</p><p>C、 最短寻道优先</p><p>D、 单向扫描</p><p>答案： BC</p><p><strong>539**</strong>、设置缓冲区的目的是**</p><p>A、 改善中央处理器与外围设备之间速度不匹配的矛盾</p><p>B、 协调逻辑记录大小与物理记录大小不一致</p><p>C、 提高CPU和I/O设备的并行性</p><p>D、 扩展存储空间</p><p>答案： ABC</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统题库二</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统题库一</title>
    <url>/archives/2c0886cb.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 24 2021 17:02:56 GMT+0800 (中国标准时间) --><p><strong>第一章</strong> <strong>操作系统引论</strong> **<br>** <strong>一．选择题</strong><br>1．操作系统是一种 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/afc2065fda5e4a11b297e750515aae6b.jpg.sub2.png"><br>A．通用软件 B．系统软件<br>C．应用软件 D．软件包 答：B<br>2．操作系统的 管理部分负责对进程进行调度。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image004.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/afc2065fda5e4a11b297e750515aae6b.jpg.sub3.png"><br>A．主存储器 B．控制器<br>C．运算器 D．处理机 答：D<br>3．操作系统是对 进行管理的软件。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/afc2065fda5e4a11b297e750515aae6b.jpg.sub4.png"><br>A．软件 B．硬件<br>C．计算机资源 D．应用程序 答：C<br>4．从用户的观点看，操作系统是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/afc2065fda5e4a11b297e750515aae6b.jpg.sub5.png"><br>A．用户与计算机之间的接口<br>B．控制和管理计算机资源的软件<br>C．合理地组织计算机工作流程的软件<br>D．由若干层次的程序按一定的结构组成 答：A<br>5．操作系统的功能是进行处理机管理、 管理、设备管理及信息管理。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/afc2065fda5e4a11b297e750515aae6b.jpg.sub6.png"><br>A．进程 B. 存储器<br>C．硬件 D. 软件 答：B<br>6．操作系统中采用多道程序设计技术提高CPU和外部设备的 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/afc2065fda5e4a11b297e750515aae6b.jpg.sub7.png"><br>A．利用率 B．可靠性<br>C．稳定性 D．兼容性 答：A<br>7．操作系统是现代计算机系统不可缺少的组成部分，是为了提高计算机的 和方便用<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/afc2065fda5e4a11b297e750515aae6b.jpg.sub8.png"><br>户使用计算机而配备的一种系统软件。<br>A．速度 B．利用率<br>C. 灵活性 D．兼容性 答：B<br>8．操作系统的基本类型主要有 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/afc2065fda5e4a11b297e750515aae6b.jpg.sub9.png"><br>A．批处理系统、分时系统及多任务系统<br>B．实时操作系统、批处理操作系统及分时操作系统<br>C．单用户系统、多用户系统及批处理系统<br>D．实时系统、分时系统和多用户系统 答：B<br>9．所谓 是指将一个以上的作业放入主存，并且同时处于运行状态，这些作业共享处<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/afc2065fda5e4a11b297e750515aae6b.jpg.sub10.png"><br>理机的时间和外围设备等其他资源。<br>A. 多重处理 B．多道程序设计<br>C. 实时处理 D. 共行执行 答：B<br>\10. 下面关于操作系统的叙述中正确的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/afc2065fda5e4a11b297e750515aae6b.jpg.sub11.png"></p><p>A．批处理作业必须具有作业控制信息。<br>B．分时系统不一定都具有人机交互功能。<br>C．从响应时间的角度看，实时系统与分时系统差不多。<br>D．由于采用了分时技术，用户可以独占计算机的资源．<br>答：A<br>\11. 如果分时操作系统的时间片一定，那么 ，则响应时间越长。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/408b279d8ffe4afd9802d5707d2090ec.jpg.sub2.png"><br>A．用户数少 B．用户数越多<br>C．内存越少 D．内存越多 答：B<br>12．实时操作系统必须在 内完成来自外部的事件。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/408b279d8ffe4afd9802d5707d2090ec.jpg.sub3.png"><br>A. 响应时间 B．周转时间<br>C．规定时间 D．调度时间 答：C<br>13．分时系统中为了使多个用户能够同时与系统交互，最关键的问题是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/408b279d8ffe4afd9802d5707d2090ec.jpg.sub4.png"><br>A. 计算机具有足够快的运算速度 B．能快速进行内外存之间的信息交换<br>C. 系统能够及时接收多个用户的输入 D．短时间内所有用户程序都能运行<br>答：C<br>14．分时操作系统通常采用 策略为用户服务。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/408b279d8ffe4afd9802d5707d2090ec.jpg.sub5.png"><br>A．可靠性和灵活性 B．时间片轮转<br>C．时间片加权分配 D．短作业优先 答：B<br>\15. 在 操作系统控制下计算机系统能及时处理由过程控制反馈的数据并作出响应。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/408b279d8ffe4afd9802d5707d2090ec.jpg.sub6.png"><br>A．实时 B．分时<br>C．分布式 D．单用户 答：A<br>\16. 下面6个系统中，必须是实时操作系统的有 个。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/408b279d8ffe4afd9802d5707d2090ec.jpg.sub7.png"><br>计算机辅助设计系统<br>航空订票系统<br>过程控制系统<br>机器翻译系统<br>办公自动化系统<br>计算机激光照排系统<br>A．1 B．2 C．3 D．4 答：C<br>\17. 若把操作系统看作计算机系统资源的管理者，下列的 不属于操作系统所管理的<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/408b279d8ffe4afd9802d5707d2090ec.jpg.sub8.png"><br>资源。<br>A. 程序 B．内存 C．CPU D．中断 答：D<br>\18. 在下列操作系统的各个功能组成部分中， 不需要硬件的支持。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/408b279d8ffe4afd9802d5707d2090ec.jpg.sub9.png"><br>A. 进程调度 B. 时钟管理<br>C. 地址映射 D．中断系统 答：A<br>\19. 设计实时操作系统时，首先应考虑系统的 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/408b279d8ffe4afd9802d5707d2090ec.jpg.sub10.png"><br>A．可靠性和灵活性 B．实时性和可靠性</p><p>C. 多路性和可靠性 D．优良性和分配性 答：B<br>20．分时系统需要使用下面哪些成分?<br>(1)多道程序设计技术 (2)作业说明书<br>(3)终端命令解释程序 (4)中断处理<br>(5)优先级调度 (6)系统调用<br>答： (1)、(3)、(4)、(6)<br>21．时间片概念一般用于 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/2e037f6e876a446bbf583d90d36b4f74.jpg.sub2.png"><br>A. 批处理操作系统 B．分时操作系统<br>C. 实时操作系统 D. 都不是 答：B<br>22．批处理系统的主要缺点是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/2e037f6e876a446bbf583d90d36b4f74.jpg.sub3.png"><br>A . CPU使用效率低 B. 无并行性<br>C. 无交互性 D．都不是 答：C<br>\23. 下面 不属于操作系统功能。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/2e037f6e876a446bbf583d90d36b4f74.jpg.sub4.png"><br>A．用户管理 B．CPU和存储管理<br>C．设备管理 D. 文件和作业管理 答：A<br>24．当CPU执行系统程序时，CPU处于 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/2e037f6e876a446bbf583d90d36b4f74.jpg.sub5.png"><br>A．管态 B．目态<br>C．系统态 D．A和C 答：D<br>25．能直接对系统中各类资源进行动态分配和管理，控制、协调各任务的并行执行且系统中<br>主机无主次之分，并向用户提供统一的、有效的软件接口的系统是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/2e037f6e876a446bbf583d90d36b4f74.jpg.sub6.png"><br>A．分布式操作系统 B．实时操作系统<br>C．网络操作系统 D．批处理操作系统 答：A<br>\26. 下列选择中， 不是操作系统关心的主要问题。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/2e037f6e876a446bbf583d90d36b4f74.jpg.sub7.png"><br>A. 管理计算机裸机 B. 设计、提供用户程序与计算机硬件系统的界面<br>C. 管理计算机系统资源 D．高级程序设计语言的编译器 答：D<br>\27. 实时操作系统对可靠件和安全性的要求极高，它 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/2e037f6e876a446bbf583d90d36b4f74.jpg.sub8.png"><br>A. 十分注意系统资源的利用率 B. 不强调响应速度<br>C. 不强求系统资源的利用率 D．不必向用户反馈信息 答：C<br>28．火车站的售票系统属于 系统。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/2e037f6e876a446bbf583d90d36b4f74.jpg.sub9.png"><br>A．单道批处理 B．多道批处理<br>C．实时 D．分时 答：C<br>29．在分时系统中，通常的时间片是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/2e037f6e876a446bbf583d90d36b4f74.jpg.sub10.png"><br>A．几分钟 B．几十秒<br>C．几十毫秒 D．几十微秒 答：C<br>30．用于控制生产流水线、进行工业处理控制的操作系统是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image029.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/2e037f6e876a446bbf583d90d36b4f74.jpg.sub11.png"><br>A．分时系统 B．网络操作系统<br>C．实时系统 D．批处理系统 答：C</p><p>\31. 分时操作系统适用于 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub2.png"><br>A．控制生产流水线 B．调试运行程序<br>C. 大量的数据处理 D．多个计算机资源共享 答：B<br>\32. 下列系统中，属于实时系统的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub3.png"><br>A．办公自动化系统 B. 计算机辅助设计系统<br>C. 飞机订票系统 D．计算机激光照排系统 答：C<br>33．目前个人计算机中的操作系统主要是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub4.png"><br>A. 网络操作系统 B．批处理操作系统<br>C. 单用户操作系统 D．单道单用户操作系统 答：C<br>34．下列操作系统中强调并行计算的操作系统是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub5.png"><br>A．分时系统 B．实时系统<br>C．网络操作系统 D．分布式操作系统 答：D<br>\35. 能够实现通信及资源共享的操作系统是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub6.png"><br>A. 批处理操作系统 B. 分时操作系统<br>C. 实时操作系统 D. 网络操作系统 答：D<br>36．UNIX操作系统是一种 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub7.png"><br>A. 分时操作系统 B．批处理操作系统<br>C. 实时操作系统 D. 分布式操作系统 答：A<br>37．以下操作系统中属于网络操作系统的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub8.png"><br>A. MS-DOS B. Windows98 C. UNIX D. WindowsNT 答：D **<br>** <strong>二．填空题</strong><br>1．操作系统的基本功能包括 ① 管理、② 管理、 ③ 管理、 ④ 管理。除此之外还<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image033.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub9.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub10.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image035.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub11.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image035.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub12.png"><br>为用户使用操作系统提供了用户接口。<br>答：①处理机 ②存储器 ③ 设备 ④信息(或文件)<br>2．如果一个操作系统兼有批处理、分时处理和实时处理操作系统三者或其中两者的功能，<br>这样的操作系统称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image037.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub13.png"><br>答：通用操作系统<br>3．在分时和批处理系统结合的操作系统中引入了“前台”和“后台”作业的概念，其目的<br>是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub14.png"><br>答：为了提高CPU的利用率<br>4．实时操作系统与分时操作系统的主要区别是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub15.png"><br>答：及时性和高可靠性<br>5．在主机控制下进行的输入／输出操作称为 操作。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub16.png"><br>答：联机输入输出<br>6．按内存中同时运行程序的数目可以将批处理系统分为两类：① 和 ②。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image039.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub17.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image041.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/688a1301a93f46799f0b573cd0a0a344.jpg.sub18.png"><br>答：①单道批处理系统 ②多道批处理系统</p><p>7． 系统不允许用户随时干预自己程序的运行。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub2.png"><br>答：批处理<br>8．多道程序设计的特点是多道、 和 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub3.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub4.png"><br>答：宏观上的并行、微观上的串行<br>9．单道批处理系统是在解决 和 的矛盾中发展起来的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub5.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image043.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub6.png"><br>答：人机矛盾、CPU和I/O设备之间速度不匹配<br>10．对操作系统的总体设计目标来说，批处理操作系统应注重提高计算机的效率，尽量增加<br>系统的 ，分时操作系统应保证用户 ；而实时操作系统则应在保证及时响应和处 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub7.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub8.png"><br>理有关事件的前提下，再考虑 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub9.png"><br>答：平均吞吐量、所能忍受的响应时间、系统资源的利用率<br>11．分时系统中的 是衡量一个分时系统性能的重要指标。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image004.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub10.png"><br>答：响应时间<br>12．导弹飞行控制系统属于 系统。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub11.png"><br>答：实时<br>13．在操作系统的发展过程中，多道程序设计和 的出现，标志了操作系统的正式形成。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub12.png"><br>答：分时系统<br>14．实时系统按应用的不同分为 和 两种。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub13.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub14.png"><br>答：过程控制系统、数据处理系统<br>15．分时操作系统的用户通过与计算机相连的 来使用计算机系统，允许多个用户同时<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub15.png"><br>上机。<br>答：终端<br>16．个人计算机操作系统每次只允许一个用户使用计算机，称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image045.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub16.png"><br>答：单用户操作系统<br>17．为计算机网络配置的操作系统称 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub17.png"><br>答：网络操作系统<br>18．网络操作系统的主要功能是实现 以及 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub18.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub19.png"><br>答：各台计算机之间的通信、网络中各种资源的共享<br>19．近年来，适合开放系统的操作系统成为一个重要的研究课题，IEEE把它命名为 ， <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub20.png"><br>即计算机环境可移植操作系统。<br>答：POSIX<br>20．在 控制下，用户在终端设备上可以直接输入、调试和运行自己的程序，能直接修<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub21.png"><br>改程序中的错误，并直接获得结果。<br>答：分时系统<br>21．根据服务对象不同，常用的单处理机OS可以分为如下三种类型：<br>允许多个用户在其终端上同时交互地使用计算机的OS称为 系统，它通常采用 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image049.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub22.png"><br>策略为用户服务；<br>允许用户把苦干个作业提交计算机系统集中处理的OS称为 系统，衡量这种系统性 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/792d920676044082a2e9fdf9341eeb2c.jpg.sub23.png"></p><p>能的一个主要指标是系统的 ； <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/87686bf24f564d9397a0d39d2547b701.jpg.sub2.png"><br>在 系统控制下，计算机系统能及时处理由过程控制反馈的数据并做出响应。设计这种<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/87686bf24f564d9397a0d39d2547b701.jpg.sub3.png"><br>系统时应首先考虑系统的 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/87686bf24f564d9397a0d39d2547b701.jpg.sub4.png"><br>答：分时、时间片轮转、批处理、吞吐量、实时、及时性和可靠性 **<br>** <strong>三．简答题</strong> **<br>1** <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image051.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/87686bf24f564d9397a0d39d2547b701.jpg.sub5.png"></p><p>**<br>2<strong>**．试对分时操作系统和实时操作系统进行比较。</strong><br>答：我们可以从以下几个方面对这两种操作系统进行比较：<br>（1）实时信息处理系统与分时操作系统一样都能为多个用户服务，系统按分时原则为多个<br>终端用户服务；而对实时控制系统，则表现为经常对多路现场信息进行采集以及对多个对象<br>或多个执行机构进行控制。<br>（2）实时信息处理系统与分时操作系统一样，每个用户各占一个终端，彼此独立操作，互<br>不干扰。因此用户感觉就像他一人独占计算机；而在实时控制系统中信息的采集和对对象的<br>控制也都是彼此互不干扰的。<br>（3）实时信息系统对响应时间的要求与分时操作系统类似，都是以人所能接受的等待时间<br>来确定的；而实时控制系统的响应时间则是以控制对象所能接受的延时来确定的。<br>（4）分时操作系统是一种通用系统，主要用于运行终端用户程序，因此它具有较强的交互<br>能力。而实时操作系统虽然也有交互能力，但其交互能力不及前者。<br>（5）分时操作系统要求系统可靠，相比之下，实时操作系统则要求系统高度可靠。 **<br>3<strong><strong>．采用多道程序设计的主要优点是什么</strong></strong>?**<br>答：多道程序设计考虑到作业的运行规律是交替使用CPU和I／O，故将多道程序同时<br>保存于系统中，使各作业对CPU与I／O的使用在时间上重叠，提高了CPU和I／O设备的<br>利用率。 **<br>4<strong>**．什么是操作系统？它有什么基本特征？</strong><br>答：操作系统是指控制和管理计算机的软、硬件资源，合理组织计算机的工作流程、方</p><p>便用户使用的程序集合。 操作系统具有4个基本特征：<br>(1)并发性：宏观上在一段时间内有多道程序在同时运行，而微观上这些程序是在交替执行。<br>(2)共享性：因程序的并发执行而使系统中的软、硬件资源不再为某个程序独占，而是由多<br>个程序共同使用。<br>(3)虚拟性：多道程序设计技术把一台物理计算机虚拟为多台逻辑上的计算机，使得每个用<br>户都感觉自己是“独占”计算机。<br>(4)异步性(不确定性)：多道程序系统中，各程序之间存在着直接或间接的联系，程序的推进<br>速度受到其他程序的影响，这样，程序运行的顺序、程序完成的时间以及程序运行的结果都<br>是不确定的。 **<br>** <strong>第二章</strong> <strong>进程管理</strong> **<br>** <strong>一．选择题</strong><br>1．在进程管理中，当 时进程从阻塞状态变为就绪状态. <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c9c1cbba7f7b4cd2bd0c2003f6e6d186.jpg.sub2.png"><br>A. 进程被进程调度程序选中 B．等待某一事件<br>C．等待的事件发生 D．时间片用完 答：C<br>2．分配到必要的资源并获得处理机时的进程状态是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c9c1cbba7f7b4cd2bd0c2003f6e6d186.jpg.sub3.png"><br>A．就绪状态 B．执行状态<br>C．阻塞状态 D．撤消状态 答：B<br>3．P、V操作是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c9c1cbba7f7b4cd2bd0c2003f6e6d186.jpg.sub4.png"><br>A．两条低级进程通信原语 B．两组不同的机器指令<br>C．两条系统调用命令 D．两条高级进程通信原语 答：A<br>4．对进程的管理和控制使用 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c9c1cbba7f7b4cd2bd0c2003f6e6d186.jpg.sub5.png"><br>A．指令 B．原语<br>C．信号量 D．信箱通信 答：B<br>5．进程的并发执行是指若干个进程 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c9c1cbba7f7b4cd2bd0c2003f6e6d186.jpg.sub6.png"><br>A．同时执行 B．在执行的时间上是重叠的<br>C．在执行的时间上是不可重叠的 D．共享系统资源 答：B<br>6．若P、V操作的信号量S初值为2，当前值为－1，则表示有 等待进程。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c9c1cbba7f7b4cd2bd0c2003f6e6d186.jpg.sub7.png"><br>A．0个 B．1个 C ．2个 D．3个 答：B<br>7．进程的三个基本状态在一定条件下可以相互转化，进程由就绪状态变为运行状态的条件<br>是 ① ；由运行状态变为阻塞状态的条件是 ② 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c9c1cbba7f7b4cd2bd0c2003f6e6d186.jpg.sub8.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image043.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c9c1cbba7f7b4cd2bd0c2003f6e6d186.jpg.sub9.png"><br>A．时间片用完 B．等待某事件发生<br>C．等待的某事件己发生 D．被进程调度程序选中 答，①D ②B<br>8．下列的进程状态变化中， 变化是不可能发生的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c9c1cbba7f7b4cd2bd0c2003f6e6d186.jpg.sub10.png"><br>A．运行一就绪 B．运行一等待<br>C．等待一运行 D．等待一就绪 答：C<br>9．一个运行的进程用完了分配给它的时间片后，它的状态变为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c9c1cbba7f7b4cd2bd0c2003f6e6d186.jpg.sub11.png"></p><p>A．就绪 B．等待<br>C．运行 D．由用户自己确定 答：A<br>10．用P、V操作管理临界区时，信号量的初值应定义为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image053.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub2.png"><br>A．一1 B．0 C．1 D．任意值 答：C<br>11．用V操作唤醒一个等待进程时，被唤醒进程的状态变为 ． <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image045.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub3.png"><br>A．等待 B．就绪 C．运行 D．完成 答：B<br>12．进程间的同步是指进程间在逻辑上的相互 关系。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub4.png"><br>A．联接 B．制约 C. 继续 D．调用 答：B<br>13． 是一种只能进行P操作和V操作的特殊变量。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image041.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub5.png"><br>A．调度 B．进程 C．同步 D．信号量 答：D<br>14．下面对进程的描述中，错误的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub6.png"><br>A．进程是动态的概念 B．进程执行需要处理机<br>C．进程是有生命期的 D．进程是指令的集合 答：D<br>15．下面的叙述中正确的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub7.png"><br>A．操作系统的一个重要概念是进程，因此不同进程所执行的代码也一定不同。<br>B．为了避免发生进程死锁，各进程只能逐个申请资源。<br>C．操作系统用PCB管理进程，用户进程可以从此PCB中读出与本身运行状况有关的信息<br>D．进程同步是指某些进程之间在逻辑上的相互制约关系<br>答：D<br>16．进程控制就是对系统中的进程实施有效的管理，通过使用 、进程撤销、进程阻<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub8.png"><br>塞、进程唤醒等进程控制原语实现。<br>A．进程运行 B．进程管理<br>C．进程创建 D．进程同步 答：C<br>17．操作系统通过 对进程进行管理。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub9.png"><br>A．JCB B．PCB C．DCT D．CHCT 答：B<br>18．用P、V操作可以解决 互斥问题。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub10.png"><br>A．一切 B．某些 C．正确 D．错误 答：A<br>19．通常，用户进程被建立后， 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub11.png"><br>A．便一直存在于系统中，直到被操作人员撤消<br>B．随着作业运行正常或不正常结束而撤消<br>C．随着时间片轮转而撤消与建立<br>D．随着进程的阻塞或唤醒而撤消与建立 答：B<br>20．一个进程被唤醒意味着 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image055.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub12.png"><br>A．该进程重新占有了CPU B．它的优先权变为最大<br>Ｃ．其PCB移至等待队列队首 D．进程变为就绪状态 答：D<br>21．下面所述步骤中， 不是创建进程所必需的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image041.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5bf3dcacee3842ab8792efde3167bbe0.jpg.sub13.png"><br>A．由调度程序为进程分配CPU B．建立一个进程控制块</p><p>C．为进程分配内存 D．将进程控制块链入就绪队列 答：A<br>22．多道程序环境下，操作系统分配资源以 为基本单位。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub2.png"><br>A．程序 B．指令 C. 进程 D．作业 答：C<br>23．对于两个并发进程，设互斥信号量为mutex，若mutex=0，则 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub3.png"><br>A．表示没有进程进入临界区<br>B．表示有一个进程进入临界区<br>C．表示有一个进程进入临界区，另一个进程等待进入<br>D．表示有两个进程进入临界区<br>答：B<br>24．两个进程合作完成一个任务，在并发执行中，一个进程要等待其合作伙伴发来消息，或<br>者建立某个条件后再向前执行，这种制约性合作关系被称为进程的 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image055.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub4.png"><br>A．同步 B．互斥 C．调度 D．执行 答：A<br>25．为了进行进程协调，进程之间应当具有一定的联系，这种联系通常采用进程间交换数据<br>的方式进行，这种方式称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub5.png"><br>A．进程互斥 B．进程同步 C．进程制约 D．进程通信 答：D<br>26．设有5个进程共享一个互斥段，如果最多允许有3个进程同时进入互斥段，则所采用<br>的互斥信号量的初值应是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub6.png"><br>A．5 B．3 C．1 D．0 答：B<br>27．支持多道程序设计的操作系统在运行过程中，不断地选择新进程运行来实现CPU的共<br>享，但其中 不是引起操作系统选择新进程的直接原因。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub7.png"><br>A. 运行进程的时间片用完 B. 运行进程出错<br>C. 运行进程要等待某—事件的发生 D. 有新进程进入就绪状态 答：D<br>28．在多道程序设计系统中，多个计算问题同时装入计算机系统的主存储器 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image057.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub8.png"><br>A．并发执行 B．顺序执行<br>C. 并行执行 D．同时执行 答：A<br>29．引入多道程序设计技术后，处理器的利用率 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub9.png"><br>A．有所改善 B．极大地提高<br>C．降低了 D．无变化，仅使程序执行方便 答：B<br>30．从总体上说，采用多道程序设计技术可 单位时间的算题量，但对每一个算 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub10.png"><br>题，从算题开始到全部完成所需的时间比单道执行所需的时间可能要 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image059.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub11.png"><br>A．增加，减少 B．增加，延长<br>C. 减少，延长 D．减少，减少 答：B<br>31．同一程序运行在不同的数据集上，创建了 的进程。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub12.png"><br>A．同步 B．互斥<br>C. 相同 D．不同 答：D<br>32．关于进程，下列叙述不正确的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/094f2a47f10d4e18b0016d851154451e.jpg.sub13.png"><br>A．进程包含了数据和运行其上的程序</p><p>B．同一程序运行在不同的数据集合上时，构成不同的进程<br>C．一个被创建了的进程，在它消亡之前，总是处于三种基本状态之一<br>D．若干个进程在单CPU系统中必须依次执行，即一个进程完成后，另一个进程才能<br>开始工作 答：D<br>33．对于一个单CPU系统，允许若干进程同时执行，轮流占用CPU称它们为 的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image061.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub2.png"><br>A．顺序执行 B．同时执行<br>C．并行执行 D．并发执行 答：D<br>34．一个程序与和它有关的进程的对应关系是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub3.png"><br>A．一对一 B．多对一<br>C．一对多 D．多对多 答：C<br>35．在操作系统中，使计算机系统能实现进程并发执行，保证系统正常工作的机制是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub4.png"><br>A．中断 B．查询<br>C．同步 D．互斥 答：A **<br>** <strong>二．填空题</strong><br>1．进程的基本特征有 ① 、 ② 、独立性、异步性及结构特征。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub5.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub6.png"><br>答：①动态性 ②并发性<br>2．信号量的物理意义是当信号量值大于零时表示 ① ；当信号量值小于零时其绝对值表示 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub7.png"><br>② 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub8.png"><br>答：①可用资源的数目 ②因请求该资源而被阻塞的进程数目<br>3．临界资源的概念是 ① ，而临界区是指② 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub9.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image063.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub10.png"><br>答：①一次仅允许一个进程访问的资源<br>②进程中访问临界资源的那段程序代码<br>4．进程在运行过程中有三种基本状态，它们是 ① 、 ② 、 ③ 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub11.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image065.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub12.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image063.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub13.png"><br>答：①运行 ②就绪 ③等待（阻塞）<br>5．进程主要由 ①、 ② 、 ③ 三部分内容组成，其中 ④ 是进程存在的唯一标志，而 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub14.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub15.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image067.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub16.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub17.png"><br>⑤ 部分也可以为其他进程共享。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image069.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub18.png"><br>答：①程序段 ②数据段 ③PCB ④PCB ⑤程序段<br>6．系统中各进程之间逻辑上的相互制约关系称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub19.png"><br>答：进程同步<br>7：若一个进程己进入临界区，其他欲进入临界区的进程必须 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image041.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub20.png"><br>答：等待<br>8．将进程的 链接在一起就形成了进程队列。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub21.png"><br>答：PCB<br>9．用P、V操作管理临界区时，任何一个进程在进入临界区之前应调用 ① 操作，在退出<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub22.png"><br>临界区时应调用 ② 操作。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d0e335fb376d49afbca7ce0a97aa1e9f.jpg.sub23.png"><br>答：①P ②V</p><p>10．用信箱实现通信时，应有 ① 和 ② 两条基本原语。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub2.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub3.png"><br>答：①发送 ②接收<br>11．在多道程序系统中，进程之间存在着的不同制约关系可以划分为两类： ① 与 ② 。<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub4.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image067.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub5.png"><br>③ 指进程间具有的一定逻辑关系； ④ 是指进程间在使用共享资源方面的约束关系。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image067.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub6.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub7.png"><br>答：①同步 ②互斥 ③同步 ④互斥<br>12．有m个进程共享同一临界资源，若使用信号量机制实现对临界资源的互斥访问，则信<br>号量值的变化范围是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub8.png"><br>答：1至－(m－1)<br>13．设系统中有n(n&gt;2)个进程，且当前不再执行进程调度程序，试考虑下述4种情况：<br>①没有运行进程，有2个就绪进程，n个进程处于等待状态。<br>②有1个运行进程，没有就绪进程，n一1进程处于等待状态。<br>⑨有1个运行进程，有1个就绪进程，n一2进程处于等待状态。<br>④有1个运行进程，n一1个就绪进程，没有进程处于等待状态。<br>上述情况中，不可能发生的情况是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub9.png"><br>答：①<br>14．在一个单处理机系统中，若有5个用户进程，且假设当前时刻为用户态，则处于就绪状<br>态的用户进程最多有 ① 个，最少有 ② 个。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image035.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub10.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image063.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub11.png"><br>答：①4 ②0<br>15．操作系统中，对信号量S的P原语操作定义中，使进程进入相应等待队列等待的条件<br>是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub12.png"><br>答：S&lt;0<br>16．下面关于进程的叙述不正确的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub13.png"><br>①进程申请CPU得不到满足时，其状态变为等待状态。<br>②在单CPU系统中，任一时刻至多有一个进程处于运行状态。<br>③优先级是进行进程调度的重要依据，一旦确定不能改变。<br>④进程获得处理机而运行是通过调度而实现的。<br>答：③<br>17．信箱逻辑上分成 ① 和 ② 两部分。 ① 中存放有关信箱的描述。 ② 由若干格子组成， <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image072.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub14.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub15.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub16.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image067.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub17.png"><br>每格存放一信件，格子的数目和大小在创建信箱时确定。<br>答：①信箱头 ②信箱体<br>18．当多个进程等待分配处理机时，系统按一种规定的策略从多个处于 状态的进 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub18.png"><br>程中选择一个进程，让它占有处理机，被选中的进程就进入了 状态。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub19.png"><br>答：就绪、执行<br>19．若使当前运行的进程总是优先级最高的进程，应选择 进程调度算法。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image055.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub20.png"><br>答：抢占式（剥夺式）<br>20．操作系统中用于完成一些特定功能的、不可中断的过程称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a25cd72959904501afe77116e5c39c5f.jpg.sub21.png"><br>答：原语</p><p><strong>三．简答题</strong> **<br>1<strong><strong>．在操作系统中为什么要引入进程概念</strong></strong>?<strong><strong>它与程序的关系是怎样的</strong></strong>?**<br>答：在操作系统中，由于多道程序并发执行时共享系统资源，共同决定这些资源的状态，<br>因此系统中各程序在执行过程中就出现了相互制约的新关系，程序的执行出现“走走停停”<br>的新状态。这些都是在程序执行的动态过程中发生的。用程序这个静态概念已不能如实反映<br>程序并发执行过程中的这些特征。为此，人们引入“进程”这一概念来描述程序动态执行过<br>程的性质。<br>进程和程序是既有联系又有区别的两个概念，进程不能脱离具体程序而虚设，程序规定<br>了相应进程所要完成的动作。它们的主要区别如下：<br>(1)程序是指令的有序集合，其本身没有任何运行的含义，它是一个静态的概念；进程是程<br>序在处理机上的一次执行过程，它是一个动态概念。<br>(2)程序的存在是永久的，而进程则是有生命期的，它因创建而产生，因调度而执行，因得<br>不到资源而暂停，因撤销而消亡。<br>(3)程序仅是指令的有序集合。而进程则由程序、数据和进程控制块组成。<br>(4)在传统的操作系统中，进程是资源分配和调度运行的基本单位，而程序不是。<br>(5)进程与程序之间不是一一对应的，即同一程序同时运行于若干不同的数据集合上，它将<br>属于若干个不同的进程；而一个进程至少对应执行一个程序。 **<br>2<strong><strong>．为了实现并发进程间的合作和协调工作，以及保证系统的安全，操作系统在进程管理方<br>面应做哪些工作</strong></strong>?**<br>答：(1)进程控制：系统必须设置一套控制机构来实现进程创建、进程撤消以及进程在<br>运行过程中的状态转换。<br>(2)进程同步：系统必须设置同步机制来实现对所有进程的运行进行协调，协调的方式包括<br>进程的互斥和进程的同步。<br>(3)进程通信：多道程序环境下可能需要诸进程合作完成一个任务，这些进程相互间需要通<br>过交换信息来协调各自工作的进度。因此系统必须具有进程之间通信(交换信息)的能力。<br>(4)进程调度：系统必须能够在处理机空闲时，按一定算法从就绪进程队列中选择一个就绪<br>进程，把处理机分配给它，并为之设置运行的现场使其投入运行。 **<br>3<strong>**．在操作系统中引入线程概念的主要目的是什么？</strong><br>答：减少程序并发执行时所需付出的时空开销，提高程序执行的并发度。特别有利于共<br>享存储器的多处理机系统，和更加适合c／s模型。 **<br>4<strong><strong>．在一个单</strong></strong>CPU<strong><strong>的多道程序设计系统中，若在某一时刻有</strong></strong>N<strong>**个进程同时存在，那么处于<br>运行态、等待态和就绪态进程的最小和最大值分别可能是多少？</strong><br>答：若多道程序设计系统中，在某一时刻有N个进程同时存在，则处于运行态的进程<br>最少0个，最大1个；处于就绪态的进程最少0个，最大N—1个；处于等待态的进程最少<br>0个，最大N个。 **<br>5<strong><strong>．设有</strong></strong>n<strong>**个进程共享一个互斥段，对于如下两种情况：</strong></p><p><strong>(1)**</strong>如果每次只允许一个进程进入互斥段；** **<br>(2)<strong><strong>如果每次最多允许</strong></strong>m<strong><strong>个进程（</strong></strong>m&lt;n<strong>**）同时进入互斥段。</strong> **<br>** <strong>试问：所采用的互斥信号量初值是否相同**</strong>?<strong><strong>信号量的变化范围如何</strong></strong>?**<br>答：(1)信号量的初值为1。信号量的变化范围是1，0，－1，„，－(n－1)。<br>(2)信号量的初值为m。信号量的变化范围是：m，m－1，„,1,0,„,－(n－m)。 **<br>** <strong>四．应用题</strong> **<br>1<strong>**．在测量控制系统中，数据采集任务把所采集的数据送入一单缓冲区；计算任务从该单缓<br>冲区中取出数据进行计算。试写出利用信号量机制实现两者共享单缓冲区的同步算法。</strong><br>解：在本题中，应设置两个信号童sf，se，信号量sf表示缓冲区中是否有可供打印的<br>计算结果，其初值为o；信号量se用于表示缓冲区有无空位置存放新的信息，其初值为1。<br>本题的同步描述如下：<br>int se=1;<br>int sf=0;<br>main( )<br>{<br>cobegin<br>get ( ) ;<br>compute ( );<br>coend<br>}<br>get ( )<br>{<br>while (采集工作未完成)<br>{<br>采集一个数据；<br>p(se);<br>将数据送入缓冲区；<br>v(sf);<br>}<br>}<br>compute ( )<br>{<br>while (计算工作未完成)<br>{<br>p(sf);<br>从缓冲区中取出数据；</p><p>v(se);<br>进行数据计算；<br>}<br>} **<br>2<strong><strong>．下图给出了四个进程合作完成某一任务的前趋图，试说明这四个进程间的同步关系并用</strong></strong><br>P<strong><strong>、</strong></strong>V<strong>**操作描述它。</strong> <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image074.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/03966a69f3c043e6a988764e78473173.jpg.sub2.png"></p><p>解：上图说明任务启动后Sl先执行。当S1结束后，S2、S3可以开始执行。S2、S3完<br>成后，S4才能开始执行。为了确保这一执行顺序，设三个同步信号量b2、b3、b4分别表示<br>进程S2、S3、S4是否可以开始执行，其初值均为0。这四个进程的同步描述如下：<br>int b2=0;<br>int b3=0;<br>int b4=0;<br>main ( )<br>{<br>cobegin<br>s1 ( );<br>s2 ( );<br>s3 ( );<br>s4 ( );<br>coend<br>}<br>s1 ( )<br>{<br>„<br>v(b2);<br>v(b3);<br>}<br>s2 ( )<br>{<br>p(b2);</p><p>„<br>v(b4);<br>}<br>s3 ( )<br>{<br>p(b3);<br>„<br>v(b4);<br>}<br>s4 ( )<br>{<br>p(b4);<br>p(b4); /<em>因在s2和s3完成后均对b4作了v操作，因此这里要用两个p操作</em>/<br>„<br>} **</p><hr><p>3<strong><strong>．用</strong></strong>PV<strong>**操作解决读者写者问题的正确程序如下：</strong><br>begin S, Sr: Semaphore; rc: integer;<br>S:=1; Sr:=1; rc:=0;<br>cobegin PROCESS Reader i ( i=1,2…)<br>begin P(Sr)<br>rc:=rc+1;<br>if rc=1 then P(S);<br>V(Sr);<br>read file;<br>P(Sr);<br>rc:=rc-1<br>if rc=0 thenV(S);<br>V(Sr);<br>end ;<br>PROCESS Writer j (j=1,2…)<br>begin P(S);<br>Write file;<br>V(S)<br>end;<br>coend ;<br>end;</p><p><img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image076.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/89f698ddd98f4ff7a109cc917a07d7d1.jpg.sub1.png">请回答：（1）信号量 Sr的作用；<br>(1) 程序中什么语句用于读写互斥，写写互斥；<br>(2) （3）若规定仅允许5个进程同时读怎样修改程序？<br>答：（1）Sr用于读者计数rc的互斥信号量；<br>（2）if rc=1 then P（S）中的P（S）用于读写互斥，写者进程中的P（S）用于写写互斥，<br>读写互斥。<br>（3）程序中增加一个信号量S5，初值为5，P（S5）语句加在读者进程P（Sr）之前，V（S5）<br>语句加在读者进程第2个V（Sr）之后。 **<br>4.** <strong>设公共汽车上，司机和售票员的活动分别是：<br>司机的活动： 启动车辆；<br>正常行车；<br>到站停车；<br>售票员的活动：关车门；<br>售票；<br>开车门；<br>在汽车不断的到站、停车、行驶过程中，这两个活动有什么同步关系？用信号量和P、V操<br>作实现他们的同步。<br>** 解：在汽车行驶过程中，司机活动与售票员活动之间的同步关系为：售票员关车门后，<br>向司机发开车信号，司机接到开车信号后启动车辆，在汽车正常行驶过程中售票员售票，到<br>站时司机停车，售票员在车停后开车门让乘客上下车。因此司机启动车辆的动作必须与售票<br>员关车门的动作取得同步；售票员开车门的动作也必须与司机停车取得向步，在本题中，应<br>设置两个信号量：</strong>s1<strong>、</strong>s2<strong>，</strong>s1<strong>表示是否允许司机启动汽车，其初值为</strong>0<strong>： **<br>s2</strong>表示是否允许售票员开门，其初值为<strong>0</strong>。用<strong>P</strong>、<strong>v</strong>原语描述如下： **<br>int s1=0;<br>int s2=0;<br>main ( )<br>{<br>cobegin<br>driver ( );<br>busman ( );<br>coend<br>}<br>driver ( )<br>{<br>while(1)<br>{<br>p(s1);**</p><p>启动车辆；<br>正常行车；<br>到站停车；<br>v(s2);<br>}<br>}<br>busman ( )<br>{<br>while(1)<br>{<br>关车门；<br>v(s1);<br>售票；<br>p(s2);<br>开车门；<br>上下乘客；<br>}<br>} **<br>** <strong>第三章</strong> <strong>处理机调度与死锁</strong> **<br>** <strong>一．选择题</strong><br>1．在为多道程序所提供的可共享的系统资源不足时，可能出现死锁。但是，不适当的 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image072.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/9e539f71bea140e0af38cf40b823cd77.jpg.sub2.png"><br>也可能产生死锁。<br>A．进程优先权 B.资源的线性分配<br>C. 进程推进顺序 D.分配队列优先权<br>答：C<br>2．采用资源剥夺法可解除死锁，还可以采用 方法解除死锁。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/9e539f71bea140e0af38cf40b823cd77.jpg.sub3.png"><br>A．执行并行操作 B．撤消进程<br>C．拒绝分配新资源 D. 修改信号量<br>答：B<br>4．产生死锁的必要条件有四个，要防止死锁的发生，可以破坏这四个必要条件之一，但破<br>坏 条件是不大实际的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/9e539f71bea140e0af38cf40b823cd77.jpg.sub4.png"><br>A．互斥 B．不可抢占<br>C．部分分配 D. 循环等持<br>答：A</p><p>5．在分时操作系统中，进程调度经常采用 算法. <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image053.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5d70fb9dd07842ff8f58658b45fcf9f1.jpg.sub2.png"><br>A．先来先服务 B．最高优先权<br>C. 时间片轮转 D．随机<br>答：C<br>6．资源的按序分配策略可以破坏 条件。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image078.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5d70fb9dd07842ff8f58658b45fcf9f1.jpg.sub3.png"><br>A．互斥使用资源 B. 占有且等待资源<br>C. 非抢夺资源 D．循环等待资源<br>答：D<br>7．在 情况下，系统出现死锁。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5d70fb9dd07842ff8f58658b45fcf9f1.jpg.sub4.png"><br>A．计算机系统发生了重大故障<br>B．有多个封锁的进程同时存在<br>C．苦干进程因竞争资源而无休止地相互等持他方释放已占有的资源<br>D．资源数大大小于进程数或进程同时申请的资源数大大超过资源总数<br>答：C<br>8．银行家算法是一种 算法。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5d70fb9dd07842ff8f58658b45fcf9f1.jpg.sub5.png"><br>A．死锁解除 B．死锁避免<br>C. 死锁预防 D. 死锁检测<br>答：B<br>\9. 优先权是在创建进程时确定的，确定之后在整个进程运行期间不再改变。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5d70fb9dd07842ff8f58658b45fcf9f1.jpg.sub6.png"><br>A. 先来先服务 B．静态<br>C．动态 D．短作业<br>答：B<br>\10. 某系统中有3个并发进程，都需要同类资源4个，试问该系统不会发生死锁的最少资源<br>数是 . <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image080.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5d70fb9dd07842ff8f58658b45fcf9f1.jpg.sub7.png"><br>A．9 B．10 C．11 D．12<br>答：B<br>11．在下列解决死锁的方法中，属于死锁预防策略的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5d70fb9dd07842ff8f58658b45fcf9f1.jpg.sub8.png"><br>A. 银行家算法 B．资源有序分配法<br>C．死锁检测法 D．资源分配图化简法<br>答：B<br>12．以下叙述中正确的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image057.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5d70fb9dd07842ff8f58658b45fcf9f1.jpg.sub9.png"><br>A．调度原语主要是按照一定的算法，从阻塞队列中选择一个进程，将处理机分配给它。<br>B．预防死锁的发生可以通过破坏产生死锁的四个必要条件之一来实现,但破坏互斥条件的可<br>能性不大。</p><p>C．进程进入临界区时要执行开锁原语。<br>D．既考虑作业等待时间，又考虑作业执行时间的调度算法是先来先服务算法<br>答：B<br>13． 是作业存在的惟一标志。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/4703bfee78bf4d249ef8a6cffc892f76.jpg.sub2.png"><br>A. 作业名 B. 进程控制块<br>C. 作业控制块 D．程序名<br>答：C<br>14．作业调度算法的选择常考虑因素之一是使系统有最高的吞吐量，为此应 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/4703bfee78bf4d249ef8a6cffc892f76.jpg.sub3.png"><br>A. 不让处理机空闲 B．能够处理尽可能多的作业<br>C. 使各类用户都满意 D．不使系统过于复杂<br>答：B<br>15．用户使用操作系统通常有三种手段，它们是终端命令、系统调用命令和 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image029.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/4703bfee78bf4d249ef8a6cffc892f76.jpg.sub4.png"><br>A．计算机高级指令 B．宏命令<br>C. 作业控制语言 D．汇编语言<br>答：C<br>16．在分时操作系统环境下运行的作业通常称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/4703bfee78bf4d249ef8a6cffc892f76.jpg.sub5.png"><br>A．后台作业 B．长作业<br>C. 终端型作业 D．批量型作业<br>答：C<br>\17. 当作业进入完成状态，操作系统 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/4703bfee78bf4d249ef8a6cffc892f76.jpg.sub6.png"><br>A. 将删除该作业并收回其所占资源，同时输出结果<br>B．将该作业的控制块从当前作业队列中剔除，收回其所占资源<br>C. 将收回该作业所占资源并输出结果<br>D．将输出结果并删除内存中的作业<br>答：B<br>\18. 在各种作业调度算法中，若所有作业同时到达，则平均等待时间最短的算法是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image037.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/4703bfee78bf4d249ef8a6cffc892f76.jpg.sub7.png"><br>A．先来先服务 B．优先权调度<br>C. 最高响应比优先 D．短作业优先<br>答：D<br>\19. 既考虑作业等待时间，又考虑作业执行时间的调度算法是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/4703bfee78bf4d249ef8a6cffc892f76.jpg.sub8.png"><br>A. 响应比高者优先 B．短作业优先<br>C. 优先级调度 D．先来先服务<br>答：A<br>20．作业调度程序从处于 状态的队列中选取适当的作业投入运行。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/4703bfee78bf4d249ef8a6cffc892f76.jpg.sub9.png"></p><p>A．运行 B．提交 C完成 D．后备<br>答：D<br>\21. 是指从作业提交给系统到作业完成的时间间隔。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/67e3b2f5adce492783d93677ffb287e1.jpg.sub2.png"><br>A．周转时间 B．响应时间<br>C. 等待时间 D．运行时间<br>答：A<br>\22. 作业从进入后备队列到被调度程序选中的时间间隔称为 . <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image082.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/67e3b2f5adce492783d93677ffb287e1.jpg.sub3.png"><br>A．周转时间 B．响应时间<br>C. 等待时间 D触发时间<br>答：C<br>23.假设下述四个作业同时到达，当使用最高优先数优先调度算法时，作业的平均周转时间<br>为 小时。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image084.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/67e3b2f5adce492783d93677ffb287e1.jpg.sub4.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image086.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/67e3b2f5adce492783d93677ffb287e1.jpg.sub5.png"></p><p>A．4.5 B．10.5 C．4.75 D．10.25<br>答：D<br>24．下述作业调度算法中， 调度算法与作业的估计运行时间有关。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/67e3b2f5adce492783d93677ffb287e1.jpg.sub6.png"><br>A. 先来先服务 B．短作业优先<br>C．优先权 D. 时间片轮转<br>答：B<br>\25. 用户通过终端使用计算机系统控制作业执行的方式称为 方式。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/67e3b2f5adce492783d93677ffb287e1.jpg.sub7.png"><br>A. 自动 B．联机 C. 脱机 D．假脱机<br>答：B<br>\26. 作业生存期共经历四个状态，它们是提交、后备、 和完成。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/67e3b2f5adce492783d93677ffb287e1.jpg.sub8.png"><br>A．就绪 B．执行 C．等待 D．开始<br>答：B<br>27．系统在 ，发生从目态到管态的转换。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image084.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/67e3b2f5adce492783d93677ffb287e1.jpg.sub9.png"><br>A．发出P操作时 B．发出v操作时<br>C．执行系统调用时 D．执行置程序状态字时<br>答：C<br>28．以下叙述中正确的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/67e3b2f5adce492783d93677ffb287e1.jpg.sub10.png"></p><p>A．操作系统的作业管理是一种微观的低级管理。<br>B．作业的提交方式有两种，但对应的作业控制方式只有一种。<br>C．一个作业从进入系统到运行结束，一般要经历的状态是：后备状态、就绪状态和完成状<br>态。<br>D．多道批处理与单道批处理的主要区别在于它必须有作业调度功能和进程调度功能，内存<br>中可以存放多道作业。<br>答：D<br>29．设有4个作业同时到达，每个作业的执行时间均为2小时，它们在一台处理机上按单<br>道方式运行，则平均周转时间为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/351f414af20a4dca9ad60e58f148debf.jpg.sub2.png"><br>A．1小时 B．5小时 C．2.5小时 D．8小时<br>答：B<br>30．现有3个同时到达的作业Jl，J2和J3，它们的执行时间分别是T1、T2和T3，且T1&lt;T2&lt;T3。<br>系统按单道方式运行且采用短作业优先算法，则平均周转时间是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/351f414af20a4dca9ad60e58f148debf.jpg.sub3.png"><br>A. T1十T2十T3 B．(T1十T2+T3)/3<br>C. (3T1十2T2+T3)/3 D． (T1十2T2+3T3)/3<br>答：C<br>31．一作业8：00到达系统，估计运行时间为1小时。若10：00开始执行该作业，其响应<br>比是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/351f414af20a4dca9ad60e58f148debf.jpg.sub4.png"><br>A. 2 B. 1 C. 3 D. 0.5<br>答：C<br>32．设有3个作业，它们的到达时间和运行时间如下表所示，并在一台处理机上按单道方式<br>运行。如按响应比高者优先算法，则作业执行的次序是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image088.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/351f414af20a4dca9ad60e58f148debf.jpg.sub5.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image090.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/351f414af20a4dca9ad60e58f148debf.jpg.sub6.png"></p><p>A. J1,J2,J3 B. J1,J3,J2 C. J2,J3,J1 D. J3,J2,J1<br>答：B<br>33．响应比是指 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/351f414af20a4dca9ad60e58f148debf.jpg.sub7.png"><br>A. 作业计算时间与作业等待时间之比 B. 作业周转时间与作业计算时间之比<br>C. 系统调度时间与作业等待时间之比 D. 系统调度时间与作业计算时间之比<br>答：B<br>35．设有3个作业J1、J2、J3，其运行的时间分别为l、2、3小时；假定这些作业同时到<br>达，并在一台处理机上按单道运行，则平均用转时间最小的执行序列是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image092.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/351f414af20a4dca9ad60e58f148debf.jpg.sub8.png"><br>A. J1,J2,J3 B. J1,J3,J2 C. J2,J1,J3 D. J2,J3,J1</p><p>答：<br>36．当作业进入完成状态，操作系统 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub2.png"><br>A. 将删除该作业并回收其所占资源，同时输出结果<br>B. 将该作业的作业控制块从当前作业队列中删除，回收其所占资源并输出结果<br>C. 将回收该作业所占资源并输出结果<br>D. 将删除内存中的作业并输出结果<br>答：A<br>37．—个作业的完成要经过若干加工步骤，这每个步骤称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image043.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub3.png"><br>A. 作业流 B. 子程序 C. 子进程 D. 作业步<br>答：D<br>38．在批处理方式下，操作员把一批作业组织成 向系统成批输入。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub4.png"><br>A. 作业步 B. 作业流 C. 子程序 D.程序组<br>答：B<br>39．根据进程的紧迫性程度进行进程调度，应采用 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub5.png"><br>A．先来先服务调度算法 B．最高优先级调度算法<br>C. 时间片轮转调度算法 D．分级调度算法<br>答：B<br>40．采用最高优先级调度算法时，对那些具有相同优先级的进程分配CPU的次序是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub6.png"><br>A．时间片轮转 B．运行时间长短<br>C. 先来先服务 D．使用外围设备多少<br>答：C **<br>** <strong>二．填空题</strong><br>1．死锁是指在系统中的多个 无限期地等待永远不会发生的条件。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image035.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub7.png"><br>答：进程<br>2．进程调度负责 的分配工作。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub8.png"><br>答：处理机<br>3．在 调度算法中，按照进程进入就绪队列的先后次序来分配处理机。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub9.png"><br>答：先来先服务<br>4．死锁产生的必要条件有四个，即 ① 、 ② 、 ③ 、 ④ 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub10.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub11.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub12.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub13.png"><br>答：①互斥条件 ②不剥夺条件 ③请求和保持条件 ④环路等待条件<br>5．解除死锁常用的方法有两种， ① 是从其他进程那里剥夺足够数量的资源给 ② 进程<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image041.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub14.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub15.png"><br>以解除死锁状态。<br>答：①资源剥夺法 ②死锁<br>6．银行家算法中，当一个进程提出的资源请求将导致系统从 ① 进入 ② 时，系统就拒 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image082.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub16.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/b094caea1a624bb4890aaee774058278.jpg.sub17.png"></p><p>绝它的资源请求。<br>答：①安全状态 ②不安全状态<br>7．如果要求所有进程一次性申请它所需要的全部资源，若系统有足够的资源分配给进程，<br>便一次把所有的资源分配给该进程。但在分配时只要有一种资源要求不能满足，则资源全不<br>分配，进程等待，这种死锁预防方法破坏了死锁产生必要条件中的 条件。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image033.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub2.png"><br>答：请求和保持<br>8．对待死锁，一般应考虑死锁的预防、避免、检测和解除四个问题。典型的银行家算法是<br>属于 ① ，破坏环路等待条件是属于 ② ，而剥夺资源是 ③ 的基本方法。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub3.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub4.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub5.png"><br>答：①死锁的避免 ②死锁的预防 ③死锁的解除<br>9．在一个具有分时兼批处理的计算机操作系统中，如果有终端作业和批处理作业混合同时<br>执行， 作业应优先占用处理器。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub6.png"><br>答：终端型作业<br>10．作业调度又称 ① ，其主要功能是 ② ，并为作业做好运行前的准备工作和作 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub7.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub8.png"><br>业完成后的善后处理工作。<br>答：①高级调度 ②按照某种原则从后备作业队列中选取作业<br>11．确定作业调度算法时应注意系统资源的均衡使用，使 ① 作业和 ② 作业搭配运行。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub9.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image035.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub10.png"><br>答：①I/O ②CPU繁忙<br>12．设有一组作业，它们的提交时间及运行时间如下： <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image094.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub11.png"></p><p>在单道方式下，采用短作业优先调度算法，作业的执行顺序是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub12.png"><br>答：1、4、3、2<br>13． 调度是处理机的高级调度， 调度是处理机的低级调度。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image041.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub13.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub14.png"><br>答；作业、进程<br>14．如果系统中所有作业是同时到达的，则使作业平均周转时间最短的作业调度算法<br>是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub15.png"><br>答：短作业优先（SJF）调度算法<br>15．一个理想的作业调度算法应该是既能 ，又能使进入系统的作业 得到计算 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub16.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub17.png"><br>结果。<br>答：提高系统效率、及时<br>16．响应比高者优先算法综合考虑了作业的 和 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub18.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ce3420351c21489b9b9887475c45b912.jpg.sub19.png"></p><p>答：等待时间、计算时间<br>17．时间片是指允许进程一次占用处理器的 。时间片轮转调度算法常用于 操作<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3a6392cf0ad14fa2be45b37606deee74.jpg.sub2.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3a6392cf0ad14fa2be45b37606deee74.jpg.sub3.png"><br>系统中。<br>答：最长时间、分时<br>18．进程的切换是由 引起的，总是发生在 发生之后。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3a6392cf0ad14fa2be45b37606deee74.jpg.sub4.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image029.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3a6392cf0ad14fa2be45b37606deee74.jpg.sub5.png"><br>答：进程状态的变化、中断事件 **<br>** <strong>三．简答题</strong> **<br>1<strong>**．在某一时刻，系统中既无执行态进程又无就绪态进程，是否可能？若可能，在什么情况<br>下会产生？</strong><br>答：有可能。在系统死锁的状态下，进程组处于占有等待资源的状态，应当既不属于执<br>行态，也不属于就绪态。 **<br>2<strong><strong>．关于处理机调度，试问：</strong></strong>(1)<strong><strong>什么是处理机三级调度</strong></strong>?(2)<strong><strong>处理机三级调度分别在什么情况<br>下发生</strong></strong>?(3)<strong><strong>各级调度分别完成什么工作</strong></strong>?**<br>答：(1)处理机三级调度是：高级调度(作业调度)、中级调度(交换调度)和低级调度(进程<br>调度)，它们构成了操作系统内的多级调度，不同类型的操作系统不一定都有这三种调度。<br>(2)高级调度是在需要从后备作业队列调度作业进入内存运行时发生；低级调度是在处理机<br>空闲时需要调度一个就绪进程投入运行时发生；中级调度是在内存紧张不能满足进程运行需<br>要时发生。<br>(3)高级调度决定把外存中处于后备队列的哪些作业调入内存，并为它们创建进程和分配必<br>要的资源，然后将新创建的进程接入就绪队列准备执行。低级调度则决定就绪队列中的哪个<br>进程将获得处理机，并将处理机分配给该进程使用。中级调度是在内存资源紧张的情况下暂<br>时将不运行的进程调至外存，待内存空闲时再将外存上具有运行条件的就绪进程重新调入内<br>存。 **<br>** <strong>四．应用题</strong> **<br>1.** <strong>假定在单CPU条件下有下列要执行的作业：</strong> <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image096.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3a6392cf0ad14fa2be45b37606deee74.jpg.sub6.png"><br>作业 运行时间 优先级<br>1 10 2<br>2 4 3<br>3 3 0 **<br>** <strong>作业到来的时间是按作业编号顺序进行的(即后面作业依次比前一个作业迟到一个时<br>间单位)。<br>(1)用一个执行时间图描述在采用非抢占式优先级算法时执行这些作业的情况。<br>(2)对于上述算法，各个作业的周转时间是多少?平均周转时间是多少?</strong></p><p><strong>(3)**</strong>对于上述算法，各个作业的带权周转时间是多少?平均带权周转时间是多少?**<br>解： (1)非抢占式优先级算法作业的执行情况如下： <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image098.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/cc17d79c6aed4ee9a4a90af3bd37f1e7.jpg.sub2.png"><br>作业 到达时间 运行时间 完成时间 周转时间 带权周转时间<br>1 0 10 10 10 1.0<br>2 1 4 17 16 4.0<br>3 2 3 13 11 3.7<br>12.3<br>平均周转时间<br>2.9<br>平均带权周转时间 **<br>2<strong>**．设有4道作业，它们的提交时间及执行时间如下：</strong> <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image100.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/cc17d79c6aed4ee9a4a90af3bd37f1e7.jpg.sub3.png">**<br>** <strong>试计算在单道程序环境下，采用先来先服务调度算法和最短作业优先调度算法时的平均周<br>转时间和平均带权周转时间，并指出它们的调度顺序。(时间单位：小时，以十进制进行计<br>算。)</strong><br>解：若采用先来先服务调度算法，则其调度顺序为1、2、3、4。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image102.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/cc17d79c6aed4ee9a4a90af3bd37f1e7.jpg.sub4.png"></p><p>平均周转时间 T=(2.0十2.8十3.1十3.3)/4＝2.8<br>平均带权周转时间W=(1十2.8十6.2十11)／4=5.25<br>若采用短作业优先调度算法，则其调度顺序为1、4、3、2 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image104.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/cc17d79c6aed4ee9a4a90af3bd37f1e7.jpg.sub5.png">**<br>**<br>平均周转时间为 T=(2.0+1.8+2.4+3.6)/4=2.45<br>平均带权周转时间 W=(1十6十4.8十3.6)/4=3.85 **<br>3<strong>**．假设有四个作业，它们的提交、运行时间如下表所示。若采用高响应比优先调度算法，<br>试问平均周转时间和平均带权周转时间为多少？ (时间单位小时，以十进制进行计算。)</strong></p><p><img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image106.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/618316c31dfc460397f296903f613389.jpg.sub2.png">解：根据响应比的定义每次调度前计算出各作业的响应比，得到四个作业的调度次序为：作<br>业1、作业3、作业2、作业4。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image108.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/618316c31dfc460397f296903f613389.jpg.sub3.png"></p><p>平均周转时间为 T=(2.0十2.3十1.6十2.O)/4=1.975<br>平均带权周转时间W=(1十4.6十16十5)/4=6.65 **<br>4<strong><strong>．某系统中有10台打印机，有三个进程</strong></strong>P<strong><strong>，</strong></strong>P<strong><strong>，</strong></strong>P<strong><strong>分别需要8台，7台和4台。若</strong></strong>P<strong><strong>，</strong></strong><br>1231<strong>**<br>P**</strong>，<strong><strong>P</strong></strong>已申请到4台，2台和2台。试问：按银行家算法能安全分配吗？请说明分配过程。** **<br>23**<br>答：系统能为进程P分配二台打印机。因为尽管此时10台打印机已分配给进程P4台，**<br>31**<br>P2台和P4台，全部分配完，但P已分配到所需要的全部4台打印机，它不会对打印机再**<br>233**<br>提出申请，所以它能顺利运行下去，能释放占用的4台打印机，使进程P，P均可能获得**<br>12**<br>乘余的要求4台和5台，按银行家算法是安全的。 **<br>5<strong><strong>．在生产者—消费者问题中，如果对调生产者进程中的两个</strong></strong>P<strong><strong>操作和两个</strong></strong>V<strong><strong>操作，则可能<br>发生什么情况</strong></strong>?**<br>解：如果对调生产者进程中的两个P操作和两个v操作，则生产者—消费者问题的同<br>步描述为：<br>int full=0;<br>int empty =n;<br>int mutex=1;<br>main ( )<br>{<br>cobegin<br>producer ( );<br>consumer ( );<br>coend<br>}</p><p>producer ( )<br>{<br>while (生产未完成)<br>{<br>生产一个产品；<br>p(mutex);<br>p(empty);<br>送一个产品到有界缓冲区；<br>v(full);<br>v(mutex);<br>}<br>}<br>consumer ( )<br>{<br>while(还要继续消费)<br>{<br>p(full);<br>p(mutex);<br>从有界缓冲区中取产品；<br>v(mutex);<br>v(empty);<br>消费一个产品；<br>}<br>}<br>由于V操作是释放资源，因此对调V操作的次序无关紧要。而对调P操作的次序则可能<br>导致死锁。这是因为对调P操作后，有可能出现这样一种特殊情况：在某一时刻缓冲区中己<br>装满了产品且缓冲区中无进程工作(这时信号量full的值为n，信号量empty的值为0，信<br>号量mutex的值为1)，若系统此时调度生产者进程运行，生产者进程又生产了一个产品，<br>它执行P(mutex)并顺利进入临界区(这时mutex值为0)，随后它执行p(empty)时因没有空<br>闲缓冲单元而受阻等待，等待消费者进程进入缓冲区取走产品以释放出缓冲单元；消费者进<br>程执行p(full)后再执行p(mutex)时，因缓冲区被生产者进程占据而无法进入。这样就形成<br>了生产者进程在占有临界资源的情况下，等待消费者进程取走产品，而消费者进程又无法进<br>入临界区取走产品的僵局，此时两进程陷入死锁。</p><p><strong>6**</strong>．在银行家算法中，若出现下述资源分配情况：** <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image110.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/540dfcf1f3c9477cbd162bec4f4e255c.jpg.sub2.png"><br>**<br>** <strong>试问：(1)该状态是否安全?<br>(2)如果进程P2提出请求Request(1，2，2，2)后，系统能否将资源分配给它?</strong> **<br>2**<br>解：(1)利用银行家算法对此时刻的资源分配情况进行分析，可得此时刻的安全性分析<br>情况： <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image112.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/540dfcf1f3c9477cbd162bec4f4e255c.jpg.sub3.png"></p><p>从上述分析中可以看出，此时存在一个安全序列{P0，P3，P4，P1，P2}，故该状态是<br>安全的。<br>(2)P2提出请求Request (1，2，2，2)，按银行家算法进行检查：<br>2<br>Request(1，2，2，2)≤Need2(2, 3, 5, 6)<br>2<br>Request(1，2，2，2) ≤Available(1, 6, 2, 2)<br>2<br>试分配并修改相应的数据结构，资源分配情况如下： <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image114.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/540dfcf1f3c9477cbd162bec4f4e255c.jpg.sub4.png"></p><p>再利用安全性算法检查系统是否安全，可用资源Available (0，4，0，0)己不能满足任何<br>进程的需要，故系统进入不安全状态，此时系统不能将资源分配给P2。 **<br>** <strong>第四章 存储器管理</strong> **<br>** <strong>一．选择题</strong><br>1．在存储管理中， 可与覆盖技术配合。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/540dfcf1f3c9477cbd162bec4f4e255c.jpg.sub5.png"><br>A．页式管理 B．段式管理</p><p>C．段页式管理 D．可变分区管理<br>答：D<br>2．采用覆盖与交换技术的目的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5b9f83622abb43bc95b84c3294179e95.jpg.sub2.png"><br>A. 节省主存空间 B. 物理上扩充主存容量<br>C. 提高CPU效率 D. 实现主存共享<br>答；A<br>3．动态重定位技术依赖于 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5b9f83622abb43bc95b84c3294179e95.jpg.sub3.png"><br>A. 重定位装入程序 B. 重定位寄存器<br>C. 地址机构 D. 目标程序<br>答：B<br>4．虚拟存储器的最大容量 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5b9f83622abb43bc95b84c3294179e95.jpg.sub4.png"><br>A．为内外存容量之和 B．由计算机的地址结构决定<br>C．是任意的 D．由作业肋地址空间决定<br>答：B<br>5．在虚拟存储系统中，若进程在内存中占3块(开始时为空)，采用先进先出页面淘汰算法，<br>当执行访问页号序列为1、2、3、4、1、2、5、1、2、3、4、5、6时，将产生 次缺页<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image037.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5b9f83622abb43bc95b84c3294179e95.jpg.sub5.png"><br>中断。<br>A．7 B．8 C．9 D．10<br>答：D<br>6．设内存的分配情况如下图所示。若要申请一块40K字节的内存空间，若采用最佳适应算<br>法，则所得到的分区首址为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image033.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5b9f83622abb43bc95b84c3294179e95.jpg.sub6.png"><br>A．100K B．190K C．330K D．410K <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image116.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5b9f83622abb43bc95b84c3294179e95.jpg.sub7.png"></p><p>答：C<br>7．很好地解决了“零头”问题的存储管理方法是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image118.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5b9f83622abb43bc95b84c3294179e95.jpg.sub8.png"><br>A．页式存储管理 B．段式存储管理<br>C．多重分区管理 D．可变式分区管理<br>答：A<br>8．系统“抖动”现象的发生是由 引起的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5b9f83622abb43bc95b84c3294179e95.jpg.sub9.png"><br>A．置换算法选择不当 B．交换的信息量过大<br>C．内存容量不足 D．请求页式管理方案<br>答：A<br>9．在可变式分区存储管理中的拼接技术可以 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5b9f83622abb43bc95b84c3294179e95.jpg.sub10.png"></p><p>A．集中空闲区 B．增加主存容量<br>C．缩短访问周期 D．加速地址转换<br>答：A<br>10．分区管理中采用“最佳适应”分配算法时，宜把空闲区按 次序登记在空闲区表中。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub2.png"><br>A．长度递增 B. 长度递减<br>C．地址递增 D. 地址递减<br>答：A<br>11．在固定分区分配中，每个分区的大小是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub3.png"><br>A. 相同 B. 随作业长度变化<br>C. 可以不同但预先固定 D. 可以不同但根据作业长度固定<br>答：C<br>12．实现虚拟存储器的目的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub4.png"><br>A．实现存储保护 B．实现程序浮动<br>C．扩充辅存容量 D．扩充主存容量<br>答：D<br>13．采用段式存储管理的系统中，若地址用24位表示，其中8位表示段号，则允许每段的<br>最大长度是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image053.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub5.png"><br>2416832<br>A．2 B．2 C．2 D．2<br>答：B<br>14．作业在执行中发生了缺页中断，经操作系统处理后，应让其执行 指令。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image059.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub6.png"><br>A．被中断的前一条 B．被中断的<br>C．被中断的后一条 D．启动时的第一条<br>答：B<br>15．把作业地址空间中使用的逻辑地址变成内存中物理地址的过程称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub7.png"><br>A．重定位 B．物理化<br>C．逻辑化 D．加载<br>答：A<br>16．在分页系统环境下，程序员编制的程序，其地址空间是连续的，分页是由 完成的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub8.png"><br>A．程序员 B．编译地址<br>C．用户 D．系统<br>答：D<br>17．在请求分页存储管理中，若采用FIFO页面淘汰算法，则当分配的页面数增加时，缺页<br>中断的次数 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub9.png"><br>A．减少 B．增加<br>C．无影响 D．可能增加也可能减少<br>答：D<br>18．在段页式存储管理系统中，内存等分成 ，程序按逻辑模块划分成若干 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image041.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub10.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub11.png"><br>A．块，页 B．块，段<br>C．分区，段 D．段，页<br>答：B<br>19．虚拟存储管理系统的基础是程序的 理论。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image057.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/ecb099d3a11842b68fe0547a5e62f910.jpg.sub12.png"><br>A．局部性 B．全局性<br>C．动态性 D. 虚拟性<br>答：A</p><p>20．下述 页面淘汰算法会产生Belady现象。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/806d01ba34794dba92ba37543644c88e.jpg.sub2.png"><br>A．先进先出 B．最近最少使用<br>C．最不经常使用 D．最佳<br>答：A<br>21．某段表的内容如下： <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image120.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/806d01ba34794dba92ba37543644c88e.jpg.sub3.png"></p><p>一逻辑地址为(2154)，它对应的物理地址为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/806d01ba34794dba92ba37543644c88e.jpg.sub4.png"><br>A．120K十2 B．480K十154<br>C．30K十154 D．2十480K<br>答：B<br>22．在一个页式存储管理系统中，页表内容如下： <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image122.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/806d01ba34794dba92ba37543644c88e.jpg.sub5.png"></p><p>若页的大小为4K，则地址转换机构将逻辑地址0转换成的物理地址为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/806d01ba34794dba92ba37543644c88e.jpg.sub6.png"><br>A．8192 B．4096 C．2048 D．1024<br>答：A<br>23．如果一个程序为多个进程所共享，那么该程序的代码在执行的过程中不能被修改，即程<br>序应该是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/806d01ba34794dba92ba37543644c88e.jpg.sub7.png"><br>A. 可执行码 B. 可重入码<br>C. 可改变码 D. 可再现码<br>答：B<br>24．在分时系统中，可将作业不需要或暂时不需要的部分移到辅存，让出主存空间以调入其<br>他所需数据，称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/806d01ba34794dba92ba37543644c88e.jpg.sub8.png"><br>A．覆盖技术 B．对换技术<br>C．虚拟技术 D．物理扩充<br>答：B<br>25．支持多道程序设计，算法简单，但存储碎片多的存储管理方式是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image124.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/806d01ba34794dba92ba37543644c88e.jpg.sub9.png"><br>A. 段式 B. 页式<br>C. 固定分区 D. 段页式<br>答：C<br>26．碎片是指 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/806d01ba34794dba92ba37543644c88e.jpg.sub10.png"><br>A. 存储分配完后所剩的空闲区<br>B. 没有被使用的存储区</p><p>C. 不能被使用的存储区<br>D. 未被使用，而又暂时不能使用的空闲区<br>答：D<br>27．碎片现象的存在使得 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image033.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/0513bd9c156948fc966990223426a1ae.jpg.sub2.png"><br>A．主存空间利用率降低 B．主存空间利用率提高<br>C．主存空间利用率得以改善 D．主存空间利用率不受影响<br>答：A<br>28．可变分区管理方式按作业需求量分配主存分区，所以 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/0513bd9c156948fc966990223426a1ae.jpg.sub3.png"><br>A．分区的长度是固定的<br>B．分区的个数是确定的<br>C．分区的长度和个数都是确定的<br>D．分区的长度不是预先固定的、分区的个数是不确定的<br>答：D<br>29．在可变分区方式管理下收回主存空间时，若已判定“空闲区表第j栏开始地址＝归还的<br>分区开始地址+长度”，则表示 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image126.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/0513bd9c156948fc966990223426a1ae.jpg.sub4.png"><br>A．归还区有上邻空闲区 B．归还区有下邻空闲区间<br>C. 归还区有上、下邻空闲区 D．归还区无相邻空闲区间<br>答：B<br>30．当可变分区方式管理主存空间回收时，要检查有无相邻的空闲区。若归还区开始地址为<br>S，长度为L，下列表示归还区有上邻空闲区的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/0513bd9c156948fc966990223426a1ae.jpg.sub5.png"><br>A. 第j栏开始地址＝S十L<br>B．第j栏开始地址+长度＝S<br>C. 第j栏开始地址+长度＝S且第k栏开始地址＝S+L<br>D．以上都不对<br>答：B<br>31．在可变分区存储管理中，回收一个分区时，反而使空闲区的个数减1的情况是该分<br>区 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/0513bd9c156948fc966990223426a1ae.jpg.sub6.png"><br>A. 只有上邻 B. 只有下邻<br>C. 既有上邻又有下邻 D. 无上、下邻<br>答：B<br>32．操作系统对已在主存储器中的作业根据需要改变存放位置，称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image128.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/0513bd9c156948fc966990223426a1ae.jpg.sub7.png"><br>A. 覆盖技术 B. 交换技术<br>C. 移动技术 D. 虚拟技术<br>答：C<br>33．在可变分区方式管理主存时、采用移动技术能提高主存的利用率，下列不能移动作业的<br>情况是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image057.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/0513bd9c156948fc966990223426a1ae.jpg.sub8.png"><br>A．正在取主存中的数据准备计算 B．正在计算一个表达式的值<br>C．正在把计算结果写入主存 D．正在等待外围设备传输消息<br>答：C<br>34．最容易形成很多小碎片的可变分区算法是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/0513bd9c156948fc966990223426a1ae.jpg.sub9.png"><br>A．最先适应算法 B. 最优适应算法<br>C. 最坏适应算法 D. 以上都不是<br>答：B<br>35．段式存储管理中分段是用户决定的，因此 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/0513bd9c156948fc966990223426a1ae.jpg.sub10.png"></p><p>A．段内的地址和段间的地址都是连续的<br>B．段内的地址是连续的，段间的地址是不连续的<br>C．段内的地址是不连续的，段间的地址是连续的<br>D．段内的地址和段间的地址都是不连续的<br>答：B<br>36．段页式存储管理汲取了页式存储管理和段式存储管理的长处，其实现原理结合了页式和<br>段式管理的基本思想，即用 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub2.png"><br>A．分段方法来分配和管理物理存储空间，用分页方法来管理逻辑地址空间<br>B．分段方法来分配和管理逻辑地址空间，用分页方法来管理物理存储空间<br>C．分段方法来分配和管理主存空间，用分页方法来管理辅存空间<br>D．分段方法来分配和管理辅存空间，用分页方法来管理主存空间<br>答：B<br>37．下列存储管理方案中，不采用动态重定位的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub3.png"><br>A．页式管理 B．可变分区<br>C．固定分区 D．段式管理<br>答：C<br>38．采用虚拟存储器的前提是程序执行时某些部分的互斥性和 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub4.png"><br>A．顺序性 B. 局部性<br>C. 并发性 D．并行性<br>答：B<br>39．下列存储管理方案中，不要求将作业全部调入并且也不要求连续存储空间的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image035.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub5.png"><br>A．固定分区 B．可变分区<br>C．页式存储管理 D．页式虚拟存储管理<br>答：D<br>40．下列不适合多道程序系统的存储管理是 存储管理。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub6.png"><br>A. 单用户连续 B. 固定分区<br>C. 可变分区 D. 段页式<br>答：A<br>41．与虚拟存储技术不能配合使用的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub7.png"><br>A. 分区存储管理 B. 页式存储管理<br>C. 段式存储管理 D. 段页式存储管理<br>答：A<br>42．不可能产生系统抖动现象的存储管理是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub8.png"><br>A. 固定分区管理 B. 分页式虚拟存储管理<br>C. 段式虚拟存储管理 D. 以上都不对<br>答：A **<br>** <strong>二．填空题</strong><br>1．主存的空间划分为 和用户占用区，其中用户区用来存放用户的 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub9.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub10.png"><br>答：系统占用区、数据和程序<br>2．操作系统的存储管理负责管理 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image078.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub11.png"><br>答：计算机系统的主存储器<br>3．区分不同的存储管理方式，主要是指采用的主存空间的 的不同。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a80441ef0ab344599816259a31ba16d6.jpg.sub12.png"><br>答：分配策略</p><p>4．将程序中的逻辑地址转换成绝对地址，这种地址转换工作称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub2.png"><br>答：重定位<br>5．主存空间的共享是为了 ，主存空间的存储保护是为了 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub3.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub4.png"><br>答：提高主存空间的利用率、防止各存储区域中的程序相互干扰<br>6．主存空间的共享包含两方面含义：共享 和共享 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub5.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image043.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub6.png"><br>答：主存储器，主存储器的某些区域<br>7．由绝对地址对应的主存空间称 ，由逻辑地址对应的主存空间称 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image088.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub7.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub8.png"><br>答：物理地址空间，逻辑地址空间<br>8．重定位分为两种： 和 。前者是在作业装入时进行的，后者是在作业 过<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub9.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub10.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub11.png"><br>程中进行的。<br>答：静态重定位，动态重定位，执行<br>9．能方便进行作业在主存中移动的重定位是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub12.png"><br>答：动态重定位<br>10．固定分区采用 重定位方式进行地址转换，可变分区采用 重定位方式进行地<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub13.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub14.png"><br>址转换。<br>答：静态，动态<br>11．使用最先适应分配算法，可以把空闲区按地址 的顺序登记在空闲区表中，这样<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image043.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub15.png"><br>做有利于大作业的装入。<br>答：从小到大<br>12． 最优适应分配算法可按作业要求从所有空闲区中挑选一个能满足作业要求的 空<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub16.png"><br>闲区，以保证不去分割更大的空闲区。<br>答：最小<br>13．采用最坏适应分配算法，空闲区表中的第一个登记项所对应的空闲区总是 的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub17.png"><br>答：最大<br>14．移动技术可集中分散的 ，提高主存空间的利用率。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub18.png"><br>答：空闲区、利用率<br>15．某个作业在执行过程中正在等待 ，则该作业不能移动。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub19.png"><br>答：外围设备传输信息<br>16．在可变分区方式下采用移动技术可以把主存中的“ ”汇集成一个大的空闲区。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image061.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub20.png"><br>答：碎片<br>17．我们把操作系统所占用的系统资源和所需的处理器时间称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image118.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub21.png"><br>答：系统开销<br>18．页式存储管理中的页表指出了 与 之间的对应关系。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub22.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image043.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub23.png"><br>答：页、块<br>19．页式存储管理按给定的逻辑地址读写时，要访问两次主存：第一次 ，第二<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image131.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub24.png"><br>次 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub25.png"><br>答：按页号读出页表中所对应的块号、按计算出来的绝对地址进行读写<br>20．段式存储管理以段为单位进行存储空间的管理， 的地址是连续的， 的地<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image043.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub26.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub27.png"><br>址是不连续的。<br>答：段内、段与段之间<br>21．分页是由 自动完成的，而分段是由 决定的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image037.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub28.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image057.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub29.png"><br>答：系统、用户<br>22．虚拟存储器实际上是为 而采用的一种设计技巧，并非真正的存储器。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image047.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/bdce8cd6e1e14160a83c27d602cedfa1.jpg.sub30.png"><br>答：扩大主存容量</p><p>23．虚拟存储器不能无限大，它的容量由计算机的 和 决定，而与实际的主存<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/61664f36476940758402e54f093ea695.jpg.sub2.png">)<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/61664f36476940758402e54f093ea695.jpg.sub3.png"><br>容量无关。<br>答：地址结构、辅存的容量<br>24．分页式虚拟存储管理的页表增加标志位，指出对应页是否已经装入 ，若未装入，<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/61664f36476940758402e54f093ea695.jpg.sub4.png"><br>则产生 中断。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/61664f36476940758402e54f093ea695.jpg.sub5.png"><br>答：主存、缺页<br>25．一个好的页面调度算法应该避免和减少 现象。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/61664f36476940758402e54f093ea695.jpg.sub6.png"><br>答：抖动<br>26．常用的页面调度算法中，总是淘汰最先进人主存的那一页的，称为 调度算法；最<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image033.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/61664f36476940758402e54f093ea695.jpg.sub7.png"><br>近最少使用调度算法选择最近一段时间里 的页调出。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/61664f36476940758402e54f093ea695.jpg.sub8.png"><br>答：先进先出(或FIF0)、最久没有被使用过<br>27．最近最少使用调度算法是基于程序执行的 理论，即程序一旦访问到某些位置的<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/61664f36476940758402e54f093ea695.jpg.sub9.png"><br>数据或指令，可能在一段时间里经常会访问它们。<br>答：局部性 **<br>** <strong>三．简答题</strong> **<br>1<strong><strong>．操作系统中存储器管理的主要功能是什么</strong></strong>?<strong>**什么叫虚拟存储器，并举例说明操作系统是<br>如何实现虚拟内存的？</strong><br>答：存储器管理的主要功能是：内存分配，地址映射，内存保护，内存扩充。<br>虚拟存储器是用户能作为可编址内存对待的存储空间，在这种计算机系统中虚地址被映象成<br>实地址。简单地说，虚拟存储器是由操作系统提供的一个假想的特大存储器，它通过把主、<br>辅存统一起来管理，结用户造成一种仿佛系统内有巨大主存供用户使用的假象。例如页式虚<br>存管理，一道作业被划分成若干页，其中较活跃的几页放在内存，而其余不活跃的页被放在<br>辅存，当需要访问辅存内的页时，就可通过页面调度将其调人内存运行；但用户感觉不到这<br>种变化，他会以为作业的所有部分都存在于主存。这样可以让更多的作业进入主存，提高系<br>统的效率。 **<br>2<strong>**．存储管理的基本任务是什么？</strong><br>答：(1)管理内存空间；<br>(2)进行虚拟地址（或：逻辑地址）到物理地址的转换；<br>(3)实现内存的逻辑扩充；<br>(4)完成内存信息的共享和保护。 **<br>3<strong>**．简述固定分区和可变分区在管理方式上的区别。</strong><br>答：固定分区的管理方式：分区的个数、大小均固；一个分区只放一个作业。可变分区<br>的管理方式：分区大小和个数依作业情况而定；作业进入主存时才建分区。 **<br>4<strong>**．试述缺页中断与一般中断的主要区别。</strong><br>答：缺页中断作为中断，同样需要经历保护CPU现场、分析中断原因、转缺页中断处<br>理程序进行处理、恢复CPU现场等步骤。但缺页中断又是一种特殊的中断，它与一般中断<br>的主要区别是：<br>（1）在指令执行期间产生和处理中断信号。通常，CPU都是在一条指令执行完后去检查是<br>否有中断请求到达。若有便去响应中断；否则继续执行下一条指令。而缺页中断是在指令执<br>行期间，发现所要访问的指令或数据不在内存时产生和处理的。<br>(2)一条指令在执行期间可能产生多次缺页中断。例如，对于一条读取数据的多字节指令，<br>指令本身跨越两个页面，假定指令后一部分所在页面和数据所在页面均不在内存，则该指令</p><p>的执行至少产生两次缺页中断。 **<br>5<strong><strong>．试</strong></strong>述分页系统和分段系统的主要区别。**<br>答：分页和分段有许多相似之处，比如两者都不要求作业连续存放。但在概念上两者<br>完全不同，主要表现在以下几个方面：<br>(1)页是信息的物理单位，分页是为了实现非连续分配，以便解决内存碎片问题，或者说分<br>页是由于系统管理的需要。段是信息的逻辑单位，它含有一组意义相对完整的信息，分段的<br>目的是为了更好地实现共享，满足用户的需要。<br>(2)页的大小固定且由系统确定，将逻辑地址划分为页号和页内地址是由机器硬件实现的，<br>而段的长度却不固定，决定于用户所编写的程序，通常由编译程序在对源程序进行编译时根<br>据信息的性质来划分。<br>(3)分页的作业地址空间是一维的；分段的地址空间是二维的。 **<br>6<strong><strong>．假定占有</strong></strong>m<strong><strong>块</strong></strong>(<strong><strong>初始为空</strong></strong>)<strong><strong>的进程有一个页访问串，这个页访问串的长度为</strong></strong>p,<strong><strong>其中涉及到</strong></strong><br>n<strong>**个不同的页号。对于任何页面替换算法，求出；</strong> **<br>(1)<strong><strong>缺页中断次数的下界是多少</strong></strong>?<br>(2)<strong><strong>缺页中断次数的上界是多少</strong></strong>?**<br>答：(1)缺页中断次数的下界是m<br>(2)缺页中断次数的上界是p。 **<br>7<strong>**．什么叫地址重定位？动态地址重定位的特点是什么？</strong><br>答：重定位是指作业装入与其逻辑地址空间不同的物理空间所引起的地址变换过程。<br>动态地址重定位的特点是：(1)由硬件实现；(2)在程序运行过程中进行地址变换。 **<br>8<strong><strong>．</strong></strong>在内存管理中“内零头”和“外零头”各指的是什么<strong><strong>?</strong></strong>在固定式分区分配、可变式分区<br>分配、页式虚拟存储系统、段式虚拟系统中，各会存在何种零头？为什么<strong>**?</strong><br>答：内零头(又称内部碎片)：若存储单元长度为n，该块存储的作业长度为m，则剩下<br>的长度为(n—m)的空间称为该单元的内部碎片；若存储单元长度为n，在该系统所采用的调<br>度算法下较长时间内无法选出一道长度不超过该块的作业，则称该块为外零头(外部碎片)。<br>在固定式分区分配中两种零头均会存在，因为空间划分是固定的，无论作业长短，存储<br>单元均不会随之变化，若作业短而存储块长则产生内零头，若作业长而存储块短则产生外零<br>头。<br>在可变式分区分配中只有外零头而无内零头，因为空间划分是依作业长度进行的，要多<br>少给多少，但剩下的的部分太短而无法再分则成为外零头。<br>页式虚存中会存在内零头而无外零头，因存储空间与作业均分为等长单元，所以不存在<br>无法分配的单元，但作业长度并不刚好为页面大小的整数倍，因此在最后一页会有剩余空间，<br>即为内零头。<br>段式虚存中会存在外零头而无内零头，因段式的空间划分类似于可变分区分配，根据<br>段长分配，要多少给多少，但会剩余小空间无法分配，则为外零头。 **<br>** <strong>四．应用题</strong> **<br>1<strong><strong>．在一个请求分页存储管理系统中，一个作业的页面走向为</strong></strong>4<strong><strong>、</strong></strong>3<strong><strong>、</strong></strong>2<strong><strong>、</strong></strong>1<strong><strong>、</strong></strong>4<strong><strong>、</strong></strong>3<strong><strong>、</strong></strong>5<strong><strong>、</strong></strong>4<strong><strong>、</strong></strong>3<strong><strong>、</strong></strong><br>2<strong><strong>、</strong></strong>1<strong><strong>、</strong></strong>5<strong><strong>，当分配给该作业的物理块数分别为</strong></strong>3<strong><strong>、</strong></strong>4<strong><strong>时，试计算采用下述页面淘汰算法时的<br>缺页次数</strong></strong>(<strong><strong>假设开始执行时主存中没有页面</strong></strong>)<strong>**，并比较所得结果。</strong> **<br>(1)<strong><strong>最佳置换法</strong></strong>(OPT)<br>(2)<strong><strong>先进先出法</strong></strong>(FIFO)**<br>解：(1)根据所给页面走向，使用最佳页面置换算法时，页面置换情况如下：(略)</p><p>物理块为3时，缺页次数为7；<br>物理块为4时，缺页次数为6。<br>由上述结果可以看出，增加分配给作业的内存块数可以降低缺页次数。<br>(2)根据所给页面走向，使用先进先出页面置换算法时，页面置换情况如下：（略）<br>物理块为3时，缺页次数为9；<br>物理块为4时，缺页次数为10。<br>由上述结果可以看出，对先进先出算法而言，增加分配给作业的内存块数反而出现缺页次数<br>增加的异常现象。 **<br>2<strong><strong>．某采用页式存储管理的系统，接收了一个共</strong></strong>7<strong><strong>页的作业，作业执行时依次访问的页为：</strong></strong><br>1<strong><strong>、</strong></strong>2<strong><strong>、</strong></strong>3<strong><strong>、</strong></strong>4<strong><strong>、</strong></strong>2<strong><strong>、</strong></strong>1<strong><strong>、</strong></strong>5<strong><strong>、</strong></strong>6<strong><strong>、</strong></strong>2<strong><strong>、</strong></strong>1<strong><strong>、</strong></strong>2<strong><strong>、</strong></strong>3<strong><strong>、</strong></strong>7<strong><strong>。当内存块数量为</strong></strong>4<strong><strong>时，请分别用先进先出</strong></strong>(FIFO)<strong>**<br>** <strong>调度算法和最近最少使用</strong></strong>(LRU)<strong><strong>调度算法，计算作业执行过程中会产生多少次缺页中断</strong></strong>?<strong><strong>写<br>出依次产生缺页中断后应淘汰的页。</strong></strong>(<strong><strong>所有内存开始时都是空的，凡第一次用到的页面都产<br>生一次缺页中断。要求写出计算过程</strong></strong>)**<br>答：采用先进先出(FIFO)调度算法，共产生10次缺页中断，依次淘汰的页是1、2、3、<br>4、5、6，（页面调度过程略）；<br>采用最近最少使用(LRU)调度算法，共产生8次缺页中断，依次淘汰的页是3、4、5、6，<br>（页面调度过程略）。 **<br>3<strong>**．在一个采用页式虚拟存储管理的系统中，有一用户作业，它依次要访问的字地址序列是：<br>115，228，120，88，446，102，321，432，260，167，若该作业的第0页已经装入主存，<br>现分配给该作业的主存共300字，页的大小为100字，请回答下列问题：按（1）FIFO调度<br>算法（2）LRU调度算法将产生多少次缺页中断，缺页中断率为多少，依次淘汰的页号是什<br>么。</strong><br>答：（1）按FIFO调度算法将产生5次缺页中断；<br>依次淘汰的页号为：0，1，2；<br>缺页中断率为：5/10=50% 。<br>（2）按LRU调度算法将产生6次缺页中断；<br>依次淘汰的页号为：2，0，1，3；<br>缺页中断率为：6/10=60% 。<br>**<br>4<strong><strong>．在一个请求分页系统中，假定系统分配给一个作业的物理块数为</strong></strong>3<strong><strong>，并且此作业的页面<br>走向为</strong></strong>2<strong><strong>、</strong></strong>3<strong><strong>、</strong></strong>2<strong><strong>、</strong></strong>1<strong><strong>、</strong></strong>5<strong><strong>、</strong></strong>2<strong><strong>、</strong></strong>4<strong><strong>、</strong></strong>5<strong><strong>、</strong></strong>3<strong><strong>、</strong></strong>2<strong><strong>、</strong></strong>5<strong><strong>、</strong></strong>2<strong><strong>。试用</strong></strong>FIFO<strong><strong>和</strong></strong>LRU<strong>**两种算法分别计算出程<br>序访问过程中所发生的缺页次数。</strong><br>解：在本题中，分配给作业的物理块数为3。<br>(1) 根据所给页面走向，使用FIFO算法时，页面置换情况如下： <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image133.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/4ea0f1f0f68e45809cfb84efb533db1a.jpg.sub2.png"></p><p>缺页次数为9。<br>(2) 根据所给页面走向，使用LRU算法时，页面置换情况如下： <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image135.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5793fb0b30c24beba8b8fce3d3313cf5.jpg.sub2.png"></p><p>缺页次数为7。 **<br>5<strong>**．在一个段式存储管理系统中，段表内容如下：</strong> <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image137.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5793fb0b30c24beba8b8fce3d3313cf5.jpg.sub3.png"><br>**<br>** <strong>试求下述逻辑地址对应的物理地址是什么？</strong> <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image139.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5793fb0b30c24beba8b8fce3d3313cf5.jpg.sub4.png"></p><p>解：(1)由于第0段的内存始址为210，段长为500，故逻辑地址[O，430]是合法地址。<br>逻辑地址[0，430]对应的物理地址为210十430＝640。<br>(2)由于第1段的内存始址为2350，段长为20，故逻辑地址[1，10]是合法地址。逻辑地址[1，<br>10]对应的物理地址为2350+10=2360。<br>(3)由于第2段起始地址为100，段长为90，所给逻辑地址[2，500]非法。<br>(4)由于第3段的内存始址为1350，段长为590，故逻辑地址[3,400]是合法地址。逻辑地址<br>[3,400]对应的物理地址为1350十400＝1750。<br>(5)由于第4段的内存始址为1938，段长为95，所给逻辑地址[4，l12]非法。<br>(6)由于系统中不存在第5段，所给逻辑地址[5，32]非法。 **<br>** <strong>第五章 设备管理</strong> **<br>** <strong>一．选择题</strong><br>\1. 假脱机技术是指 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image065.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5793fb0b30c24beba8b8fce3d3313cf5.jpg.sub5.png"><br>A. 联机同时外围设备操作技术 B．对换技术和覆盖技术<br>C．SPOOLing技术 D．A和C 答：D<br>\2. 缓冲技术中的缓冲池在 中。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/5793fb0b30c24beba8b8fce3d3313cf5.jpg.sub6.png"></p><p>A．主存 B．外存 C．ROM D．寄存器 答：A<br>\3. 引入缓冲的主要目的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3f2971b0e0544b01ab1df54ae7bc6fe7.jpg.sub2.png"><br>A. 改善CPU和I/O设备之间速度不匹配的情况<br>B. 节省内存<br>C. 提高的CPU利用率<br>D. 高I/O设备的效率 答：A<br>\4. CPU输出数据的速度远远高于打印机的打印速度，为了解决这一矛盾，可采用 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3f2971b0e0544b01ab1df54ae7bc6fe7.jpg.sub3.png"><br>A．并行技术 B．通道技术<br>C．缓冲技术 D．虚存技术 答：C<br>\5. 为了使多个进程能有效地同时处理输入和输出，最好使用 结构的缓冲技术。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3f2971b0e0544b01ab1df54ae7bc6fe7.jpg.sub4.png"><br>A. 缓冲池 B. 闭缓冲区环<br>C. 单缓冲区 D. 双缓冲区 答：A<br>\6. 通过硬件和软件的功能扩充，把原来独立的设备改造成能为若干用户共享的设备，这种<br>设备称为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3f2971b0e0544b01ab1df54ae7bc6fe7.jpg.sub5.png"><br>A. 存储设备 B. 系统设备<br>C. 用户设备 D. 虚拟设备 答：D<br>\7. 如果I/O设备与存储设备进行数据交换不经过CPU来完成，这种数据交换方式是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3f2971b0e0544b01ab1df54ae7bc6fe7.jpg.sub6.png"><br>A. 程序查询 B．中断方式<br>C. DMA方式 D．无条件存取方式 答：C<br>\8. 中断发生后，应保留 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3f2971b0e0544b01ab1df54ae7bc6fe7.jpg.sub7.png"><br>A．缓冲区指针 B．关键寄存器内容<br>C. 被中断的程序 D．页表 答：B<br>\9. 设备管理程序对设备的管理是借助一些数据结构来进行的，下面的 不属于设备管<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3f2971b0e0544b01ab1df54ae7bc6fe7.jpg.sub8.png"><br>理数据结构。<br>A．JCB B．DCT C．COCT D．CHCT 答：A<br>\10. 大多数低速设备都属于 设备。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image027.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3f2971b0e0544b01ab1df54ae7bc6fe7.jpg.sub9.png"><br>A. 独享 B．共享 C. 虚拟 D．Spool 答：A<br>\11. 是直接存取的存储设备。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3f2971b0e0544b01ab1df54ae7bc6fe7.jpg.sub10.png"><br>A．磁盘 B．磁带<br>C．打印机 D．键盘显示终端 答：A<br>\12. 以下叙述中正确的为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image033.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/3f2971b0e0544b01ab1df54ae7bc6fe7.jpg.sub11.png"><br>A．在现代计算机中，只有I/O设备才是有效的中断源<br>B．在中断处理过程中必须屏蔽中断<br>C. 同一用户所使用的I/O设备也可能并行工作</p><p>D．Spooling是脱机I/O系统 答：C<br>\13. 是操作系统中采用的以空间换取时间的技术。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/86701ec2d0ea425bbe772bd90d47887f.jpg.sub2.png"><br>A．Spooling技术 B．虚拟存储技术<br>C. 覆盖与交换技术 D．通道技术 答：A<br>\14. 操作系统中Spooling技术，实质是将 转化为共享设备的技术。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image141.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/86701ec2d0ea425bbe772bd90d47887f.jpg.sub3.png"><br>A. 虚拟设备 B．独占设备 、<br>C. 脱机设备 D．块设备 答：B<br>\15. Spooling系统提高了 的利用率。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/86701ec2d0ea425bbe772bd90d47887f.jpg.sub4.png"><br>A．独占设备 B. 共享设备<br>C. 文件 D. 主存储器 答：A<br>\16. 在操作系统中， 指的是一种硬件机制。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/86701ec2d0ea425bbe772bd90d47887f.jpg.sub5.png"><br>A. 通道技术 B．缓冲池<br>C. Spooling技术 D．内存覆盖技术 答：A<br>\17. 在操作系统中，用户在使用I/O设备时，通常采用 . <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/86701ec2d0ea425bbe772bd90d47887f.jpg.sub6.png"><br>A．物理设备名 B．逻辑设备名<br>C. 虚拟设备名 D．设备牌号 答：B<br>\18. 采用假脱机技术，将磁盘的一部分作为公共缓冲区以代替打印机，用户对打印机的操作<br>实际上是对磁盘的存储操作，用以代替打印机的部分是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/86701ec2d0ea425bbe772bd90d47887f.jpg.sub7.png"><br>A. 独占设备 B．共享设备<br>C. 虚拟设备 D．一般物理设备 答：C<br>\19. 按 分类可将设备分为块设备和字符设备。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/86701ec2d0ea425bbe772bd90d47887f.jpg.sub8.png"><br>A. 从属关系 B．操作特性<br>C．共享属性 D．信息交换单位 答：D<br>\20. 算法是设备分配常用的一种算法。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image084.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/86701ec2d0ea425bbe772bd90d47887f.jpg.sub9.png"><br>A. 短作业优先 B. 最佳适应<br>C. 先来先服务 D. 首次适应 答：C<br>\21. 利用虚拟设备达到I/O要求的技术是指 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/86701ec2d0ea425bbe772bd90d47887f.jpg.sub10.png"><br>A. 利用外存作缓冲，将作业与外存交换信息和外存与物理设备交换信息两者独立起来，并<br>使它们并行工作的过程<br>B. 把I/O要求交给多个物理设备分散完成的过程<br>C. 把I/O信息先存放在外存，然后由一台物理设备分批完成I/O要求的过程<br>D. 把共享设备改为某个作业的独享设备，集中完成I/O要求的过程<br>答：A<br>22.将系统中的每一台设备按某种原则进行统一的编号，这些编号作为区分硬件和识别设备</p><p>的代号，该编号称为设备的 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/e9f0825e51f44496980da942cdc1023a.jpg.sub2.png"><br>A．绝对号 B．相对号 C. 类型号 D．符号名 答：A<br>\23. 通道是一种 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/e9f0825e51f44496980da942cdc1023a.jpg.sub3.png"><br>A. I/O端口 B．数据通道<br>C. I/O专用处理器 D．软件工具 答：C<br>\24. SPOOLing系统在工作过程中会和下面 操作系统组成部分发生联系。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/e9f0825e51f44496980da942cdc1023a.jpg.sub4.png"><br>A. 内存管理 B. 处理机管理<br>C. 文件管理 D. 设备管理 答：D **<br>** <strong>二．简答题</strong> **<br>1<strong><strong>．什么是缓冲</strong></strong>?<strong><strong>为什么要引入缓冲</strong></strong>?**<br>答：缓冲是用来在两种不同速度的设备之间传输信息时平滑传输过程的常用手段。除<br>了在关键的地方采用少量硬件缓冲器之外，大都采用软件缓冲。软件缓冲区是指在I/O操<br>作期间用来临时存放输入输出数据的一块存储区域。引入缓冲的主要原因,可归结为以下几<br>点：（1）缓和CPU与I/O设备间速度不匹配的矛盾。一般情况下，程序的运行过程是时而<br>进行计算，时而进行输入或输出。<br>（2）减少中断CPU的频率，放宽对CPU中断响应时间的限制。例如，假定从系统外传来<br>的数据只用一位二进制位来接收，则每收到一位二进制数就要中断CPU一次，如果数据通<br>信速率为9.6kbs，则中断CPU的频率也为9.6kHz，即每100us就要中断CPU一次，若设置<br>一个具有8位的缓冲寄存器，则可使CPU被中断的次数降低为前者的1/8。<br>（3）提高CPU和I/O设备之间的并行性。<br>。 **<br>2<strong><strong>．何谓虚拟设备？请说明</strong></strong>Spooling<strong>**系统是如何实现虚拟设备的。</strong><br>答：操作系统利用共享设备来模拟独占设备的工作，当系统只有一台输入设备或一台输<br>出设备的情况下，可允许两个以上的作业并行执行，并且每个作业都感觉到获得了供自己独<br>占使用的输入设备和输出设备，我们说，操作系统采用的这种技术为用户提供了虚拟设备。<br>Spooling技术借助磁盘和通道实现了输入／输出过程的共享。当用户提出输入／输出请<br>求时，系统及时响应，此时用户会认为己独占输入输出设备；但事实上，有多道作业同时进<br>入该过程，并分别占用各个阶段。可假设如下情况：第一道作业提出打印申请，得到响应后<br>正在打印机上输出；此时第二道作业提出输出请求，系统响应后将其送入磁盘输出井，一旦<br>第一道作业打印结束，第二道作业可马上开始打印；接着第三道、第四道作业也源源不断地<br>提出输出请求并得到响应，先后进入输出井及占用打印机。若系统控制得好，可令整个过程<br>被数道作业共享，而每一个进入输出过程的作业都会认为自己在独占打印机。可以说，该系<br>统向用户提供了多台打印机。 **<br>3<strong><strong>．什么是通道？通道有哪几种类型</strong></strong>?**</p><p>答：通道又称I/O处理机，它主要用于主存与外设之间的信息传输，从属于中央处理<br>机，能与中央处理机并行操作。通道可分为三类：（1）字节多路通道；（2）选择通道；（3）<br>数组多路通道。 **<br>** <strong>三．应用题</strong> **<br>1<strong>**．若干个等待访问磁盘者依次要访问的柱面为20，44，40，4，80，12，76，假设每移动<br>一个柱面需要3毫秒时间，移动臂当前位于40号柱面，请按下列算法分别计算为完成上述<br>各次访问总共花费的寻找时间。（1）先来先服务算法；（2）最短寻找时间优先算法。</strong><br>解：（1）3毫秒×292=876毫秒<br>（2）3毫秒×120=360毫秒<br>（注：各算法使移动臂的移动次序和移动的柱面数如下：<br>（1）40 → 20 → 44 → 40 → 4 → 80 → 12 → 76<br>（20）（24）（4）（36）（76）（68）（64）<br>共移动292柱面<br>（2）40 → 44 → 20 → 12 → 4 → 76 → 80<br>（4） （24）（8）（8）（72）（4）<br>共移动120柱面 **<br>2<strong><strong>．若磁头的当前位置为</strong></strong>100<strong><strong>磁道，磁头正向磁道号增加方向移动。现有一磁盘读写请求队<br>列：</strong></strong>23<strong><strong>，</strong></strong>376<strong><strong>，</strong></strong>205<strong><strong>，</strong></strong>132<strong><strong>，</strong></strong>19<strong><strong>，</strong></strong>61<strong><strong>，</strong></strong>190<strong><strong>，</strong></strong>398<strong><strong>，</strong></strong>29<strong><strong>，</strong></strong>4<strong><strong>，</strong></strong>18<strong><strong>，</strong></strong>40<strong><strong>。若采用先来先服务、最短<br>寻道时间优先和扫描算法，试计算出平均寻道长度各为多少</strong></strong>?**<br>解：(1)采用先来先服务磁盘调度算法，进行调度的情况为：（从100磁道开始） <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image143.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/0287ea32271e47e2b173e8785988bf5c.jpg.sub2.png"></p><p>移动磁道数总数为1596，平均寻道长度为133。<br>(2)采用最短寻道时间优先磁盘调度算法，进行调度的情况为（从100磁道开始）</p><p><img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image145.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/f58aaffde00f4b14867f1b9f89b75c91.jpg.sub2.png"><br>移动磁道总数为700，平均寻道长度为58.3。<br>（3）采用扫描算法，进行调度的情况为：（从100磁道开始，磁头向磁道号增加方向移动） <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image147.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/f58aaffde00f4b14867f1b9f89b75c91.jpg.sub3.png"></p><p>移动磁道总数为692，平均寻道长度为57.7。 **<br>** <strong>第六章 文件管理</strong> **<br>** <strong>一．选择题</strong><br>\1. 操作系统中对数据进行管理的部分叫做 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image041.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/f58aaffde00f4b14867f1b9f89b75c91.jpg.sub4.png"><br>A. 数据库系统 B. 文件系统<br>C. 检索系统 D. 数据存储系统 答：B<br>\2. 文件系统是指 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/f58aaffde00f4b14867f1b9f89b75c91.jpg.sub5.png"><br>A. 文件的集合 B. 文件的目录<br>C. 实现文件管理的一组软件 D. 文件、管理文件的软件及数据结构的总体 答：D<br>\3. 从用户角度看，引入文件系统的主要目的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/f58aaffde00f4b14867f1b9f89b75c91.jpg.sub6.png"><br>A. 实现虚拟存储 B. 保存系统文档<br>C. 保存用户和系统文档 D. 实现对文件的按名存取 答：D<br>\4. 文件的逻辑组织将文件分为记录式文件和 文件． <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image033.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/f58aaffde00f4b14867f1b9f89b75c91.jpg.sub7.png"><br>A. 索引文件 B. 流式文件<br>C. 字符文件 D. 读写文件 答：B<br>\5. 文件系统中用 管理文件。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/f58aaffde00f4b14867f1b9f89b75c91.jpg.sub8.png"></p><p>A. 作业控制块 B. 外页表<br>C. 目录 D. 软硬件结合的方法 答：C<br>\6. 为了对文件系统中的文件进行安全管理，任何一个用户在进入系统时都必须进行注册，<br>这一级安全管理是 安全管理。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image082.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/7b196c10fdaa46eba9d0b0ff7f5c35a3.jpg.sub2.png"><br>A. 系统级 B. 目录级<br>C. 用户级 D. 文件级 答：A<br>\7. 为了解决不同用户文件的“命名冲突”问题，通常在文件系统中采用 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/7b196c10fdaa46eba9d0b0ff7f5c35a3.jpg.sub3.png"><br>A. 约定的方法 B. 多级目录<br>C. 路径 D. 索引 答：B<br>\8. 一个文件的绝对路径名是从 开始，逐步沿着每一级子目录向下追溯，到指定文件<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image149.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/7b196c10fdaa46eba9d0b0ff7f5c35a3.jpg.sub4.png"><br>的整个通路上所有子目录名组成的一个字符串。<br>A. 当前日录 B. 根目录<br>C. 多织目录 D. 二级目录 答：B<br>\9. 对一个文件的访问，常由 共同限制。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image082.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/7b196c10fdaa46eba9d0b0ff7f5c35a3.jpg.sub5.png"><br>A. 用户访问权限和文件属性 B. 用户访问权限和用户优先级<br>C. 优先级和文件属性 D. 文件属性和口令 答：A<br>\10. 磁盘上的文件以 为单位读写。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/7b196c10fdaa46eba9d0b0ff7f5c35a3.jpg.sub6.png"><br>A. 块 B. 记录<br>C. 柱面 D. 磁道 答：A<br>\11. 磁带上的文件一般只能 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/7b196c10fdaa46eba9d0b0ff7f5c35a3.jpg.sub7.png"><br>A. 顺序存取 B. 随机存取<br>C. 以字节为单位存取 D. 直接存取 答：A<br>\12. 一般来说，文件名及属性可以收纳在 中以便查找。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/7b196c10fdaa46eba9d0b0ff7f5c35a3.jpg.sub8.png"><br>A. 目录 B. 索引<br>C. 字典 D. 作业控制块 答：A<br>\13. 最常用的流式文件是字符流文件，它可看成是 的集合。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image118.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/7b196c10fdaa46eba9d0b0ff7f5c35a3.jpg.sub9.png"><br>A. 字符序列 B. 数据<br>C. 记录 D. 页面 答：A<br>\14. 在文件系统中，文件的不同物理结构有不同的优缺点。在下列文件的物理结构中， 不<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image067.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/7b196c10fdaa46eba9d0b0ff7f5c35a3.jpg.sub10.png"><br>具有直接读写文件任意一个记录的能力。<br>A. 顺序结构 B. 链接结构<br>C. 索引结构 D. Hash结构 答：B<br>\15. 在下列文件的物理结构中， 不利于文件长度动态增长。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/7b196c10fdaa46eba9d0b0ff7f5c35a3.jpg.sub11.png"><br>A. 顺序结构 B. 链接结构</p><p>C. 索引结构 D. Hash结构 答：A<br>\16. 如果文件采用直接存取方式且文件大小不固定，则宜选择 文件结构。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/823508d84e84453990b1a76779c513f1.jpg.sub2.png"><br>A. 直接 B. 顺序<br>C. 随机 D. 索引 答：D<br>\17. 文件系统采用二级目录结构，这样可以 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image037.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/823508d84e84453990b1a76779c513f1.jpg.sub3.png"><br>A. 缩短访问文件存储器时间 B. 实现文件共享<br>C. 节省主存空间 D. 解决不同用户之间的文件名冲突问题 答：D<br>\18. 下列叙述中正确的五项是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/823508d84e84453990b1a76779c513f1.jpg.sub4.png"><br>A. 在磁带上的顺序文件中插入新的记录时，必须复制整个文件。<br>B. 由于磁带的价格比磁盘便宜，用磁带实现索引文件更经济。<br>C. 在索引顺序文件的最后添加新的记录时，必须复制整个文件。<br>D. 在磁带上的顺序文件的最后添加新的记录时，不必须复制整个文件。<br>E. 顺序文件是利用磁带的特有性质实现的，因此顺序文件只有存放在磁带<br>F. 索引顺序文件既能顺序访问，又能随机访问。<br>G.. 直接访问文件也能顺序访问，但一般效率较差。<br>H. 变更磁盘上的顺序文件的记录内容时，不一定要复制整个文件。<br>L. 在磁盘上的顺序文件中插入新的记录时，必须复制整个文件。<br>J. 索引顺序文件是一种特殊的顺序文件，因此通常存放在磁带上。<br>答：ADFGH<br>\19. 以下叙述中正确的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/823508d84e84453990b1a76779c513f1.jpg.sub5.png"><br>A. 文件系统要负责文件存储空间的管理，但不能完成文件名到物理地址的转换。<br>B. 多级目录结构中，对文件的访问是通过路径名和用户目录名来进行的。<br>C. 文件被划分成大小相等的若干个物理块，一般物理块的大小是不固定的。<br>D. 逻辑记录是对文件进行存取操作的基本单位。 答：D<br>20.常用的文件存取方法有两种：顺序存取和 存取。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/823508d84e84453990b1a76779c513f1.jpg.sub6.png"><br>A. 流式 B. 串联<br>C. 顺序 D. 随机 答：D<br>21.文件管理实际上是管理 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/823508d84e84453990b1a76779c513f1.jpg.sub7.png"><br>A. 主存空间 B. 辅助存储空间<br>C. 逻辑地址空间 D. 物理地址空间 答：B<br>22.操作系统是通过 来对文件进行编排、增删、维护和检索。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image057.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/823508d84e84453990b1a76779c513f1.jpg.sub8.png"><br>A. 按名存取 B. 数据逻辑地址<br>C. 数据物理地址 D. 文件属性 答：A<br>\23. 操作系统实现按名存取进行检索的关键在于解决 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/823508d84e84453990b1a76779c513f1.jpg.sub9.png"></p><p>A. 文件逻辑地址到文件具体的物理地址的转换<br>B. 文件名称与文件具体的物理地址的转换<br>C. 文件逻辑地址到文件名称的转换<br>D. 文件名称到文件逻辑地址的转换 答：B<br>24.下列描述不是文件系统功能的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image057.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d1fc161432334ae9a054061fc9f3ef49.jpg.sub2.png"><br>A. 建立文件目录 B. 提供一组文件操作<br>C. 实现对磁盘的驱动调度 D. 实现从逻辑文件到物理文件间的转换 答：C<br>\25. 有关操作系统和其他系统程序组成的文件是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d1fc161432334ae9a054061fc9f3ef49.jpg.sub3.png"><br>A. 系统文件 B. 档案文件<br>C. 用户文件 D. 顺序文件 答：A<br>\26. 逻辑文件是 的文件组织形式。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image061.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d1fc161432334ae9a054061fc9f3ef49.jpg.sub4.png"><br>A. 在外部设备上 B. 从用户观点看<br>C. 虚拟存储 D. 目录中 答：B<br>\27. 文件的逻辑结构是由 决定的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image061.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d1fc161432334ae9a054061fc9f3ef49.jpg.sub5.png"><br>A. 用户 B. 操作系统<br>C. 编译程序 D. 装入程序 答：A<br>\28. 与文件物理组织形式有关的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image118.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d1fc161432334ae9a054061fc9f3ef49.jpg.sub6.png"><br>A. 文件长度 B. 记录的个数<br>C. 文件目录结构 D. 用户对文件的存取方式 答：D<br>\29. 数据库文件的逻辑结构形式是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d1fc161432334ae9a054061fc9f3ef49.jpg.sub7.png"><br>A. 字符流式文件 B. 档案文件<br>C. 记录式文件 D. 只读文件 答：C<br>30.记录式文件内可以独立存取的最小单位是由 组成的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d1fc161432334ae9a054061fc9f3ef49.jpg.sub8.png"><br>A. 字 B. 字节<br>C. 数据项 D. 物理块 答：C<br>\31. 根据辅存设备不同，文件被划分为若干个大小相等的物理块,它是 的基本单位。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image151.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d1fc161432334ae9a054061fc9f3ef49.jpg.sub9.png"><br>A. 存放文件信息或分配存储空间 B. 组织和使用信息<br>C. 表示单位信息 D. 记录式文件 答：A<br>\32. 文件系统为每个文件各建立一张指示逻辑记录和物理记录之间的对应关系表，由此表和<br>文件本身构成的文件是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d1fc161432334ae9a054061fc9f3ef49.jpg.sub10.png"><br>A. 顺序文件 B. 链接文件<br>C. 索引文件 D. 逻辑文件 答：C<br>\33. 在以下的文件物理存储组织形式中，常用于存放大型系统文件的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/d1fc161432334ae9a054061fc9f3ef49.jpg.sub11.png"><br>A. 顺序文件 B. 链接文件</p><p>C. 索引文件 D. 多重索引文件 答：A<br>\34. 在文件系统中，索引文件结构中的索引表是用来 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c13e8d054b6b450ea89bb2e2f97aa8dc.jpg.sub2.png"><br>A. 指示逻辑记录逻辑地址的 B. 存放部分数据信息的<br>C. 存放关键字内容的 D. 指示逻辑记录和物理块之间对应关系的 答：D<br>\35. 若用户总是要求用随机存取方式查找文件记录，则采用索引结构比采用链接结构 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image065.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c13e8d054b6b450ea89bb2e2f97aa8dc.jpg.sub3.png"><br>A. 麻烦 B. 方便<br>C. 一样 D. 有时方便有时麻烦 答：B<br>\36. 记录的成组和分解提高了存储介质的利用率和减少启动设备的次数，但代价是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c13e8d054b6b450ea89bb2e2f97aa8dc.jpg.sub4.png"><br>A. 要设立主存缓冲区 B. 操作系统增加成组和分解功能<br>C. A和B D. 没有额外系统开销 答：C<br>\37. 的有序集合称为文件目录。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c13e8d054b6b450ea89bb2e2f97aa8dc.jpg.sub5.png"><br>A. 文件符号名 B. 文件控制块<br>C. 文件内部名 D. 文件占用的存储块 答：B<br>38．文件名与 的转化是通过文件目录来实现的。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c13e8d054b6b450ea89bb2e2f97aa8dc.jpg.sub6.png"><br>A. 逻辑地址 B. 物理地址<br>C. 文件内部名 D. 文件记录 答：B<br>\39. 多级目录结构形式为 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image141.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c13e8d054b6b450ea89bb2e2f97aa8dc.jpg.sub7.png"><br>A. 线性结构 B. 散列结构<br>C. 网状结构 D. 树形结构 答：D<br>\40. 文件系统采用二级文件目录可以 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c13e8d054b6b450ea89bb2e2f97aa8dc.jpg.sub8.png"><br>A. 缩短访问存储器的时间 B. 解决同一用户间的文件命名冲突<br>C. 节省内存空间 D. 解决不同用户间的文件命名冲突 答：D<br>\41. 在操作系统中，将文件名转换为文件存储地址，对文件实施控制管理都是通过 来<img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c13e8d054b6b450ea89bb2e2f97aa8dc.jpg.sub9.png"><br>实现的。<br>A. 文件目录 B. PCB表<br>C. 路径名 D. 文件名 答：A<br>\42. 允许多个用户同时使用同一个共享文件时，下列做法不正确的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image059.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c13e8d054b6b450ea89bb2e2f97aa8dc.jpg.sub10.png"><br>A. 允许多个用户同时打开共享文件执行读操作<br>B. 允许读者和写者同时使用共享文件<br>C. 不允许读者和写者同时使用共享文件<br>D. 不允许多个写者同时对共享文件执行写操作 答：B<br>\43. 采取哪种文件存取方式，主要取决于 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image053.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/c13e8d054b6b450ea89bb2e2f97aa8dc.jpg.sub11.png"><br>A. 用户的使用要求 B. 存储介质的特性<br>C. A和B D. 文件的逻辑结构 答：C</p><p>\44. 下列物理文件中，不要求物理块连续存放，但却不方便随机存取的是 。 <img data-src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="/root/apache-tomcat-baidu_catch/baiduwenkutmp/b/b2b4a04dcf84b9d528ea7ab7.pc/a17384470b80443d800c1923c603a997.jpg.sub2.png"><br>A. 顺序文件 B. 链接文件<br>C. 索引文件 D. 逻辑文件 答：B **<br>** <strong>二．简答题</strong> **<br>1<strong><strong>．什么是文件</strong></strong>?<strong><strong>它包含哪些内容及特点</strong></strong>?**<br>答：文件是信息的一种组织形式，是存储在外存上的具有标识名的一组相关信息集合。<br>文件包含的内容有：源程序、二进制代码、文本文档、数据、表格、声音和图像等。<br>文件的特点如下：<br>(1)文件具有保存性，它被存储在某种存储介质上，长期保存和多次使用。<br>(2)文件是按名存取的，每个文件具有惟一的标识名，通过标识名(文件名)来存取文件中的信<br>息，而不需了解文件在存储介质上的具体物理位置。<br>(3)文件的内容是一组信息的集合，信息可以是源程序、二进制代码、文本文档、数据、表<br>格、声音和图像等。 **<br>2<strong><strong>．文件系统中常采用的物理结构有哪些</strong></strong>?<br>** 答： （1）顺序文件：它是按照逻辑文件中的记录顺序，依次把逻辑记录存储到连续的<br>物理块中而形成的文件。<br>（2）链接文件：它的物理块不是连续的，也不必顺序排列，但每个物理块中设置一个指针，<br>指向下一个物理块的地址，这样，所有的物理块被链接起来，形成一个物理文件，称为链接<br>文件或串联文件。<br>（3）索引文件：它是文件系统为每个文件另外建立一张指示逻辑记录和物理块之间的对应<br>关系表，此表称为索引表，文件本身和索引表组成的文件称为索引文件。 **<br>3<strong><strong>．什么是文件的逻辑组织和物理组织</strong></strong>?**<br>答：文件的逻辑组织——用户对文件的观察和使用是从自身处理文件中数据时采用的组<br>织方式来看待文件组织形式。这种从用户观点出发所见到的文件组织形式称为文件的逻辑组<br>织。 **<br>4<strong><strong>．设置文件目录的目的是什么</strong></strong>?** <strong>文件目录组织都有哪几种形式**</strong>?**<br>答：由于系统中文件的种类多、数量大，所以设置文件目录的目的是为了便于查找文件、<br>操作文件、共享文件及保护文件。<br>文件目录组织有三种形式：(1)简单(一级)目录，(2)二级目录；(3)树型目录 **<br>5<strong><strong>．什么是流式文件</strong></strong>?<strong><strong>什么是记录式文件</strong></strong>?**<br>答：逻辑文件有两种形式：流式文件和记录式文件。流式文件对文件内的信息不再划分<br>单位．它是由—组相关信息组成的有序字符流。长度直接按字节计算。记录式文件允许用户<br>把信息按逻辑上独立的涵义划分为信息单位(记录)，文件由若干个个相关的记录组成，每个<br>记录又由若干个数据项组成。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统题库一</tag>
      </tags>
  </entry>
  <entry>
    <title>中国近代史复习</title>
    <url>/archives/49b0d68c.html</url>
    <content><![CDATA[<!-- build time:Fri Dec 24 2021 14:22:59 GMT+0800 (中国标准时间) --><p><strong>《中国近代史纲要》考试要点资料整理</strong></p><p><strong>第一章 反对外国侵略的斗争</strong></p><p><strong>选择题</strong>：</p><p>1、清朝唯一盛世时期是康乾盛世。</p><p>2、1640年英国资产阶级革命爆发，资本主义的发展突出表现在工业革命的爆发上。</p><p>3、所谓的殖民地是指商品倾销市场、廉价劳动力、廉价原料的供应地和自由投资市场。</p><p>4、列强对中国的侵略主要有军事侵略、政治控制、经济掠夺、文化渗透。</p><p>5、1840年，英国发动第一次鸦片战争，中国战败。1856年，英法国发动第二次鸦片战争，发动了著名的“火烧圆明园”；1900年，八国联军发动侵华战争并签订《辛丑条约》</p><p>6、中国割让香港岛给英国是在中英《南京条约》中规定的。</p><p>7、割占中国最多的帝国是俄国，赔款最多的是《辛丑条约》。</p><p>8、1894年日本发动甲午战争后签订的《马关条约》允许日本在中国设厂，各国开始大规模的对华进行资本输出。</p><p>9、中国革命的主力军是农民阶级。中国民族资产的特性是革命性、软弱性或妥协性。</p><p>10、中国第一次大规模的反侵略武装斗争是广州三元里人民斗争。</p><p>11、鸦片战争战死虎门的将领是关天培，镇南关大捷的指挥大将是冯子材，甲午中日战争中战死的爱国将领有邓世昌、林永升、丁汝昌、刘步蟾。</p><p>12、要求中国实行门户开放政策的是美国，列强不能灭亡和瓜分中国的根本原因是中国人民进行了不屈的反侵略斗争。</p><p>13、近代中国睁眼看世界的第一人是林则徐，他编写了《四洲志》，魏源的《海国图志》是在综合了世界各国历史，地理及对外政策后提出了“师夷长技以制夷”的思想，严复翻译了《天演论》。</p><p><strong>简述题：</strong></p><p>1、简述中国封建社会的基本特点？</p><p>在经济上，封建土地所有制占主导地位；在政治上，实行高度中央集权的封建君主专制制度；在文化上，以儒家思想为核心；在社会结构上，是族权和政权相结合的封建宗法等级制度；中国封建社会的主要矛盾是地主阶级和农民阶级的矛盾。</p><p>2、为什么说1840年第一次鸦片战争是中国近代史的开端？</p><p>第一次鸦片战争以中国失败而告终，主权独立受到侵犯，领土完整遭到破坏，中国逐渐沦入国家主权受制于外国列强的半殖民地社会；鸦片战争后，随着五口通商和西方商品在中国的倾销，促使中国传统的封建的自给自足的自然经济开始解体。</p><p>3、简述近代中国半殖民地半封建社会的特点是什么？</p><p>资本帝国主义成为支配中国的决定性力量；中国封建势力成为外国列强压迫、奴役中国人民的社会基础和统治支柱；封建剥削制度封建地主的徒弟所有制在广大地区保持着；中国资本主义没有成为中国社会经济的主体；近代中国各地区经济、政治和文化和发展是及不平衡的；人民毫无政治权利和生活的极端贫困化。</p><p>4、简述社会阶级关系的变动？</p><p>旧的封建统治阶级——地主阶级继续拥有大量的土地；旧的被统治阶级——农民阶级仍是近代中国社会人数最多的被剥削阶级；中国资产阶级分为官僚买办资产阶级和民族资产阶级两部分。</p><p>5、简述中国工人阶级为何具有无产阶级的特点?</p><p>深受帝国主义，封建势力和资产阶级三重压迫和剥削，革命性最强；人数虽少，但相对集中，便于</p><p>形成革命的力量和传播先进的思想；同农民天然的联系，便于结成工农联盟；因此中国工人阶级是近代中国社会中最先进、最革命、最有力量的阶级。</p><p>6、简述近代中国的两对主要矛盾及其关系？</p><p>①在半殖民地半封建的中国，帝国主义与中华民族的矛盾、封建主义与人民大众的矛盾是两对主要矛盾，而帝国主义与中华民族的矛盾是各种矛盾中最主要的矛盾；②两对主要矛盾之间的关系，一是当外国列强向中国发动侵略战争时，民族矛盾上升到主要地位；二是当外国侵略者同中国封建政权相勾结共同镇压中国革命时，阶级矛盾就上升为主要矛盾；三是国内战争发展到直接威胁帝国主义在华利益及中国封建地主阶级统治时，帝国主义和国内封建主义完全公开站在一条线上。</p><p>7、简述中国两大历史任务及其关系？</p><p>①近代中国社会的性质和主要矛盾决定了近代以来中华名族始终面临两大历史任务：一是球的民族独立和人民解放；二是实现国家繁荣富强和人民共同富裕。②两大历史任务既相互区别，又相互联系。其区别在于，前者要改变民族遭压迫、人民受剥削的地位和状况，是要从根本上解决生产关系问题；后者是要改变近代中国经济、文化和社会落后的地位和状况，解决生产力问题。其联系在于，只有完成第一大任务，才能为第二大任务的完成创造条件。</p><p>8、简述反侵略斗争失败及其原因？</p><p>一是社会制度的腐败；二是经济技术的落后，前者是根本原因。</p><p><strong>第二章 对国家出路的早期探索</strong></p><p><strong>选择题：</strong></p><p>1、1851年的金田起义是太平运动的起点；太平天国由胜转衰的转折点是天京事变；1864年7月天京被攻破，太平天国农民战争失败。</p><p>2、《天朝田亩制度》所建立的理想社会是“有田同耕、有饭同食、有衣同穿、有钱同使、无处不均匀、无处不饱暖”。</p><p>3、对洋务事业的指导思想最先做出比较完整表述的是冯桂芬，洋务运动的性质是“自救”活动，其指导思想是“中学为体，西学为用”；北洋海军全军覆没，标志着洋务运动的失败。</p><p>4、维新变法最早开始于1895年的“公车上书”；其后康有为撰写了《新学伪经考》、《孔子改制考》、《人类公理》等著作；当时影响最大的学会是强学会、南学会和保国会等；影响较大的报纸有上海《时务报》、天津《国闻报》、湖南《湘报》等。</p><p>5、对抗维新变法的代表作是湖广总督张之洞写的《劝学篇》。</p><p><strong>简述题：</strong></p><p>1、简述太平天国农民战争爆发的根本原因？</p><p>一是封建专制政权和地主阶级对农民的政治压迫和经济剥削；二是鸦片战争带来的恶果，使得中国社会的阶级矛盾普遍激化了；前者是战争爆发的根本原因。</p><p>2、简述太平天国的纲领文件。</p><p>太平天国前期的《天朝田亩制度》是一个以解决土地问题为中心的比较完整的社会改革方案，但此纲领并没有超出农民小生产者的狭隘眼界，它所追求的理想天国是一种绝对平均的理想社会，是不切实际的空想；太平天国后期洪仁玕提出的《资政新篇》是一个带有鲜明的资本主义色彩的改革与建设方案，但通篇为涉及农民问题与土地问题。这一致命的弱点，决定了这个方案从一开始就缺乏实施的阶级基础和社会条件。</p><p>3、简述太平天国运动的历史意义？</p><p>一是它沉重的打击了封建统治阶级，强烈撼动了清政府的统治根基；二它是中国旧式农民战争的最高峰；三是太平天国对孔子及儒家经典予以严厉批评，削弱了封建统治的精神支柱；四是太平天国农民战争有力地打击了外国侵略势力；五是它冲击了西方殖民主义在亚洲的统治。</p><p>4、简述太平天国失败的原因和教训？</p><p>太平天国失败的根本原因是缺乏先进阶级的领导，你哦年国民阶级不是新的生产力和生产关系的代表，带有阶级局限性；太平天国的失败还在于没有科学理论的指导；太平天国起义的失败表明，在半殖民地半封建社会，农民不能担负起领导反帝反封建斗争。</p><p>5、简述洋务运动的内容？</p><p>洋务运动持续时间为30年，其内容主要有兴办近代企业，建立新式海路军，创办新式学堂，派遣留学生。</p><p>6、简述洋务运动的历史意义？</p><p>在客观上促进了中国早期工业和民族资本主义的发展；成为中国近代教育的开端；传播了新知识，打开了人们的眼界；引起了社会风气和价值观念的变化。</p><p>7、简述洋务运动失败的原因？</p><p>洋务运动具有封建性；洋务运动对西方列强具有依赖性；洋务企业的管理具有腐朽性。</p><p>8、简述维新派和守旧派的论战？</p><p>两派之间的论战主要围绕三个问题展开：一是要不要变法；</p><p>二是要不要兴民权、设议院，实行君主立宪；三是要不要废八股、改科举和兴学堂。论战的意义是资产阶级思想与封建主义思想在中国的第一次正面交锋，为维新变法运动作了思想舆论的准备。</p><p>9、简述“百日维新”的主要内容？</p><p>在政治上，改革行政制度；在经济上，保护、奖励农工商业；在军事上，裁撤绿营，改练新式陆军；在文教方面上，改革科举制度，废八股，提倡西学。这些新政的内容，对中国民族资本主义的发展和资产阶级先进文化科学的传播都是十分有利的。</p><p>10、简述戊戌维新运动的意义？</p><p>戊戌维新运动是一次爱国救亡运动；是一场资产性质的政治改革运动；是一场思想启蒙运动；在改良社会风气方面也有不可低估的意义。</p><p>11、简述戊戌维新运动失败的原因和教训？</p><p>戊戌维新运动失败的主要原因在于维新派自身的局限和以慈禧太后为首的强大的守旧势力的反对。维新派自身有三方面的弱点和局限：一是不敢否认封建主义；二是对帝国主义抱有幻想；三是脱离人民群众。戊戌维新以悲剧性的失败而告终，不仅暴露出资产阶级的软弱性，同时也说明在半殖民半封建的中国，企图通过统治者进行自上而下的改良的道路，是行不通的要想实现国家的独立、民主、富强，必须采用革命的手段。</p><p><strong>第三章 辛亥革命</strong></p><p><strong>选择题：</strong></p><p>1、1906年清末新政开始废除科举考试。</p><p>2、中国第一个资产阶级革命组织是孙中山组织的兴中会；其他资产阶级革命团体有黄兴的华兴会，蔡元培的光复会；近代中国第一个全国性的资产阶级性质的政党是中国同盟会，其纲领是“驱除鞑虏，恢复中华，创立民国，平均地权”；同盟会的机关报是《民报》； 三民主义是民族、民权、民生。</p><p>3、20世纪初，资产阶级革命派宣传民主革命思想的代表作有章炳麟的《驳康有为轮革命书》、邹容的《革命军》、陈天华的《警世钟》和《猛回头》。</p><p>4、民生主义的基本方案是核定低价；按价征税，涨价归公，按价收买。</p><p>5、资产阶级组织的武装起义中影响做大的是1911年的广州起义，又称黄花岗起义。人民武装起义尤为强烈的属四川省的保路运动。</p><p>6、辛亥革命的高潮出现在1911年10月10号的武昌起义。1912年中华民国临时政府宣告成立，国号为“中华民国”，1912年为中华民国元年。</p><p>7、中国第一部具有资产阶级共和国宪法性质的法典是《中华民国临时约法》。</p><p>8、北洋军阀统治了中国16年；1915年袁世凯接收了日本提出的“二十一条”。以孙中山为首的革命派与北洋军阀进行的斗争有1913年“二次革命”，1915年蔡锷的护国运动，1917年孙中山率领的第一次护法运动，1919年的第二次护法运动。</p><p>9、1914年孙中山成立的中华革命党，第二次护法战争的失败标志着中国旧民主主义革命的终结。</p><p><strong>简述题：</strong></p><p>1、简述清末新政的内容？</p><p>一是改革管制，整顿吏治；二是改革兵制，训练新军；三是改革学制，提倡新学；四是奖励工商，兴办实业。</p><p>2、试述“三民主义”的内容？</p><p>民族主义包括“驱除鞑虏，恢复中华”两性内容：一是以革命手段推翻清王朝，改变它一贯推行的民族歧视和压迫政策；二是变“次殖民地”的中国为独立的中国，但其没有明确的反帝主张；民权主义内容是“创立民国”，即推翻封建君主主义专制制度，建立资产阶级的民主共和国，但其没有明确劳动人民在国家中的地位；民生主义的内容是“平均主义”，但其没有正面触及封建土地所有制，不能满足农民的土地要求；孙中山的三民主义学说，提出了一套中国历史上不曾有过的资产阶级共和国的建国方案，是一个比较完备的民主主义的革命纲领。</p><p>3、革命派与改良派的辩驳内容与意义？</p><p>内容：一是要不要以革命手段推翻清政府；二是要不要推翻帝制，实行共和；三是要不要社会革命。意义：论战划清了革命与改良的界限，论战使资产阶级民主和三民主义思想得到了更加广泛的份额传播，为推翻清朝统治的革命斗争奠定了思想基础。</p><p>4、为什么说南京临时政府是资产阶级共和国性质的革命政权？</p><p>一是人员构成上，资产阶级革命派控制着这个政权；二是在实行的各项政策措施上，集中体现了中国民族资产阶级的愿望和利益，一定程度上符合广大中国人民的利益。</p><p>5、简述南京临时政府的局限性？</p><p>一是企图用承认清政府与列强所定的的一切不平等条约和所欠的一切外债，来换取列强承认中华民国；二是没有提出可以满足农民土地要求的政策与措施。</p><p>6、简述辛亥革命胜利的历史意义？（为什么说辛亥革命是一次比较完全意义上的资产阶级民主革命？）</p><p>一是推翻了清王朝在中国的统治；二是结束了统治中国两千多年的封建君主专制制度，建立了中国历史上第一个资产阶级共和政府；三是一场思想解放运动；四是推翻了民族资本主义经济的发展；五是打击了帝国主义在华势力。</p><p>7、简述辛亥革命的局限性？（辛亥革命为什么会失败？）</p><p>没有提出彻底的反对帝国主义和反对封建主义的革命纲领；没有充分发动和依靠群众；没有建立坚强的革命政党；资产阶级革命派的软弱性以及由此而来的辛亥革命的局限性，使辛亥革命难以摆脱失败的命运；辛亥革命的失败表明：资产阶级共和国的方案不能救中国。</p><p><strong>第四章 开天辟地的大事件</strong></p><p><strong>选择题：</strong></p><p>1、1915年陈独秀在上海创办的《新青年》，成为新文化运动兴起的标志。</p><p>2、新文化运动的主要内容是提倡民主与科学，还提倡白话文、新文学，反对文言文，主张文学革命。新文化运动的第一篇白话文小说是鲁迅发表的《狂人日记》。</p><p>3、在中国大地率先举起马克思主义旗帜的是李大钊。五四运动斗争目标是“外争国权，内除国贼”。</p><p>4、《共产党宣言》第一个中文全译本是陈望道翻译的。中国第一个地方共产党组织是上海共产主义小组。中国共产党第一、二次全国代表大会都是在上海举行。</p><p>5、第一个产业工会是上海机器工会。第一个农民协会成立在浙江省萧山县衙前村。</p><p>6、中国工人运动掀起高潮的起点是1922年香港海员罢工，终点是1923年京汉铁路工人罢工。中国工人运动史上最长的一次罢工是省港大罢工。</p><p>7、建立革命统一战线的问题是在中共第三次全国代表大会上。国共合作的政治基础和革命统一战线的共同纲领是新三民主主义 。第一次国共合作的政治基础是联俄、联共、扶助农工三大政策。1924年国民党“一大”的召开，标志着以第一次国共合作为基础的革命统一战线正式形成，改组后的国民党改为工人阶级、农民阶级、小资产阶级和民族资产阶级的革命联盟。</p><p>8、1924年成立的黄埔军校把政治教育提到和军事训练同等重要的地位，注重培养学生的爱国思想和革命精神，这是同一切旧式军校的根本区别。</p><p>9、北伐战争的直接目标是打到帝国主义支持北洋军阀。</p><p>10、国民党右派为了打击共产党员和工农革命力量，以蒋介石为首后制造了中山舰事件、整理党务案事件。</p><p><strong>简述题：</strong></p><p>1、简述五四前夕的新文化运动的历史意义？</p><p>一它是资产阶级民主主义的新文化同封建主义旧文化的斗争；二是它大力宣传了民主与科学，启发了人们的理智与民主主义觉悟，开启了思想解放的潮流；三是它为五四运动创造了思想文化上的条件。</p><p>2、简述五四前夕的新文化运动的局限？</p><p>新闻欢运动提倡的资产阶级民主主义，并不能为人们提供一种思想武器去认识中国；他们没有把运动普及到工农群众中去；他们中的不少人在思想方法上存在绝对肯定或绝对否定的形式主义偏向。</p><p>3、简述五四运动的历史特点及意义？</p><p>五四运动是一次彻底的反帝反封建的革命运动；它是一场真正的群众性的革命运动；它促进了马克思主义在中国的广泛的传播，促进了马克思主义同中国工人运动的结合，为中国共产党的成立作了思想和干部上的准备；它是中国新民主主义革命的伟大开端。</p><p>4、为什么说五四运动是中国新民主主义革命的伟大开端？</p><p>五四运动发生在俄国十月革命之后，中国革命逐渐成为世界无产阶级社会主义革命的一部分；五四运动以后，无产阶级逐渐代替资产阶级成为近代中国民族民主革命的领导者。</p><p>5、为什么说中国共产党的诞生是马克思主义同中国工人运动相结合的产物？</p><p>五四以后，随着工人运动的发展，工人阶级急切需要找到实现本阶级意志的精神武器；马克思主义的广泛传播，也迫切需要从工人阶级中找到物质力量。</p><p>6、早期共产党组织的成员同反马克思主义的思潮进行了那三次论战？</p><p>一是同胡适围绕“问题与主义”的论战；二是关于社会主义的论战，强调资本主义道路在中国走不通，中国的出路只能是社会主义；三是同无政府主义的论战，指出必须以革命的手段夺取政权，建立无产阶级政权。</p><p>7、简述中国共产党成立的伟大意义？（为什么说中国共产党的成立是一个“开天辟地的大事件”）</p><p>它标志着中国革命终于有了一个坚强的领导核心；中国革命从此有了一个科学的指导思想，即马克思主义；沟通了中国革命与世界革命的联系，使中国革命有了新的前途，即社会主义的前途。</p><p>8、简述中共“二大”的内容与意义？</p><p>1922年中共二大的召开，党的三大纲领：消除内战，达到军阀，建设国内和平；推翻国际帝国主义的压迫，达到中华民族完全独立；统一中国为真正的民主共和国。意义：中共二大在中国近代历史上第一次明确提出了反帝反封建的民主革命纲领，为中国革命指明了方向。</p><p>9、简述北伐战争得以胜利进军的原因？</p><p>国内合作的实现，革命统一战线的建立，特别是共产党员和共青团员的先锋模范作用是北伐胜利的重要原因；北伐军得到广大工农群众的大力支持；北伐战争得到了苏联政府的多方面援助。</p><p>10、简述国民革命失败的原因？</p><p>客观上，帝国主义和中国封建主义势力的联合力量大大超过了革命联合力量；革命统一战线内部出现剧烈分化，蒋介石、汪精卫先后分裂统一战线，制造反攻政策；主观上，以陈独秀为首的中共中央领导犯了右倾机会主义错误。</p><p>11、简述国民革命的历史意义？</p><p>沉重打击了帝国主义和封建主义的统治势力；扩大了中国共产党在中国人民中的政治影响，中国共产党正是从这场革命的失败中涉取教训，开始懂得了进行土地革命和掌握革命武装的重要性。</p><p><strong>第五章 中国革命的新道路</strong></p><p><strong>选择题：</strong></p><p>1、国民党实行的是代表地主阶级、买办性的大资产阶级利益的一党专政和军事独裁统治。</p><p>2、影响较大的中间党派的有：邓寅达的中国国民党临时行动委员会（又称第三党），乡村建设派，中华职业教育社，中国国家社会党。</p><p>3、中共中央确定土地革命和武装斗争的方针是在1927年的汉口会议中。“枪杆子里面出政权”的说法是由毛泽东首先提出的。</p><p>4、由大革命失败到土地革命战争兴起的历史转折点是八七会议。1927年毛泽东领到了秋收起义。</p><p>5、1927年8月1日的南昌起义是由周恩来、朱德、贺龙、叶挺、刘伯承发起的。1927年12月，张太雷、叶挺、叶剑英发动了广州起义。</p><p>6、中国共产党人对中国革命道路探索上，毛泽东有四篇代表作：《中国的红色政权为什么能够存在》、《井冈山的斗争》、《星星之火，可以燎原》（主要代表作）、《反对本本主义》。</p><p>7、新民主主义革命的基本问题是农民土地问题。</p><p>8、1931年成立的中华苏维埃共和国临时中央政府，当选为中央执行委员会主席的是毛泽东。</p><p>9、1936年红二、四方面军先后同红一方面军在甘肃会宁、静宁将台堡会师。</p><p><strong>简述题：</strong></p><p>1、为什么说国民党代表了大地主、大资产阶级的利益？</p><p>国民党政府是在帝国主义的支持下建立的，从根本上说，国民党统治的建立，并没有使中国摆脱帝国主义的压迫，而是为外国侵略势力深入中国进一步敞开了大门。国民党统治时期，在中国的社会经济生活中占优势地位的仍然是封建经济。国民党统治建立以后，官僚买办资本急剧的膨胀起来，它又是中国的垄断资本，控制了全国的经济命脉。国民党的反动统治代表着帝国主义、封建主义和官僚资本主义的利益，在当时，推翻国民党的反动统治成为新民主主义革命的主要目标。</p><p>2、简述中国国民党临时行动委员会及其政治主张？</p><p>委员会成立于1930年8月，一方面不满国民党当局的内外政策；一方面又错误的认为中国共产党的的革命主张不适合中国国情；同时还大力策动军事反蒋活动，商定武装起义计划，但其军事反蒋斗争，终因1931年邓寅达的被捕而告失败。</p><p>3、简述南昌起义的历史意义？</p><p>它打响了武装反抗国民党反动统治的第一枪；它成为共产党独立领导革命战争、创建人民军队和武装夺取政权的伟大开端；它揭开了土地革命战争的序幕。</p><p>4、“三湾改编”的主要内容及意义？</p><p>内容：将原有的一个师缩编成一个团；将党的支部建立在脸上；成立各级士兵委员会，部队内部实行民主管理。意义：它成为建设共产党领导的新型人民军队的重要开端。</p><p>5、试述红色政权存在和发展的原因和条件？</p><p>中国是一个几个帝国主义国家间接统治的政治经济发展极端不平衡的半殖民地半封建的大国（根本不原因）；国民革命的影响；全国革命形势的继续向前发展；相当力量的正式红军的存在；共产党组织的坚强有力和各项政策的正确贯彻执行。</p><p>6、简述“工农武装割据”的思想？</p><p>共产党领导的土地革命、武装斗争与根据地建设这三者之间的辩证统一关系。</p><p>7、简述土地革命中的阶级路线和土地分配方法？</p><p>依靠贫民、雇民，联合中农，限制富农，保护中小工商业者，消灭地主阶级；以乡为单位，按人口平分土地，在原耕地的基础上，实行抽多补少、抽肥补瘦。</p><p>8、试述王明“左”倾教条主义的主要错误？</p><p>在统一战线问题上一味排斥和打击中间势力；在革命道路问题上坚持以城市为中心；在土地革命问题上，实行消极防御的方针；在党内战争和组织问题上，推行“残酷斗争无情打击”方针。</p><p>9、简述中共党内屡次出现严重“左”倾错误的原因？</p><p>八七会议后，党内一直存在着的浓厚拼命的冲动；全党的马克思主义理论准备不足；共产国际的干预以及对王明的全力支持。</p><p>10、试述遵义会议及其重大意义？</p><p>1935年召开的遵义会议解决了当时具有决定意义的军事和组织问题。意义：遵义会议在及其危急的情况下挽救了中国共产党、挽救了中国工农红军、挽救了中国革命，开始确立了以毛泽东为代表的新的中央的领导，成为中国共产党历史上一个生死攸关的转折点，标志着中国共产党在政治上走向成熟。</p><p>11、简述长征的伟大意义？</p><p>它粉碎了国民党“围剿”红军、消灭革命力量的企图；是中国革命转危为安的关建；它为迎接中国人民救亡的新高潮准备了条件；长征保存并锤炼了中国革命的骨干力量；长征播散了革命的火种；长征铸就了伟大的长征精神。</p><p><strong>第六章 中华民族的抗日战争</strong></p><p><strong>选择题：</strong></p><p>1、近代以来中国第一次取得反侵略完全胜利的战争是中国人民抗日战争。</p><p>2、中国人民抗日战争进入全民族抗战的新阶段是1937年的卢沟桥事变。</p><p>3、引发抗日战争的三大事变是1931年“九一八事变”、1935年“华北事变”、1937年“卢沟桥事变”。</p><p>4、标志着中国人民抗日救亡运动新高潮到来的是一二·九运动。</p><p>5、1935年在陕西召开的瓦窑堡会议提出了抗日统一战线的线政策。</p><p>6、1936年西安事变迫使蒋介石做出了停止“剿共”，成为时局转换的枢纽。</p><p>7、第二次国共合作作为基础的抗日民族统一战线正式建立的标志是共产党宣言和蒋介石的谈话。第二次国共合作时，红军主力改编为国民革命军第八路军，朱德任总指挥，彭德怀任副总指挥；南方的红军和游击队改编为国民革命军新编第四军，叶挺任军长，项英任副军长。</p><p>8、抗日战争时期中国始终存在着两个战场，即共产党领导的敌后战场和国民党领导的正面战场。</p><p>9、国民党的正面战场中的著名战役是1938年的台儿庄战役。</p><p>10、抗日战争中国民党著名的爱国将领有：佟麟阁、赵登属、谢晋元（淞沪会战）、张自忠（枣宜会战）、戴安澜。</p><p>11、战略相持阶段是中国抗日战争取得胜利的最关键的阶段。</p><p>12、抗日战争中，中国共产党军队取得胜利的第一个大胜战平型关大捷。</p><p>13、中国军队对日本军队发动的规模最大的战役是“百团大战”。</p><p>14、1941年，国民党发动的第二次反共高潮中最著名的事件是皖南事变。</p><p>15、为了坚持、扩大和巩固抗日民族统一战线，中国共产党制订了“发展进步实力，争取中间势力，孤立顽固势力”的总方针。抗日战争期间，进步势力是指工人、农民和城市小资产阶级。中间势力是指民族资产阶级、开明绅士和地方实力派。顽固势力是指大地主大资产阶级的抗日派，即以蒋介石集团为代表的国民党亲英美派。</p><p>16、抗日战争期间，共产党坚持的是“三三制”原则，即共产党员、非党的左派进步分子和中间派。抗日战争期间，土地政策施行的减租减息的政策。</p><p>17、整风运动的内容是反对主观主义以整顿学风、反对宗派主义以整顿党风、反对党八股以整顿文风。反对主观主义是整风运动的主要任务。主观主义的主要表现形式是教条主义和经验主义。中国共产党内出现“左”、右倾错误的思想认识根源是教条主义。</p><p>18、1945年，中共七大确立了以毛泽东为党的一切工作的指导思想。</p><p>19、1945年9月3日，抗日战争胜利。</p><p>20、1945年，中国成为联合国的创始国和五个常任理事国之一。</p><p><strong>简述题：</strong></p><p>1、简评抗日战争时期国民党领导的正面战场？</p><p>国民党领导的正面战场是抗日战争的重要战场；抗战初期，正面战场组织过若干重大战役，打破了日军“速战速决”的战略企图；随着相持阶段的到来，正面战场转化为比较消极，多次制造反共军事摩擦，在对日战场上连接出现溃败；国民党坚持独裁的政策也遭到全国人民的反对。</p><p>2、试述持久抗战的内容和意义？</p><p>内容：①毛泽东指出，中日战争不是任何别的战争，乃是版殖民的半封建的中国和帝国主义的日本之间在20世纪30年代进行的一个决战。中日双方存在着相互矛盾的四个特点：敌强我弱，敌小我大，敌退我进，敌寡助我多助；②毛泽东还科学的预测了抗日战争的发展阶段。即：抗日战争将经过战略防御、战略相持、战略反攻三个阶段；③它决定了抗日战争只能是持久战，最后胜利是属于中国的。意义：毛泽东阐明的持久战思想，抓住了中日战争发生的时代特点和战争性质，揭示了抗日战争的发展规律和坚持抗战、争取抗战胜利必须实行的战略方针，对全国抗战起了积极作用。</p><p>3、试述新民主主义革命的内容和意义？</p><p>内容：毛泽东阐明了中国共产党领导的整个中国革命运动是包括民主主义革命和社会主义革命两个阶段的全部革命运动。1919年五四运动以后的民主主义革命是新民主主义革命；他还阐明了中国共产党在新民主主义革命阶段的基本纲领，即政治、经济、文化上的纲领；他总结了中国共产党成立以来的经验，指出统一战线、武装斗争、党的建设，是中国共产党领带革命的三个基本问题，是战胜敌人的三个法宝。意义：新民主主义理论以毛泽东为主要代表的中国共产党人把马克思主义基本原理同中国革命具体实际相结合的理论成果，新民主义理论的系统阐明，标志着毛泽东思想达到成熟。</p><p>4、抗日战争胜利的意义？（为什么说中国人民抗日战争是近代以来中华民族反抗外敌入侵第一次取得完全胜利的民族解放战争？）</p><p>抗日战争的胜利，彻底打败了日本侵略者，捍卫了中国的国家主权和领土完整；抗日战争的胜利为中国共产党领导人民取得整个新民主主义革命的胜利奠定了基础；抗日战争的胜利促进了中华民族的大团结，弘扬了中华民族的伟大精神；抗日战争的胜利为最终战胜世界法西斯势力做出了历史性的贡献。</p><p>5、简述抗日战争胜利的原因？</p><p>共产党在全民族抗战中发挥了中流砥柱的作用；中国人民巨大的民族觉醒、空前的民族团结和英勇的民族抗战，是中国人民抗日战争胜利的决定性因素；中国人民抗日战争胜利，得到世界所有爱好和平和正义的国家和人民、国际组织以及各种反法西斯力量的同情和支持也是分不开的。</p><p>6、抗日战争胜利的基本经验？</p><p>全国各族人民的大团结，是中国人民战胜一切艰难困苦、实现抗战胜利的力量源泉；以爱国主义为核心的伟大民族精神是中国人民团结奋进的精神动力；中国人民热爱和平，反对侵略战争，同时又不惧怕战争。</p><p>7、简述中国人民抗日战争在世界反法西斯战争中的地位？</p><p>抗日战争不仅是中华民族救亡图存的民族解放战争，也是世界反法西斯战争的重要组成部分；抗日战争是世界反法西斯战争的东方主战场；中国人民的持久战争为同盟军对完成太平洋战争的战略转折和实施战略反攻创造了有利条件。</p><p>8、为什么说中国共产党是中国人民抗日战争的中流砥柱？</p><p>中国共产党积极倡导、促成、维护抗日民族统一战线，最大限度地动员全国军民共同抗战，成为凝聚全民族力量的杰出组织者。以毛泽东为主要代表的中国共产人，把马克思列宁主义基本原理同中国具体实际相结合，科学阐明了抗日战争的规律和进程，制定了正确的战略和策略，对抗日战争发挥了重要的作用。</p><p><strong>第七章 为创建新中国而奋斗</strong></p><p><strong>选择题：</strong></p><p>1、共产党成立以后的四大战役是北伐战争、土地革命战争、抗日战争和解放战争。</p><p>2、1946年挑起全国性的内战的标志是以大局围攻中原解放区。</p><p>3、在国统区开展的爱国民主运动是配合人民解放战争的第二条战线。</p><p>4、人民解放战争开始的标志是1947年刘邓大军挺进大别山。</p><p>5、毛泽东提出的新民主主义革命的三大经济纲领是没收封建阶级的土地归农所有；没收垄断资本归新民主主义的国家所有；对民族工商业采取保护措施。</p><p>6、开始转变没收地主土地的标志是1946年中共中央发出的《关于清算、减租即土地问题的指示》（史称《五四指示》）。</p><p>7、中国共产党的土地改革总路线是依靠贫农，团结中农，有步骤的、又分别的消灭封建剥削制度，发展农业生产。</p><p>8、国统区人民斗争的高潮运动有昆明“一二·一”运动，抗暴运动,反饥饿、反内战、反迫害运动（五·二〇运动）。</p><p>9、中国最早宣告成立的自治区是内蒙古自治区。</p><p>10、中国各民主党派有中国国民党革命委员会（简称民革）；中国民主同盟（简称民盟）；中国民主建国会（简称民建）；中国民主促进会（简称民进）；中国农工民主党（简称工农党）；中国致公党（简称致公党）；九三学社；台湾民主自治同盟（简称台盟）。</p><p>11、“第三条道路”的幻想归于破灭的标志是民盟总部的解散。</p><p>12、中国共产党领导的多党合作制、政治协商格局形成于解放战争期间。</p><p>13、中华人民共和国成立前召开的最后一次会议是中共七届二中全会。</p><p><strong>简述题：</strong></p><p>1、简述抗日战争胜利以后的三种政治力量和三种建国方案？</p><p>一是地主阶级与买办性的大资产阶级的建国方案，此方案维护地主阶级和买办性的大资产阶级的根本利益；二是民族资产阶级的建国方案，此方案在中国行不通；三是工人阶级、农民阶级和城市小资产阶级的建国方案，此方案代表的是中国共产党，它希望建立一个工人阶级领导的、以工农联盟为基础的人民民主专政的人民共和国。</p><p>2、民族资产阶级的建国方案在中国行不通的原因？</p><p>一是帝国主义不容许中国成立一个独立、富强的资本主义国家；二是民族资产阶级在经济上、政治上的软弱性，使得它们没有勇气和能力去领导人民进行彻底反帝反封建的斗争，从而未建立资产阶级共和国扫清障碍。</p><p>3、如何理解毛泽东说“不但必须打败蒋介石，而且能够打败他”？</p><p>一是必须打败蒋介石是因为蒋介石发动的战争是一场在美帝国主义指挥下的反对中国民族独立和中国人民解放的反革命的战争。不用革命战争反对反革命战争，中国将变成黑暗的世界，中华民族的前途就会被断送；二是能够打败蒋介石，是因为蒋介石军事力量的优势和美国的援助，只是暂时的现象和临时起作用的因素。而蒋介石发动的战争的反人民性质，是人心的相背，则是经常性起作用的因素。</p><p>4、简述解放区经过土地政策出现的新面貌？</p><p>①广大农民对共产党更加信任和拥护，人民民主政权进一步巩固和加强；②广大农民从封建的生产关系中解放出来，生产积极性空前提高；③大批青壮年农民踊跃参军，配合解放军作战，人民解放战争有了巩固的后方和最基本的人力和物力保证。</p><p>5、试述国民党迅速走向崩溃的原因？</p><p>一是抗日胜利后，国民党把接受变成“劫收”，使民众期望破灭；二是国民党统治集团违背人民要求休养生息的意愿，实行反人民的内战政策；三是国民党统治集团将全国各阶层人民置于饥饿和死亡线上，迫使各阶层人民团结起来，同反动政府作斗争，除此以外，在无出路。</p><p>6、简述台湾少数民族地区的人民民主运动？</p><p>①1947年台湾的二二八起义；②1945年新疆省的“三区革命”；③1947年内蒙古自治政府宣告成立。</p><p>7、如何认识民主党派的历史意义？</p><p>一是重庆谈判期间，各民主党派同共产党一起反对国民党反动派的内战、独裁政策；二是在国民党发动全面内战时，民主党派同共产党保持一致；三是民主党派的许多成员积极参加共产党领导的爱国民主运动，有的为此流血牺牲；四是在人民解放战争转入战略反攻后各民主党派都公开宣言，站在人民革命一边。</p><p>8、简述七届二中全会的内容？</p><p>1949年3月，中国共产党在西柏坡村召开了七届二中全会。主要内容：一是规定了全国胜利后中国共产党在政治、经济、外交方面应当采取的基本政策；二是指出了中国有农业国转为工业国、有新民主主义社会转为社会主义的发展方向；三是在中国共产党自身建设的问题上，提出了“两个务必”的要求。</p><p>9、简述《论人民民主专政》的内容？</p><p>一是人民民主专政的基础是工农联盟；二是主要依靠工人阶级和农民阶级；三是为建立新中国，必须团结民族资产阶级；四是工人阶级领导的以工农联盟为基础的人民民主专政。</p><p>10、试述中国革命胜利的主要原因？</p><p>一是由于有了中国工人阶级的先锋队—中国共产党的领导；二是由于帝国主义、封建主义、官僚资本主义的残酷压迫，中国人民走上了反帝反封建反官僚主义斗争的伟大时代；三是中国革命之所以能够赢得胜利，同国际无产阶级和人民群众的支持也是分不开的。</p><p>11、简述中国革命胜利的基本经验？</p><p>一是建立广泛的统一战线；二是坚持革命的武装斗争；三是加强共产党自身的建设。</p><p>12、简述革命统一战线中的两个联盟及关系？</p><p>统一战线中存在着两个联盟：一个是劳动者的联盟，即工农联盟；一个是劳动者与非劳动者的联盟，主要是劳动者与民族资产阶级的联盟。 关系：这是辅助的、同时又是重要的。必须坚决依靠第一个联盟，争取建立和扩大第二个联盟。</p><p>13、为什么说“没有共产党就没有新中国”？</p><p>①中国共产党为工人阶级的政党，不仅代表着中国工人阶级的利益，而且代表着整个中华民族和全中国人民的利益；②中国共产党能够制定出适合中国情况的、符合中国人民利益的纲领、路线、方针和政策，为中国人民的斗争指明正确的方向。中国共产党人以行动表明了自己是最有远见、最富于牺牲精神，最坚定。而又最能虚心体察民情并依靠群众的坚强的革命者，从而赢得了广大中国人民的衷心拥护。</p><p><strong>第八章 社会主义基本制度的全面确立</strong></p><p><strong>选择题:</strong></p><p>1、西藏和平解放标志着中国大陆和平统一。</p><p>2、新中国的社会主义国营经济主要是通过没收官僚资本建立。</p><p>3、1950年七届三中全会，毛泽东的报告中指出要获得国家财政经济状况的根本好转，需要创造三个条件是指土地革命的完成，工商业的调整，国家机构经费的大量节俭。</p><p>4、“三反”运动是指反贪污、反浪费、反官僚主义。“五反”运动是指反行贿、反偷税漏税、反盗窃国家资财、反偷工减料、反盗窃国家经济情报。</p><p>5、1949年，第一个同中国建立外交关系的是苏联。</p><p>6、抗美援朝战争中，被任命为中国人民志愿军司令员兼政治委员的是彭德怀。</p><p>7、中国社会经济中存在着的五种成分分别是社会主义性质的国营经济，半社会主义性质的合作社经济，农民和手工业者的个性经济，私人资本主义经济和国家资本主义经济。</p><p>8、党在这个过渡时期的总路线的总任务，是实现“一化三改”即社会主义建设同社会主义改造的总路线。其主体是社会主义工业化。</p><p>9、对资本主义工商业进行社会主义改造是实行赎买政策，采取国家资本主义的形式，把资本主义工商业改造成为社会主义的。</p><p>10、国家资本主义经济是在人民政府管理之下，用各种形式和国营社会主义经济联系着，并受工人监督的资本主义经济。其初级形式是收购、加工、订货、统购、包销；高级形式是公私合营。</p><p><strong>简述题：</strong></p><p>1、为什么说新中国的成立是中国历史的新纪元？（新中国成立的伟大历史意义？）</p><p>一是帝国主义列强压迫中国、奴役中国人民的历史从此结束；二是宣告中国封建主义、官僚资本主义统治的历史从此结束；三是标志军阀割据。战乱频发、匪患不断的历史从此结束；四是从根本上改变了中国社会的发展历史；五是中国共产党成为全国范围内的执政党，总之，中华人民共和国的成立标志着中国的新民主主义革命取得胜利，标志着半殖民地半封建社会的结束和新民主主义社会的建立。</p><p>2、简述抗美援朝战争的意义？</p><p>抗美援朝的胜利，打击了美国的侵略和战争策略，保卫了新中国的安全，使全世界对中国刮目相看，新中国的国际威望空前提高拨，新中国的经济建设和社会改革赢得了一个相对稳定的和平环境。</p><p>3、简述新民主主义社会的特点和性质？</p><p>特点：新民主主义社会不是一个独立的社会形态，在经济上即有社会主义因素，又有资本主义因素；其性质具有过渡性。</p><p>4、为什么说通过社会主义道路实现国家工业化，这是最好的选择？</p><p>近代以来的历史表明，资本主义工业化的道路在中国是走不通的。从19世纪60年代末70年代初中国民族资本主义工业产生以来，由于受到外国垄断资本的压迫和本国封建生产关系的束缚，始终处于举步维艰的境地。在帝国主义时代，中国通过走资本主义道路实现现代化的可能性已经失去、。为了实现国家的工业化，中国必须走社会主义的道路。</p><p>5、为什么说过渡时期总路线反映了历史的必然？</p><p>一是社会主义工业化是国家独立和富强的必然要求和必要条件；二是资本主义经济力量弱小，发展困难，不可能成为中国工业起飞的基础；三是对个体农业进行社会主义改造，是保证工业发展、实现国家工业化的一个必要条件；四是当时的国际环境也促使中国选择社会主义。</p><p>6、试述一条有中国特点的社会主义的农业合作化道路？</p><p>一是在中国的条件下，可以走先合作化、后机械化的道路；二是通过互助组、初级社、高级社逐步过渡的方针；三是发展要坚持自愿和互利的原则；四是是否把增产作为衡量合作社是否办好的标准；五是把社会改造同技术改造相结合。</p><p>7、论述社会主义改造基本完成的意义？</p><p>一是社会主义改造的基本完成使社会主义的基本经济制度也建立起来了，是中国进入社会主义社会的主要标志；二是社会主义改造是由私有制到公有制的一场韦德的变革，使生产力从旧的生产关系束缚中解放出来，对生产力的发展直接起到了促进作用；三是通过社会主义改造，中国共产党创造性的完成了由新民主主义到社会主义的过渡，实现了中国历史上最伟大最深刻的社会变革，开始了中华民族伟大复兴的历史征程。</p><p><strong>第九章 社会主义建设在探索中曲折发展</strong></p><p><strong>选择题：</strong></p><p>1、毛泽东的《论十大关系》是共产党人开始探索社会主义建设道路的标志。</p><p>2、1961年中共提出的对国民经济实行的八字方针是“调整、巩固、充实、提高”。</p><p>3、1971年，文化大革命粉碎了江青、林彪两大反革命集团。</p><p>4、文化大革命的性质是一场由领导者错误发动，被反革命集团利用，给党、国家和各族人民带来严重灾难的内乱。</p><p>5、毛泽东的几大贡献：“二弹一星”的研制（1964年中国第一颗原子弹和1967年第一颗氢弹的爆发，1970年第一颗人造地球卫星的发射）；1971年中国恢复了在联合国的合法席位。</p><p>6、1972年中美建立外交关系。</p><p><strong>简述题：</strong></p><p>1、简述陈云提出的“三个主体、三个补充”的思想？</p><p>①国家经营是主体，个体经营为补充；②计划生产是主体，自由生产为补充；③国家市场是主体，自由市场为补充。</p><p>2、试述《关于正确处理人民内部矛盾的问题》的内容和意义？</p><p>内容：一是毛泽东提出要把正确处理人民内部矛盾作为国家政治生活的主题；二是毛泽东科学的分析了社会主义的基本矛盾仍然是生产力和生产关系、经济基础和上层建筑之间的矛盾。这些矛盾可以经过社会主义制度本身的自我调整和完善，不断地得到解决。这实际上为积极促进社会主义制度的自我完善和发展奠定了理论基石；三是毛泽东说社会主义社会存在着敌我之间和人民内部两类性质的矛盾，前者需要用专政的方法去解决，后者只能用民主的方法去解决。 意义：它是一篇重要的马克思主义文献，对中国社会主义事业具有长远的指导意义。</p><p>3、简述1957年的反右派斗争？</p><p>一是对极少数右派分子的进攻实行坚决反击，是完全正确和必要的；二是反右派斗争被严重的扩大化了。</p><p>4、简述1958年通过的“鼓足干劲、力争上游、多快好省的建设社会主义”的总路线？</p><p>一是反映了广大人民群众迫切要求改变国家经济文化落后状况的普遍愿望；二是其缺点是忽视了客观的经济规律。</p><p>5、如何认识错误的性质及其原因？</p><p>性质：中国共产党在全国建设社会主义时期所犯的严重错误，包括“文化大革命”在内，是探索中的错误，不是由社会主义制度本身所制造。原因：一是对于什么是社会主义、怎样建设社会主义的问题，还没有完全搞清楚；二是由于中国共产党把根本不属于阶级斗争的问题看做是阶级斗争，促成了阶级斗争的扩大化错误的产生；三是党的民主集中制和集体领导制度遭到严重破环，致使党无法依靠制度和集体的力量及时发现并纠正错误。</p><p>6、简述毛泽东等老一代革命家探索中国社会主义建设道路的理论贡献？</p><p>一是毛泽东论述了必须实行马克思主义与中国实际“第二次结合”的基本思想；二是提出了社会主义社会矛盾的学说；三是阐明了建设社会主义的基本方针。</p><p><strong>第十章 改革开放与现代化建设时期</strong></p><p><strong>选择题：</strong></p><p>1、历史决议评价毛泽东同志是伟大的马克思主义者，是伟大的无产阶级革命家、战略家和理论家。他的功绩是第一位的，错误是第二位的。</p><p>2、毛泽东思想是马克思列宁主义在中国的运用和发展，是被实践证明了的关于中国革命和建设的正确的理论原则和经营总结，是中国共产党集体智慧的结晶。</p><p>3、邓小平提出的社会主义精神文明建设的根本任务是培养有理想、有道德、有文化、有纪律的社会主义公民。</p><p>4、1987年中共十三大提出了社会主义初级阶段的理论和“一个中心、两个基本点”的基本路线。</p><p>5、我国经济体制改革的目标是建立社会主义经济体制。</p><p>6、改革、发展和稳定的关系是：稳定是前提，改革是动力，发展是目的，三者相互促进。</p><p>7、2001年，中国正式加入世界贸易组织。</p><p>8、1997年7月1日香港回归，1999年12月20日澳门回归。</p><p>9、1998年，中共十五大提出的“三讲”是指讲学习、讲政治、讲正气。</p><p>10、科学发展观的核心是以人为本，基本要求是全面协调可持续，方法是统筹兼顾。</p><p>11、和谐社会的特征是指民主法治、公平正义、诚信友爱、充满活力、安定有序、人与自然和谐相处。</p><p>12、社会主义核心价值体系的基本内容有马克思主义指导思想、中国特色社会主义共同理想、以爱国主义为核心的民族精神、以改革创新为核心的时代精神和社会主义荣辱观。</p><p>13、四位一体的内容有经济建设、政治建设、文化建设、社会建设。</p><p>14、和平发展的内涵：中国既通过争取和平的国际环境来发展自己，又通过自己的发展来促进世界和平。</p><p>15、新时期特点是改革开放，显著的成就是快速发展，突出的标志是与时俱进。</p><p>16、中国特色社会主义理论体系包括邓小平理论、“三个代表”重要思想和科学发展观。</p><p>17、20世纪以来，中国经历了三次历史性的巨大变化：一是辛亥革命，推翻了统治中国几千年的君主专制制度；、二是中华人民共和国的成立（1949年）和社会主义制度的建立（1956年）；三是改革开放（新时期）。</p><p><strong>简述题：</strong></p><p>1、为什么说中共十一届三中全会是新中国成立以来伟大的历史性转折？</p><p>1978年召开的中共十一届三中全会，一是冲破长期“左”的错误的严重束缚，否定了“两个凡是”的错误方针，评价了关于真理标准问题的讨论，否定“以阶级斗争为纲”的指导思想，作出了把工作重点转移到社会主义现代化建设上来和实行改革开放的战略决策，重新确立了马克思主义的思想路线、政治路线和组织路线；二是形成了以邓小平为核心的党的中央领导集体，以这次全会为起点，中国进入了改革开放和社会主义现代化建设的新时代。</p><p>2、论述社会主义的初级阶段的含义？</p><p>一是我国社会已经是社会主义社会；二是我国的社会主义社会还处在初级阶段。</p><p>3、简述“两个飞跃”的思想？</p><p>中国社会主义农业的改革和发展有两个飞跃：第一个飞跃是废除人民公社，实行家庭联产承包为主的责任制；第二个飞跃是发展集体经济。</p><p>4、简述“一个中国、两种制度”的构想？</p><p>在一个中国的前提下，国家的主体坚持社会主义制度，港澳台作为特别行政区保持原有的资本主义制度长期不变。</p><p>5、简述社会主义民主政治建设稳步推进的主要表现？</p><p>一是人民代表大会制度，中国共产党领导的多党合作和政治协商制度，进一步健全和完善，广泛的爱国统一战线继续得到巩固和发展；二是基层民主建设取得重大进展；三是社会主义法制建设取得显著成就，以宪法为基础的中国特色社会主义法律体系在逐步完备。</p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>中国近代史复习</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构（C语言版）期末复习整理</title>
    <url>/archives/27ff0a3a.html</url>
    <content><![CDATA[<!-- build time:Mon Dec 06 2021 20:38:19 GMT+0800 (中国标准时间) --><h3 id="第一章-数据结构概述"><a href="#第一章-数据结构概述" class="headerlink" title="第一章 数据结构概述"></a>第一章 数据结构概述</h3><h4 id="基本概念与术语"><a href="#基本概念与术语" class="headerlink" title="基本概念与术语"></a>基本概念与术语</h4><p>1． <strong>数据</strong>：数据是对客观事物的符号表示，在计算机科学中是指所有能输入到计算机中并被<br>计算机程序所处理的符号的总称。</p><ol start="2"><li><strong>数据元素</strong>：数据元素是数据的基本单位，是数据这个集合中的个体，也称之为元素，结点，顶点记录。<br>（补充：一个数据元素可由若干个 <strong>数据项</strong>组成。数据项是数据的不可分割的最小单位。）<br>3．数据对象：数据对象是具有相同性质的数据元素的集合，是数据的一个子集。（有时候也<br>叫做属性。）<br>4． <strong>数据结构</strong>：数据结构是相互之间存在一种或多种特定关系的数据元素的集合。<br>（1）数据的逻辑结构：数据的逻辑结构是指数据元素之间存在的固有逻辑关系，常称为数<br>据结构。<br>数据的逻辑结构是从数据元素之间存在的逻辑关系上描述数据与数据的存储无关，是<br>独立于计算机的。<br>依据数据元素之间的关系，可以把数据的逻辑结构分成以下几种：</li><li><strong>集合</strong>：数据中的数据元素之间除了“同属于一个集合“的关系以外，没有其他关系。</li><li><strong>线性结构</strong>：结构中的数据元素之间存在“一对一“的关系。若结构为非空集合，则除了第<br>一个元素之外，和最后一个元素之外，其他每个元素都只有一个直接前驱和一个直接后继。</li><li><strong>树形结构</strong>：结构中的数据元素之间存在“一对多“的关系。若数据为非空集，则除了第一<br>个元素（根）之外，其它 每个数据元素都只有一个直接前驱，以及多个或零个 直<br>接后继。</li><li><strong>图状结构</strong>：（1）结构中的数据元素存在“多对多”的关系。若结构为非空集，折每个数据可有<br>多个（或零个）直接后继。<br>（2）数据的存储结构：数据元素及其关系在计算机内的表示称为数据的存储结构。<br>想要计算机处理数据，就必须把数据的逻辑结构映射为数据的存储结构。逻辑结构可以映射<br>为以下两种存储结构：<ol><li><strong>顺序存储结构</strong>：把逻辑上相邻的数据元素存储在物理位置也相邻的存储单元中，借助元素<br>在存储器中的相对位置来表示数据之间的逻辑关系。</li><li><strong>链式存储结构</strong>：借助指针表达数据元素之间的逻辑关系。不要求逻辑上相邻的数据元素物<br>理位置上也相邻。</li></ol></li><li><strong>时间复杂度分析</strong>：1.常量阶：算法的时间复杂度与问题规模 <strong>n 无关系</strong> T(n)=O(1)<br>2.线性阶：算法的时间复杂度与问题规模 <strong>n 成线性关系</strong> T(n)=O(n)<br>3.平方阶和立方阶：一般为 <strong>循环的嵌套</strong>，循环体最后条件为 i++<br>时间复杂度的大小比较：<br>O(1)&lt; O(log 2 n)&lt; O(n )&lt; O(n log 2 n)&lt; O(n2)&lt; O(n3)&lt; O(2 n )&lt;O(n!)&lt;O(n n)</li></ol><p>6.<strong>算法与程序</strong>：<br>（1）算法的 5 个特性<br>1、 输入：有零个或多个输入<br>2、 输出：有一个或多个输出<br>3、有穷性：要求序列中的指令是有限的；每条指令的执行包含有限的工作量；整个指令序<br>列的执行在有限的时间内结束。（程序与算法的区别在于，程序不需要有有穷性）<br>4、确定性：算法中的每一个步骤都必须是确定的，而不应当含糊、模棱两可。没有歧义。<br>5、可行性：算法中的每一个步骤都应当能被有效的执行，并得到确定的结果。<br>（2）.算法设计的要求：<br>1、正确性（达到预期效果，满足问题需求）<br>2、健壮性（能处理合法数据，也能对不合法的数据作出反应，不会产生不<br>可预期的后果）<br>3、可读性（要求算法易于理解，便于分析）<br>4、可修改可扩展性<br>5、高效率（较好的时空性能 ）<br>补充内容：<br>1、名词解释：数据结构、二元组<br>数据结构就是相互之间存在一种或多种特定关系的数据元素的集合。<br>二元组就是一种用来表示某个数据对象以及各个元素之间关系的有限集合。<br>2、根据数据元素之间关系的不同，数据的逻辑结构可以分为集合、线性结构、树形结构和<br>图状结构四种类型。<br>3、常见的数据存储结构一般有两种类型，它们分别是顺序存储结构、链式存储结构<br>6.在一般情况下，一个算法的时间复杂度是问题规模的函数<br>7.常见时间复杂度有：常数阶 O（1）、线性阶 O（n）、对数阶 O（log 2 n）、平方阶 O(n^2)、<br>指数阶 O(2^n)。通常认为，具有常数阶量级的算法是好算法，而具有指数阶量级的算法是<br>差算法。</p><h3 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h3><p>定义： <strong>线性表</strong>是 n 个数据元素的有限序列。 一个数据元素可由若干个 <strong>数据项</strong>组成。</p><ol><li>顺序表结构<br>线性表的顺序存储是指在内存中 <strong>用地址连续</strong>的一块存储空间顺序存放线性表的各元素，用这<br>种存储形式存储的线性表称为顺序表。</li><li>单链表<br>（1） 链表结点结构<br>线性表中的数据元素可以 <strong>用任意的一组存储单元</strong>来存储，用指针表示逻辑关系逻辑相邻的两<br>元素的存储空间可以是不连续的。<br>（2） 链表操作算法：初始化、插入、输出、删除、遍历<br><strong>初始化：p=(struct student <code>*</code>)malloc(sizeof(struct student));<br>插入： p-&gt;next=head-&gt;next; head-&gt;next=p;<br>输出：printf(“%d”,p-&gt;data);<br>删除：q=p-&gt;next; p-&gt;next = q-&gt;next ; free(q);<br>结点遍历： for(p=head;p;p=p-&gt;next);*</strong><br>补充内容：<br>1、线性表中，第一个元素没有直接前驱，最后一个元素没有直接后驱。<br>2、在一个单链表中，若 p 所指结点是 q 所指结点的前驱结点，则<strong>删除结点 q</strong> 的操作语句为<br><strong>P-&gt;next = q-&gt;next ; free(q);</strong><br>3、在长度为 N 的顺序表中，插入一个新元素平均需要移动表中 N/2 个元素，删除一个元素<br>平均需要移动（N-1）/2 个元素。<br>4、若线性表的主要操作是在最后一个元素之后插入一个元素或删除最后一个元素，则采用<br><strong>顺序表</strong>存储结构最节省运算时间。<br>5、已知顺序表中每个元素占用 3 个存储单元，第 13 个元素的存储地址为 336，则顺序表的<br>首地址为 300。（第 n 个元素的地址即首地址+(n-1)<em>每个元素的存储空间，如 a[12]（第 13<br>个元素）的地址=a[0]+12</em>3）<br>6、设有一带头结点单链表 L，请编写该单链表的初始化，插入、输出和删除函数。（函数名<br>自定义）<br>结点定义：</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype; <span class="comment">//结点数据类型，假设为 int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="comment">//结点结构</span></span><br><span class="line">datatype data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span> <span class="comment">//双向链表还应加上*previous</span></span><br><span class="line">&#125; Lnode, * pointer ; <span class="comment">//结点类型,结点指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> pointer lklist; <span class="comment">//单链表类型，即头指针类型</span></span><br><span class="line"><span class="comment">//1.初始化：</span></span><br><span class="line"><span class="function">lklist <span class="title">initlist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">pointer head;</span><br><span class="line">head=<span class="keyword">new</span> node;<span class="comment">//这是 C++做法</span></span><br><span class="line"><span class="comment">//head=( pointer)malloc(sizeof(Lnode)); 这是 C 语言做法</span></span><br><span class="line">head-&gt;next=<span class="literal">NULL</span>; <span class="comment">//循环链表则是 head-&gt;next=head;</span></span><br><span class="line"><span class="comment">//双向链表应加上 head-&gt;previos=NULL;</span></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.插入：（C 语言中需要把 head 转化为全局变量才能实现此程序）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(lklist head,datatype x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">pointer q,s;</span><br><span class="line">q=<span class="built_in">get</span>(head,i<span class="number">-1</span>); <span class="comment">//找第 i-1 个点</span></span><br><span class="line"><span class="keyword">if</span>(q==<span class="literal">NULL</span>) <span class="comment">//无第 i-1 点，即 i&lt;1 或 i&gt;n+1 时</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;”非法插入位置!\n”; <span class="comment">//这是 C++做法，即 C 语言中的 printf(“非法插入位置!\n”);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">s=<span class="keyword">new</span> node;<span class="comment">//生成新结点 即 C 语言中的 s=( pointer)malloc(sizeof(Lnode));</span></span><br><span class="line">s-&gt;data=x;</span><br><span class="line">s-&gt;next=q-&gt;next; <span class="comment">//新点的后继是原第 i 个点</span></span><br><span class="line">q-&gt;next=s; <span class="comment">//原第 i-1 个点的后继是新点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.删除：（C 语言中需要把 head 转化为全局变量才能实现此程序）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(lklist head,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">pointer p,q;</span><br><span class="line">q=<span class="built_in">get</span>(head,i<span class="number">-1</span>); <span class="comment">//找待删点的直接前趋</span></span><br><span class="line"><span class="keyword">if</span>(q==<span class="literal">NULL</span> || q-&gt;next==<span class="literal">NULL</span>) <span class="comment">//即 i&lt;1 或 i&gt;n 时</span></span><br><span class="line">&#123;<span class="built_in">cout</span>&lt;&lt;”非法删除位置!\n”;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">p=q-&gt;next; <span class="comment">//保存待删点地址</span></span><br><span class="line">q-&gt;next=p-&gt;next; <span class="comment">//修改前趋的后继指针</span></span><br><span class="line"><span class="keyword">delete</span> p; <span class="comment">//释放结点 即 C 语言中的 free(p);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//删除成功</span></span><br></pre></td></tr></table></figure><ol><li>不带头结点的单链表 head 为空的判定条件是(A )<br>A. head=NULL B. head-&gt;next=NULL C. head-&gt;next=head D. head!=NULL</li><li>带头结点的单链表 head 为空的判定条件是(B )<br>A. head=NULL B. head-&gt;next=NULL C. head-&gt;next=head D. head!=NULL</li><li>在一个单链表中，若 p 所指结点不是最后结点，在 p 之后插入 s 所指结点，则执行(B )<br>A. s-&gt;next=p; p-&gt;next=s; B. s-&gt;next=p-&gt;next; p-&gt;next=s;<br>C. s-&gt;next=p-&gt;next; p=s; D. p-&gt;next=s; s-&gt;next=p;</li><li>在一个单链表中，若删除 p 所指结点的后续结点，则执行(A )<br>A. p-&gt;next=p-&gt;next-&gt;next;<br>B. p=p-&gt;next; p-&gt;next=p-&gt;next-&gt;next;<br>C. p-&gt;next=p-&gt;next<br>D. p=p-&gt;next-&gt;next</li><li>从一个具有 n 个结点的有序单链表中查找其值等于 x 结点时，在查找成功的情况下，需<br>平均比较（B ）个结点。<br>A. n B. n/2 C. (n-1)/2 D. O(n ㏒ 2n)</li><li>给定有 n 个元素的向量，建立一个有序单链表的时间复杂度（B）<br>A.O(1) B.O(n) C.O(n2) D.O(n ㏒ 2n)<br>7.在一个具有 n 个结点的有序单链表中插入一个新结点并仍然有序的时间复杂度是(B)<br>A.O(1) B.O(n) C.O(n2) D.O(n ㏒ 2n)</li><li>在一个单链表中删除 q 所指结点时，应执行如下操作：<br>q=p-&gt;next;<br>p-&gt;next=( p-&gt;next-&gt;next );<br>free(q);//这种题目靠一根指针是没有办法完成的，必须要借助第二根指针。</li><li>在一个单链表中 p 所指结点之后插入一个 s 所指结点时，应执行：<br>s-&gt;next=( p-&gt;next )<br>p-&gt;next=(s)操作。</li><li>对于一个具有 n 个节点的单链表 ,在已知所指结点后插入一个新结点的时间复杂度是(O<br>（1）)；在给定值为 x 的结点后插入一个新结点的时间复杂度是（O(n)）。<br>11.问答题<br>线性表可用顺序表或链表存储。试问：<br>(1) 两种存储表示各有哪些主要优缺点?<br>顺序表的存储效率高，存取速度快。但它的空间大小一经定义，在程序整个运行期间不会发<br>生改变，因此，不易扩充。同时，由于在插入或删除时，为保持原有次序，平均需要移动一<br>半(或近一半)元素，修改效率不高。<br>链接存储表示的存储空间一般在程序的运行过程中动态分配和释放，且只要存储器中还有空<br>间，就不会产生存储溢出的问题。同时在插入和删除时不需要保持数据元素原来的物理顺序，<br>只需要保持原来的逻辑顺序，因此不必移动数据，只需修改它们的链接指针，修改效率较高。<br>但存取表中的数据元素时，只能循链顺序访问，因此存取效率不高。<br>(2) 若表的总数基本稳定，且很少进行插入和删除，但要求以最快的速度存取表中的元素，<br>这时，应采用哪种存储表示？为什么？<br>应采用顺序存储表示。因为顺序存储表示的存取速度快，但修改效率低。若表的总数基本稳<br>定，且很少进行插入和删除，但要求以最快的速度存取表中的元素，这时采用顺序存储表示<br>较好。</li></ol><h3 id="第三章-栈和队列"><a href="#第三章-栈和队列" class="headerlink" title="第三章 栈和队列"></a>第三章 栈和队列</h3><h4 id="1-栈"><a href="#1-栈" class="headerlink" title="1. 栈"></a>1. 栈</h4><h5 id="（1）-栈的结构与定义"><a href="#（1）-栈的结构与定义" class="headerlink" title="（1） 栈的结构与定义"></a>（1） 栈的结构与定义</h5><p>定义：限定仅在表尾进行插入或删除操作的线性表。<br>结构：<br>typedef struct list{<br>int listsize; //栈的容量<br>struct list *head; //栈顶指针<br>struct list *base; //栈底指针<br>}</p><h5 id="（2）-顺序栈操作算法："><a href="#（2）-顺序栈操作算法：" class="headerlink" title="（2） 顺序栈操作算法："></a>（2） 顺序栈操作算法：</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化栈</span></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack *S)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 分配初始空间</span></span><br><span class="line">    S-&gt;base = (ElemType *) <span class="built_in">malloc</span>(Stack_Init_Size * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!S-&gt;base) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    S-&gt;top = S-&gt;base; <span class="comment">/// 栈顶与栈底相同</span></span><br><span class="line">    S-&gt;stack_size = Stack_Init_Size; <span class="comment">// 栈的最大长度等于初始长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空，只需要判断栈顶指针与栈底指针是否相同即可</span></span><br><span class="line"><span class="function">Status <span class="title">EmptyStack</span><span class="params">(SqStack *S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;base == S-&gt;top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取栈的实际长度，栈顶减去栈底指针即为栈的长度</span></span><br><span class="line"><span class="function">Status <span class="title">LengthStack</span><span class="params">(SqStack *S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S-&gt;top == S-&gt;base) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Status) (S-&gt;top - S-&gt;base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取栈顶的元素，参数e用来存放栈顶的元素</span></span><br><span class="line"><span class="function">Status <span class="title">GetTopStack</span><span class="params">(SqStack *S, ElemType *e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S-&gt;top == S-&gt;base) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    *e = *(S-&gt;top - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进栈，参数e是要进栈的元素</span></span><br><span class="line"><span class="function">Status <span class="title">PushStack</span><span class="params">(SqStack *S, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若栈的最大长度不会够用时，重新开辟，增大长度</span></span><br><span class="line">    <span class="keyword">if</span> (S-&gt;top - S-&gt;base &gt;= S-&gt;stack_size) &#123;</span><br><span class="line">        S-&gt;base = (ElemType *)<span class="built_in">realloc</span>(S-&gt;base, (S-&gt;stack_size + StackIncrement) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">        <span class="keyword">if</span> (!S-&gt;base) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 栈顶指针为栈底指针加上栈之前的最大长度</span></span><br><span class="line">        S-&gt;top = S-&gt;base + S-&gt;stack_size;</span><br><span class="line">        <span class="comment">// 栈当前的最大长度等于栈之前的最大长度与增加的长度之和</span></span><br><span class="line">        S-&gt;stack_size += StackIncrement;</span><br><span class="line">    &#125;</span><br><span class="line">    *S-&gt;top++ = e; <span class="comment">// 先赋值，后栈顶指针上移</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈，参数e用来存放出栈的元素</span></span><br><span class="line"><span class="function">Status <span class="title">PopStack</span><span class="params">(SqStack *S, ElemType *e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S-&gt;base == S-&gt;top) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *e = *--S-&gt;top; <span class="comment">// 栈顶指针先下移，后赋值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁栈，释放栈空间，栈顶栈底指针置为NULL，长度置为0</span></span><br><span class="line"><span class="function">Status <span class="title">DestroyStack</span><span class="params">(SqStack *S)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(S-&gt;base);</span><br><span class="line">    S-&gt;base = S-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">    S-&gt;stack_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历栈，依次打印每个元素</span></span><br><span class="line"><span class="function">Status <span class="title">StackTraverse</span><span class="params">(SqStack *S)</span> </span>&#123;</span><br><span class="line">    ElemType *p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (S-&gt;top == S-&gt;base) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Stack is NULL.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = S-&gt;top;</span><br><span class="line">    <span class="comment">// 由栈顶依次向下遍历</span></span><br><span class="line">    <span class="keyword">while</span> (p &gt; S-&gt;base) &#123;</span><br><span class="line">        p--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, *p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3） 链栈操作算法<br>结构：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>&#123;</span></span><br><span class="line">	 ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode, *LinkStack;</span><br></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(LinkStack &amp;S)</span></span>&#123;</span><br><span class="line">	<span class="comment">//构造一个空栈，栈顶指针置为空 </span></span><br><span class="line">	S = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入栈：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(LinkStack &amp;S,ElemType e)</span></span>&#123;</span><br><span class="line">	    LinkStack p;<span class="comment">//定义p </span></span><br><span class="line">		p=<span class="keyword">new</span> StackNode;<span class="comment">//生成新结点 </span></span><br><span class="line">		p-&gt;data=e;<span class="comment">//e赋给新结点的数据域 </span></span><br><span class="line">		p-&gt;next=S; <span class="comment">//新结点插入栈顶 </span></span><br><span class="line">		S=p;<span class="comment">//修改栈顶指针为p</span></span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出栈：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(LinkStack &amp;S,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">	LinkStack p;<span class="comment">//定义p </span></span><br><span class="line">	<span class="keyword">if</span>(S==<span class="literal">NULL</span>) <span class="keyword">return</span> ERROR;<span class="comment">//栈空 </span></span><br><span class="line">	e=S-&gt;data;<span class="comment">//将栈顶元素赋给e </span></span><br><span class="line">	p=S;<span class="comment">//p临时保存栈顶元素以备释放 </span></span><br><span class="line">	S=S-&gt;next;<span class="comment">//修改栈顶指针 </span></span><br><span class="line">	<span class="keyword">delete</span> p;<span class="comment">//释放空间 </span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-队列"><a href="#2-队列" class="headerlink" title="2. 队列"></a>2. 队列</h4><h5 id="（1）-队列的定义"><a href="#（1）-队列的定义" class="headerlink" title="（1） 队列的定义"></a>（1） 队列的定义</h5><p>定义：只允许在表的一端进行插入，而在另一端删除元素。</p><p>补充内容：<br>1、一个栈的入栈序列为“ABCDE”，则以下不可能的出栈序列是（B）<br>A. BCDAE B. EDACB C. BCADE D. AEDCB<br>2、栈的顺序表示中，用 TOP 表示栈顶元素，那么栈空的条件是（D）<br>A. TOP==STACKSIZE B. TOP==1 C. TOP==0 D. TOP==-1<br>3、允许在一端插入，在另一端删除的线性表称为队列。插入的一端为表头，删除的一端为<br>表尾。<br>4、栈的特点是先进后出，队列的特点是先进先出。<br>5、对于栈和队列，无论他们采用顺序存储结构还是链式存储结构，进行插入和删除操作的<br>时间复杂度都是 O(1)（即与已有元素 N 无关）。<br>6、已知链栈 Q，编写函数判断栈空，如果栈空则进行入栈操作，否则出栈并输出。（要求判<br>断栈空、出栈、入栈用函数实现）（详看考点 2）<br>7.出队与取队头元素的区别：出队就是删除对头的数据元素，取队头元素是获取对头的数据<br>元素值，不需要删除。<br>8.链栈与顺序栈相比，比较明显的优点是：（D）<br>A.插入操作比较容易 B.删除操作比较容易<br>C.不会出现栈空的情况 D.不会出现栈满的情况</p><p><strong>考点 1：队列的编程：</strong><br>结构：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> date;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">QueuePtr front;</span><br><span class="line">QueuePtr rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><p>创建：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkQueue <span class="title">InitQueue</span><span class="params">(LinkQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Q.front=Q.rear=(QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">Q.front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> (Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入队：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkQueue <span class="title">EnQueue</span><span class="params">(LinkQueue Q,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QueuePtr p;</span><br><span class="line">	 p=(QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    p-&gt;date=e;</span><br><span class="line">    p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    Q.rear-&gt;next=p;</span><br><span class="line">    Q.rear=p;<span class="keyword">return</span> (Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出队：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkQueue <span class="title">DeQueue</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> e;QueuePtr p;</span><br><span class="line">    p=Q.front-&gt;next;</span><br><span class="line">    e=p-&gt;date;</span><br><span class="line">    Q.front=p-&gt;next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,e);</span><br><span class="line">    <span class="keyword">if</span>(Q.rear==p)Q.rear=Q.front=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> (Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>考点 2：栈的编程：</strong><br>上述已有具体实现代码</p><h3 id="第四章-串-（不是重点内容）"><a href="#第四章-串-（不是重点内容）" class="headerlink" title="第四章 串 （不是重点内容）"></a>第四章 串 （不是重点内容）</h3><p>1.串是由零个或多个字符组成的有限序列<br>2.串的赋值：x=’abc’;或 x[ ]=’abc’;</p><h3 id="第五章-数组和广义表-（不是重点内容）"><a href="#第五章-数组和广义表-（不是重点内容）" class="headerlink" title="第五章 数组和广义表 （不是重点内容）"></a>第五章 数组和广义表 （不是重点内容）</h3><ol><li>多维数组中某数组元素的 position 求解。一般是给出数组元素的首元素地址和每个元素占<br>用的地址空间并组给出多维数组的维数，然后要求你求出该数组中的某个元素所在的位置。</li><li>明确 <strong>按行存储</strong>和 <strong>按列存储</strong>的区别和联系，并能够按照这两种不同的存储方式求解 1 中类<br>型的题。</li><li>将特殊矩阵中的元素按相应的换算方式存入数组中。这些矩阵包括：对称矩阵，三角矩<br>阵，具有某种特点的稀疏矩阵等。熟悉稀疏矩阵的三种不同存储方式： 三元组，带辅助行向<br>量的二元组， <strong>十字链表</strong>存储。掌握将稀疏矩阵的三元组或二元组向十字链表进行转换的算法。</li></ol><p>补充内容：<br>三元组：<br>结构：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="keyword">int</span> i,j; <span class="comment">//元素行下标及列下标int e; //元素值&#125;Triple;typedef struct&#123;int mu,nu,tu; //矩阵的行数、列数、非零元素个数Triple data[MAXSIZE+1]; //矩阵包含的三元组表，data[0]未用&#125;TSMatrix;</span></span><br></pre></td></tr></table></figure><p>十字链表：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span>&#123;</span><span class="keyword">int</span> i,j; <span class="comment">//元素行下标及列下标int e; //元素值struct OLNode *right,*down; //行的后继以及列的后继&#125; OLNode，*OLink;typedef struct&#123;int mu,nu,tu; //矩阵的行数、列数、非零元素个数OLink *rhead,*chead; //行和列的表头指针组的首地址&#125;CrossList;CrossList Creat（CrossList M）&#123;int m,n,t;scanf(“%d%d%d”,&amp;m,&amp;n,&amp;t);M.mu=m;M.nu=n;M.tu=t;M.rhead=( OLink *)malloc((m+1)*sizeof(OLink)); //开辟行表头指针组M.chead=( OLink *)malloc((n+1)*sizeof(OLink)); //开辟行列头指针组M.rhead[]=M.chead[]=NULL; //初始化…… //接下来就是赋值和入链｝</span></span><br></pre></td></tr></table></figure><h3 id="第六章-树和二叉树"><a href="#第六章-树和二叉树" class="headerlink" title="第六章 树和二叉树"></a>第六章 树和二叉树</h3><h4 id="1．-树"><a href="#1．-树" class="headerlink" title="1． 树"></a>1． 树</h4><p><strong>（1） 树的概念及术语</strong><br><strong>树</strong> ：n（n≥0）个结点的有限集合。当 n＝0 时，称为空树；任意一棵非空树满足以下条件：<br>⑴ 有且仅有一个特定的称为根的结点；<br>⑵ 当 n＞1 时，除根结点之外的其余结点被分成 m（m&gt;0）个互不相交的有限集合<br>T1,T2,… ,Tm，其中每个集合又是一棵树，并称为这个根结点的子树。<br><strong>（2） 结点的度：</strong> 结点所拥有的子树的个数。<br>树的度：树中所有结点的度的最大值。<br><strong>（3） 叶子结点：</strong> 度为 0 的结点，也称为终端结点。<br>分支结点：度不为 0 的结点，也称为非终端结点。<br><strong>（4）孩子、双亲</strong> ：树中某结点的子树的根结点称为这个结点的孩子结点，这个结点称为它<br>孩子结点的双亲结点；<br>兄弟： 具有同一个双亲的孩子结点互称为兄弟。<br><strong>（5）路径：</strong> 如果树的结点序列 n1, n2, …, nk 有如下关系：结点 ni 是 ni+1 的双亲（1&lt;=i&lt;k），<br>则把 n1, n2, …, nk 称为一条由 n1 至 nk 的路径；路径上经过的边的个数称为路径长度。<br><strong>（6）祖先、子孙：</strong> 在树中，如果有一条路径从结点 x 到结点 y，那么 x 就称为 y 的祖先，<br>而 y 称为 x 的子孙。<br><strong>（7）结点所在层数：</strong> 根结点的层数为 1；对其余任何结点，若某结点在第 k 层，则其孩子<br>结点在第 k+1 层。<br>树的深度： 树中所有结点的最大层数，也称高度。<br><strong>（8）层序编号：</strong> 将树中结点按照从上层到下层、同层从左到右的次序依次给他们编以从 1<br>开始的连续自然数。<br><strong>（9）有序树、无序树：</strong> 如果一棵树中结点的各子树从左到右是有次序的，称这棵树为有序<br>树；反之，称为无序树。数据结构中讨论的一般都是有序树<br><strong>（10）</strong> 树通常有前序（根）遍历、后序（根）遍历和层序（次）遍历三种方式（树，<br>不是二叉树，没中序遍历。)</p><h4 id="2．-二叉树"><a href="#2．-二叉树" class="headerlink" title="2． 二叉树"></a>2． 二叉树</h4><p>（1）二叉树的定义：二叉树是 n（n≥0）个结点的有限集合，该集合或者为空集（称为空<br>二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉<br>树组成。</p><p>满二叉树：在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在<br>同一层上。<br>（满二叉树的特点：叶子只能出现在最下一层；只有度为 0 和度为 2 的结点。）<br>完全二叉树：对一棵具有 n 个结点的二叉树按层序编号，如果编号为 i（1≤i≤n）的结点与<br>同样深度的满二叉树中编号为 i 的结点在二叉树中的位置完全相同。<br>完全二叉树的特点：<br>1.在满二叉树中，从最后一个结点开始，连续去掉任意个结点，即是一棵完全二叉树。<br>2.叶子结点只能出现在最下两层，且最下层的叶子结点都集中在二叉树的左部；</p><ol start="3"><li>完全二叉树中如果有度为 1 的结点，只可能有一个，且该结点只有左孩子。</li><li>深度为 k 的完全二叉树在 k-1 层上一定是满二叉树。</li></ol><p>（2）二叉树的性质：<br>性质 1：二叉树的第 i 层上最多有 2i-1 个结点（i≥1）。<br>性质 2： 一棵深度为 k 的二叉树中，最多有 2k-1 个结点，最少有 k 个结点。深度为 k<br>且具有 2k-1 个结点的二叉树一定是满二叉树<br>性质 3：在一棵二叉树中，如果叶子结点数为 n0，度为 2 的结点数为 n2，则有: n0＝n2<br>＋1。（一个结点的度就是指它放出的射线）<br>性质 4：具有 n 个结点的完全二叉树的深度为 log2n +1。<br>性质 5： 对一棵具有 n 个结点的完全二叉树中从 1 开始按层序编号，则对于任意的序<br>号为 i（1≤i≤n）的结点（简称为结点 i），有：<br>（1）如果 i＞1，则结点 i 的双亲结点的序号为 i/2；如果 i＝1，则结点 i 是根结点，无双<br>亲结点。<br>（2）如果 2i≤n，则结点 i 的左孩子的序号为 2i；如果 2i＞n，则结点 i 无左孩子。<br>（3）如果 2i＋1≤n，则结点 i 的右孩子的序号为 2i＋1；如果 2i＋1＞n，则结点 i 无右孩子。</p><h4 id="3．-二叉树的遍历（递归调用与访问的顺序不同而产生不同的遍历方法）"><a href="#3．-二叉树的遍历（递归调用与访问的顺序不同而产生不同的遍历方法）" class="headerlink" title="3． 二叉树的遍历（递归调用与访问的顺序不同而产生不同的遍历方法）"></a>3． 二叉树的遍历（递归调用与访问的顺序不同而产生不同的遍历方法）</h4><p>（1） 先序遍历</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XianXu</span><span class="params">(BiTree T)</span></span>&#123;<span class="keyword">if</span>(T)&#123;<span class="built_in">printf</span>(<span class="string">"%c"</span>,T-&gt;data); <span class="comment">//先访问XianXu(T-&gt;lchild); //再继续遍历XianXu(T-&gt;rchild);&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>（2） 中序遍历<br>（3） 后序遍历</p><h4 id="4-森林与二叉树的转换"><a href="#4-森林与二叉树的转换" class="headerlink" title="4. 森林与二叉树的转换"></a>4. 森林与二叉树的转换</h4><p>（1）同级以左为亲，即左一结点的右孩子是与它同级的右一结点<br>（2）只认最左路线为亲子路线，即结点的左孩子是它下一级结点的最左的元素</p><h4 id="5-哈夫曼树"><a href="#5-哈夫曼树" class="headerlink" title="5. 哈夫曼树"></a>5. 哈夫曼树</h4><p>(1）哈夫曼树的基本概念：<br>哈夫曼树：给定一组具有确定权值的叶子结点， <strong>带权路径长度</strong>最小的二叉树。<br>(2）哈夫曼树的特点：</p><ol><li>权值越大的叶子结点越靠近根结点，而权值越小的叶子结点越远离根结点。</li><li>只有度为 0（叶子结点）和度为 2（分支结点）的结点，不存在度为 1 的结点.<br>（3）哈夫曼树的构造算法思想及构造过程（森林与 哈夫曼编码）<br>就是求各权值和路径相乘之后叠加的最小值。</li></ol><p>1、已知一棵完全二叉树有 47 个结点，则该二叉树有（C）个叶子结点。<br>A. 6 B. 12 C. 24 D.48<br>解法如下：<br>1+2+4+8+16=31 计算从第一层到 n-1 层的结点个数<br>47-31=16 计算第 n 层的叶子结点个数<br>16-16/2=8 计算第 n-1 层的叶子结点个数<br>所以，叶子结点数=16+8=24 计算第 n 层和第 n-1 层的总叶子结点数<br>2、已知遍历一棵二叉树的前序序列 ABCDEFG 和中序序列 CBEDAFG，那么是下面哪棵树<br>（C ）。<br>C 图如下：<br>A<br>↙　 ↘<br>Ｂ　　　F<br>↙ 　↘ 　　　↘<br>C 　　　D 　　　　 G<br>↙<br>E<br>4、完全二叉树必须满足的条件为: ：一棵具有 n 个结点的二叉树，它的结构与满二叉树的<br>前 n 个结点的的结构相同。<br>5、哈夫曼树不存在度为 1 的结点。<br>6、有 5 个带权结点，其权值分别为 2，5，3，7，11，根据哈夫曼算法构建该树，并计算该<br>树的带权路径长度。（构建哈夫曼树，很简单，从小开始，计算相加，然后把所有叶子结点<br>乘以等级数字然后相加。也即是：带权路径长度=叶结点的权值<em>路径长度）<br>7.试找出分别满足下列条件的所有二叉树：<br>⑴ 前序序列和中序序列相同：*</em>只有右子树**<br>⑵ 中序序列和后序序列相同：<strong>只有左子树</strong><br>⑶ 前序序列和后序序列相同：<strong>只有根，空二叉树</strong></p><h3 id="第七章-图"><a href="#第七章-图" class="headerlink" title="第七章 图"></a>第七章 图</h3><h4 id="1-图的基本概念："><a href="#1-图的基本概念：" class="headerlink" title="1. 图的基本概念："></a>1. 图的基本概念：</h4><p>图的结点之间的关系可以是任意的，图中任意两个数据元素之间都可能相关。<br>设图有 n 个顶点，则：<br>有 1/2 n(n-1)条边的无向图称为 <strong>完全图</strong><br>有 n（n-1）条弧的有向图称为 <strong>有向完全图</strong><br>元素被多少条弧的箭头所指，它的 <strong>入度</strong>就为多少；反之，出度。<br>第一个顶点和最后一个顶点相同的路径叫做 <strong>回路</strong>或<strong>环</strong> 环<br>顶点不重复出现的路径叫 <strong>简单路径</strong><br>若图中任意两个顶点之间存在路径（不一定是直接相连），则称作 <strong>连通图</strong>。</p><h4 id="2-邻接矩阵："><a href="#2-邻接矩阵：" class="headerlink" title="2. 邻接矩阵："></a>2. 邻接矩阵：</h4><p>．<br>W i,j &lt;V i ，V j &gt; ∈VR<br>邻接矩阵的定义： A[i][j]={<br>0 即 VR 中不存在 &lt;V i ，V j &gt;时</p><h4 id="3-图的遍历"><a href="#3-图的遍历" class="headerlink" title="3. 图的遍历"></a>3. 图的遍历</h4><p>（1）深度优先遍历<br>步骤：1.从任意顶点开始访问。<br>2.访问后把该元素对应的访问标志赋值为 1 表示已访问该数据元素<br>3.寻找与其有关未被访问的所有邻接顶点，并从该顶点开始进行访问</p><ol start="4"><li>重复 2、3 步骤直到该连通图的所有顶点均已访问完毕<br>（2）广度优先遍历<br>步骤：1.从任意顶点开始访问。<br>2.访问后把该元素对应的访问标志赋值为 1 表示已访问该数据元素<br>3.寻找与其有关未被访问的邻接顶点，并按顺序入列直到所有邻接顶点均<br>已访问完毕<br>4.把最先入列的顶点出列，以它为顶点开始访问</li><li>重复 2、3、4 步骤直到该连通图的所有顶点均已访问完毕</li></ol><h3 id="第八九十章"><a href="#第八九十章" class="headerlink" title="第八九十章"></a>第八九十章</h3><p>查找表<br>是由同一类型的数据元素（或记录）构成的集合<br>对查找表的操作有：<br>（1） 查询某个“特定的”数据元素是否在查找表中；<br>（2） 检索某个“特定的”数据元素的各种属性<br>（3） 在查找表中插入一个数据元素；<br>（4） 从查找表中删去某个特定元素<br>静态查找表<br>只进行前两种“查找”操作的查找表为静态查找表<br>动态查找表<br>若在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已存在的某<br>个数据元素，则成为动态查找表<br>排序<br>其功能是将一个数据元素（或记录）的任意序列，重新排列成一个按关键字有序的序列。</p><h3 id="既然都看到这了，码字不易，记得点赞收藏哦！！！"><a href="#既然都看到这了，码字不易，记得点赞收藏哦！！！" class="headerlink" title="既然都看到这了，码字不易，记得点赞收藏哦！！！"></a>既然都看到这了，码字不易，记得点赞收藏哦！！！</h3><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构（C语言版）期末复习整理</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言实现双向巡回链表</title>
    <url>/archives/c49a2ddd.html</url>
    <content><![CDATA[<!-- build time:Wed Dec 01 2021 19:37:41 GMT+0800 (中国标准时间) --><p>主要利用双向链表实现26个英文字母的循环输出</p><p>例如输入3，输入结果：</p><p>DEFGHIJKLMNOPQRSTUVWXYZABC</p><p>输入-3，则输出结果:</p><p>XYZABCDEFGHIJKLMNOPQRSTUVW</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Elemtype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    Elemtype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">prior</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node,*Linked;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(Linked *L)</span></span>&#123;<span class="comment">//初始化链表</span></span><br><span class="line">    Node *p,*q;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    *L = (Linked)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));<span class="comment">//生成一个指向头结点的指针</span></span><br><span class="line">    <span class="keyword">if</span>(!(*L))&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    (*L)-&gt;next = (*L)-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">     p = (*L);<span class="comment">//p节点指向头结点，然后p在指向q，q在往后移动</span></span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;<span class="comment">//添加26个英文字母</span></span><br><span class="line">        q = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));<span class="comment">//生成一个新节点，往里赋值，然后p指向q，</span></span><br><span class="line">                                         <span class="comment">//在生成新节点，以此循环</span></span><br><span class="line">        <span class="keyword">if</span>(!q)&#123;</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        q-&gt;data = <span class="string">'A'</span>+i;</span><br><span class="line">        q-&gt;prior = p;</span><br><span class="line">        q-&gt;next = p-&gt;next;<span class="comment">//把q的next置为null</span></span><br><span class="line">        p-&gt;next = q;</span><br><span class="line"> </span><br><span class="line">        p=q;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//实现巡回的主要步骤</span></span><br><span class="line"> </span><br><span class="line">     p-&gt;next = (*L)-&gt;next; <span class="comment">//此时p，q都在最指的是最后一个节点，使p/q指向头结点的下一个节点</span></span><br><span class="line">     (*L)-&gt;next-&gt;prior=p;<span class="comment">//然后头结点的下一个节点在指回p/q。</span></span><br><span class="line">     (*L) = p;<span class="comment">//头结点在指向p/q</span></span><br><span class="line">     <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Casear</span><span class="params">(Linked *L,<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//打印输出链表</span></span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            (*L) = (*L)-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">while</span>(--i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line"> </span><br><span class="line">            (*L) = (*L)-&gt;prior;</span><br><span class="line">        &#125;<span class="keyword">while</span>(++i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linked L;</span><br><span class="line">    <span class="keyword">int</span> i,n;</span><br><span class="line">    InitList(&amp;L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入一个整数：\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    Casear(&amp;L,n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,L-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>C语言实现双向巡回链表</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的基本操作</title>
    <url>/archives/65ba9d2a.html</url>
    <content><![CDATA[<!-- build time:Mon Nov 29 2021 22:05:47 GMT+0800 (中国标准时间) --><h2 id="二叉树的基本操作"><a href="#二叉树的基本操作" class="headerlink" title="二叉树的基本操作"></a>二叉树的基本操作</h2><h3 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1.实验目的"></a>1.实验目的</h3><p>通过该实验，让学生掌握二叉树的相关基本概念，理解二叉树的链式存储，掌握二叉树的几种遍历算法，并通过该实验理解递归的含义，掌握C语言编写递归函数的方法和注意事项。</p><h3 id="2-实验主要仪器、设备和材料等"><a href="#2-实验主要仪器、设备和材料等" class="headerlink" title="2.实验主要仪器、设备和材料等"></a>2.实验主要仪器、设备和材料等</h3><p>硬件：PC机</p><p>软件：Dev-C++、VC 6.0或CodeBlocks等。</p><h3 id="3-实验内容（包括实验原理和操作步骤）"><a href="#3-实验内容（包括实验原理和操作步骤）" class="headerlink" title="3.实验内容（包括实验原理和操作步骤）"></a>3.实验内容（包括实验原理和操作步骤）</h3><ol><li><p>按照先序遍历的顺序创建一个二叉链表；</p></li><li><p>对已建立的二叉树实现先序遍历、中序遍历、后序遍历、求深度、求结点数量等操作。</p></li><li><p>最好用菜单形式对应各个操作，使其编程一个完整的小软件。</p><p><strong>测试用例：</strong></p><p><img data-src="../images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01.png" alt></p></li></ol><ul><li><p>创建</p></li><li><p>输入：ABC##DE#G##F###</p></li><li><p>该输入对应的树如上图所示</p></li><li><p>先序 屏幕输出 A B C D E G F</p></li><li><p>中序 屏幕输出 C B E G D F A</p></li><li><p>后序 屏幕输出 C G E F D B A</p></li><li><p>深度 屏幕显示 深度为5</p></li><li><p>结点数量 屏幕显示 结点数量为7</p></li><li><p>销毁 销毁后的二叉树再进行遍历等操作会提示二叉树未创建。</p></li></ul><h3 id="参考界面："><a href="#参考界面：" class="headerlink" title="参考界面："></a>参考界面：</h3><p><img data-src="../images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/02.png" alt></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef char ElemType;</span><br><span class="line">typedef struct BitNode&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    struct BitNode *lchild,*rchild;</span><br><span class="line">&#125;BitNode,*BiTree;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建二叉树</span><br><span class="line">void CreateBiTree(BiTree &amp;T)&#123;</span><br><span class="line">    ElemType ch;</span><br><span class="line">    cin&gt;&gt;ch;</span><br><span class="line">    if(ch&#x3D;&#x3D;&#39;#&#39;)&#123;</span><br><span class="line">         T&#x3D;NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        T&#x3D;new BitNode;</span><br><span class="line">        T-&gt;data&#x3D;ch;</span><br><span class="line">        CreateBiTree(T-&gt;lchild);</span><br><span class="line">        CreateBiTree(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;先序遍历</span><br><span class="line">void PreOrderTraverse(BiTree T)&#123;</span><br><span class="line">    if(T)&#123;</span><br><span class="line">        cout&lt;&lt;T-&gt;data;</span><br><span class="line">        PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PreOrderTraverse(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;中序遍历</span><br><span class="line">void InOrderTraverse(BiTree T)&#123;</span><br><span class="line">    if(T)&#123;</span><br><span class="line">        InOrderTraverse(T-&gt;lchild);</span><br><span class="line">        cout&lt;&lt;T-&gt;data;</span><br><span class="line">        InOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;后序遍历</span><br><span class="line">void PostTraverse(BiTree T)&#123;</span><br><span class="line">    if(T)&#123;</span><br><span class="line">        InOrderTraverse(T-&gt;lchild);</span><br><span class="line"></span><br><span class="line">        InOrderTraverse(T-&gt;rchild);</span><br><span class="line">        cout&lt;&lt;T-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;求二叉树的深度</span><br><span class="line">int Depth(BiTree T)&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    if(T&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        m&#x3D;Depth(T-&gt;lchild);</span><br><span class="line">        n&#x3D;Depth(T-&gt;rchild);</span><br><span class="line">        if(m&gt;n)&#123;</span><br><span class="line">            return (m+1);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return (n+1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;统计二叉树节点的数量</span><br><span class="line">int NodeCount(BiTree T)&#123;</span><br><span class="line">    if(T&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;else return NodeCount(T-&gt;lchild) + NodeCount(T-&gt;rchild) + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;销毁二叉树</span><br><span class="line">void DestroyBitree(BiTree T)&#123;</span><br><span class="line">    if(T)&#123;</span><br><span class="line">        DestroyBitree(T-&gt;lchild);</span><br><span class="line">        DestroyBitree(T-&gt;rchild);</span><br><span class="line">        free(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">	int code;</span><br><span class="line">	int flag&#x3D;0;</span><br><span class="line">	BiTree T&#x3D;NULL;</span><br><span class="line">	while(1)&#123;</span><br><span class="line">	system(&quot;cls&quot;);</span><br><span class="line">	printf(&quot;**********************************************************\n&quot;);</span><br><span class="line">	printf(&quot;****                  ****系统菜单****                ****\n&quot;);</span><br><span class="line">	printf(&quot;****            *  1.创建二叉树                  *    ****\n&quot;);</span><br><span class="line">	printf(&quot;****            *  2.先序遍历二叉树              *    ****\n&quot;);</span><br><span class="line">	printf(&quot;****            *  3.中序遍历二叉树              *    ****\n&quot;);</span><br><span class="line">	printf(&quot;****            *  4.后序遍历二叉树              *    ****\n&quot;);</span><br><span class="line">	printf(&quot;****            *  5.求二叉树的深度              *    ****\n&quot;);</span><br><span class="line">	printf(&quot;****            *  6.求二叉树的节点数量          *    ****\n&quot;);</span><br><span class="line">	printf(&quot;****            *  7.销毁二叉树                  *    ****\n&quot;);</span><br><span class="line">	printf(&quot;****            *  8.退出                        *    ****\n&quot;);</span><br><span class="line">	printf(&quot;**********************************************************\n&quot;);</span><br><span class="line">		printf(&quot;请输入操作代码:&quot;);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;code);</span><br><span class="line">		getchar();</span><br><span class="line">		switch(code)</span><br><span class="line">		&#123;</span><br><span class="line">		case 1:</span><br><span class="line">			&#123;</span><br><span class="line">			    printf(&quot;请输入二叉树元素（‘#’表示为空）\n&quot;);</span><br><span class="line">			    CreateBiTree(T);</span><br><span class="line">                printf(&quot;二叉树创建成功\n&quot;);</span><br><span class="line">                flag&#x3D;1;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		case 2:</span><br><span class="line">			&#123;</span><br><span class="line">                if(flag&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    printf(&quot;二叉树未创建\n&quot;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    printf(&quot;先序遍历后:\n&quot;);</span><br><span class="line">                PreOrderTraverse(T);</span><br><span class="line">                printf(&quot;\n&quot;);</span><br><span class="line">		    &#125;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		case 3:</span><br><span class="line">                if(flag&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    printf(&quot;二叉树未创建\n&quot;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    printf(&quot;中序遍历后:\n&quot;);</span><br><span class="line">                    InOrderTraverse(T);</span><br><span class="line">                    printf(&quot;\n&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">		    break;</span><br><span class="line">		case 4:</span><br><span class="line">		    if(flag&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    printf(&quot;二叉树未创建\n&quot;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    printf(&quot;先序遍历后:\n&quot;);</span><br><span class="line">                PostTraverse(T);</span><br><span class="line">                printf(&quot;\n&quot;);</span><br><span class="line">		    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		    break;</span><br><span class="line">		case 5:</span><br><span class="line">		    int deep;</span><br><span class="line">            if(flag&#x3D;&#x3D;0)&#123;</span><br><span class="line">                printf(&quot;二叉树未创建\n&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                deep&#x3D;Depth(T);</span><br><span class="line">                printf(&quot;二叉树的深度为：%d\n&quot;,deep);</span><br><span class="line">		    &#125;</span><br><span class="line">			break;</span><br><span class="line">		case 6:</span><br><span class="line">		    int num;</span><br><span class="line">		    if(flag&#x3D;&#x3D;0)&#123;</span><br><span class="line">                printf(&quot;二叉树未创建\n&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                num&#x3D;NodeCount(T);</span><br><span class="line">                printf(&quot;二叉树的节点数量为：%d\n&quot;,num);</span><br><span class="line">		    &#125;</span><br><span class="line">		    break;</span><br><span class="line">		case 7:</span><br><span class="line">		    if(flag&#x3D;&#x3D;0)&#123;</span><br><span class="line">                printf(&quot;二叉树未创建\n&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                DestroyBitree(T);</span><br><span class="line">                flag&#x3D;0;</span><br><span class="line">                printf(&quot;二叉树已被销毁\n&quot;,num);</span><br><span class="line">		    &#125;</span><br><span class="line">		    break;</span><br><span class="line">		case 8:</span><br><span class="line">			&#123;</span><br><span class="line">				printf(&quot;程序结束!\n&quot;);</span><br><span class="line">				return 0;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		default:printf(&quot;数据无效，请重新输入!&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		system(&quot;pause&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>实现二叉树的基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>不规则动词总结表</title>
    <url>/archives/c07a60bb.html</url>
    <content><![CDATA[<!-- build time:Thu Nov 19 2020 09:56:34 GMT+0800 (GMT+08:00) --><p>​</p><h1 id="英语不规则动词总结表"><a href="#英语不规则动词总结表" class="headerlink" title="英语不规则动词总结表"></a><center>英语不规则动词总结表</center></h1><h2 id="一、AAA型（原形→原形→原形）"><a href="#一、AAA型（原形→原形→原形）" class="headerlink" title="一、AAA型（原形→原形→原形）"></a>一、AAA型（原形→原形→原形）</h2><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>read</td><td>read</td><td>read</td><td>读</td></tr><tr><td>cut</td><td>cut</td><td>cut</td><td>切，割</td></tr><tr><td>let</td><td>let</td><td>let</td><td>让</td></tr><tr><td>put</td><td>put</td><td>put</td><td>放</td></tr><tr><td>cost</td><td>cost</td><td>cost</td><td>花费，值</td></tr><tr><td>hit</td><td>hit</td><td>hit</td><td>撞，击</td></tr><tr><td>set</td><td>set</td><td>set</td><td>安排，安置</td></tr><tr><td>hurt</td><td>hurt</td><td>hurt</td><td>使…伤痛</td></tr><tr><td>bet</td><td>bet</td><td>bet</td><td>赌博，打赌</td></tr><tr><td>cast</td><td>cast</td><td>cast</td><td>抛</td></tr></tbody></table><h2 id="二、ABA型（原形→过去式→原形）"><a href="#二、ABA型（原形→过去式→原形）" class="headerlink" title="二、ABA型（原形→过去式→原形）"></a>二、ABA型（原形→过去式→原形）</h2><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>become</td><td>became</td><td>become</td><td>成为</td></tr><tr><td>come</td><td>came</td><td>come</td><td>来</td></tr><tr><td>run</td><td>ran</td><td>run</td><td>跑</td></tr></tbody></table><h2 id="三、ABC型"><a href="#三、ABC型" class="headerlink" title="三、ABC型"></a>三、ABC型</h2><h3 id="1-ow-→ew-→own"><a href="#1-ow-→ew-→own" class="headerlink" title="1. ow →ew →own"></a>1. ow →ew →own</h3><table><thead><tr><th align="left">原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td align="left">blow</td><td>blew</td><td>blown</td><td>吹</td></tr><tr><td align="left">draw</td><td>drew</td><td>drawn</td><td>画</td></tr><tr><td align="left">grow</td><td>grew</td><td>grown</td><td>生长</td></tr><tr><td align="left">know</td><td>knew</td><td>known</td><td>知道</td></tr><tr><td align="left">throw</td><td>threw</td><td>thrown</td><td>扔</td></tr></tbody></table><h3 id="2-i→a-→u"><a href="#2-i→a-→u" class="headerlink" title="2. i→a →u"></a>2. i→a →u</h3><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>begin</td><td>began</td><td>begun</td><td>开始</td></tr><tr><td>drink</td><td>drank</td><td>drunk</td><td>喝</td></tr><tr><td>sing</td><td>sang</td><td>sung</td><td>唱</td></tr><tr><td>swim</td><td>swam</td><td>swum</td><td>游泳</td></tr><tr><td>ring</td><td>rang</td><td>rung</td><td>打电话</td></tr></tbody></table><h3 id="3-原形→过去式→过去式-e-n"><a href="#3-原形→过去式→过去式-e-n" class="headerlink" title="3. 原形→过去式→过去式+(e)n"></a>3. 原形→过去式→过去式+(e)n</h3><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>wear</td><td>wore</td><td>worn</td><td>穿</td></tr><tr><td>forget</td><td>forgot</td><td>forgotten</td><td>忘记</td></tr><tr><td>speak</td><td>spoke</td><td>spoken</td><td>说</td></tr><tr><td>freeze</td><td>froze</td><td>frozen</td><td>冻</td></tr><tr><td>choose</td><td>chose</td><td>chosen</td><td>选择</td></tr></tbody></table><h3 id="4-原形→过去式→原形-e-n"><a href="#4-原形→过去式→原形-e-n" class="headerlink" title="4. 原形→过去式→原形+(e)n"></a>4. 原形→过去式→原形+(e)n</h3><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>eat</td><td>ate</td><td>eaten</td><td>吃</td></tr><tr><td>forbid</td><td>forbade</td><td>forbidden</td><td>禁止</td></tr><tr><td>give</td><td>gave</td><td>given</td><td>给</td></tr><tr><td>ride</td><td>rode</td><td>ridden</td><td>骑</td></tr><tr><td>see</td><td>saw</td><td>seen</td><td>看见</td></tr><tr><td>write</td><td>wrote</td><td>written</td><td>写</td></tr><tr><td>fall</td><td>fell</td><td>fallen</td><td>落下</td></tr><tr><td>break</td><td>broke</td><td>broken</td><td>打破，折断</td></tr><tr><td>forgive</td><td>forgave</td><td>forgiven</td><td>原谅；宽恕</td></tr><tr><td>drive</td><td>drove</td><td>driven</td><td>驾驶</td></tr><tr><td>mistake</td><td>mistook</td><td>mistaken</td><td>误解</td></tr><tr><td>rise</td><td>rose</td><td>risen</td><td>上升</td></tr><tr><td>shake</td><td>shook</td><td>shaken</td><td>摇</td></tr></tbody></table><h3 id="5-无规律"><a href="#5-无规律" class="headerlink" title="5. 无规律"></a>5. 无规律</h3><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>am/is</td><td>was</td><td>been</td><td>是</td></tr><tr><td>are</td><td>were</td><td>been</td><td>是</td></tr><tr><td>do</td><td>did</td><td>done</td><td>做</td></tr><tr><td>go</td><td>went</td><td>gone</td><td>走</td></tr><tr><td>take</td><td>took</td><td>taken</td><td>拿</td></tr></tbody></table><h2 id="四、ABB型"><a href="#四、ABB型" class="headerlink" title="四、ABB型"></a>四、ABB型</h2><h3 id="1-原形→ought-→ought"><a href="#1-原形→ought-→ought" class="headerlink" title="1. 原形→ought →ought"></a>1. 原形→ought →ought</h3><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>bring</td><td>brought</td><td>brought</td><td>带来</td></tr><tr><td>buy</td><td>bought</td><td>bought</td><td>买</td></tr><tr><td>fight</td><td>fought</td><td>fought</td><td>打架</td></tr><tr><td>think</td><td>thought</td><td>thought</td><td>思考</td></tr><tr><td>seek</td><td>sought</td><td>sought</td><td>寻求</td></tr></tbody></table><h3 id="2-原形→aught-→aught"><a href="#2-原形→aught-→aught" class="headerlink" title="2. 原形→aught →aught"></a>2. 原形→aught →aught</h3><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>catch</td><td>caught</td><td>caught</td><td>捉,抓</td></tr><tr><td>teach</td><td>taught</td><td>taught</td><td>教</td></tr></tbody></table><h3 id="3-变其中一个元音字母"><a href="#3-变其中一个元音字母" class="headerlink" title="3.变其中一个元音字母"></a>3.变其中一个元音字母</h3><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>feed</td><td>fed</td><td>fed</td><td>喂</td></tr><tr><td>meet</td><td>met</td><td>met</td><td>遇见</td></tr><tr><td>get</td><td>got</td><td>got</td><td>得到</td></tr><tr><td>hold</td><td>held</td><td>held</td><td>拥有</td></tr><tr><td>babysit</td><td>babysat</td><td>babysat</td><td>临时照看</td></tr><tr><td>sit</td><td>sat</td><td>sat</td><td>坐</td></tr><tr><td>win</td><td>won</td><td>won</td><td>赢</td></tr><tr><td>find</td><td>found</td><td>found</td><td>发现</td></tr><tr><td>bend</td><td>bent</td><td>bent</td><td>使弯曲</td></tr><tr><td>dig</td><td>dug</td><td>dug</td><td>挖</td></tr><tr><td>lead</td><td>led</td><td>led</td><td>引导</td></tr><tr><td>sell</td><td>sold</td><td>sold</td><td>卖</td></tr><tr><td>retell</td><td>retold</td><td>retold</td><td>复述</td></tr></tbody></table><h3 id="4-原形→□t→□t"><a href="#4-原形→□t→□t" class="headerlink" title="4. 原形→□t→□t"></a>4. 原形→□t→□t</h3><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>feel</td><td>felt</td><td>felt</td><td>感到</td></tr><tr><td>keep</td><td>kept</td><td>kept</td><td>保持</td></tr><tr><td>leave</td><td>left</td><td>left</td><td>离开</td></tr><tr><td>sleep</td><td>slept</td><td>slept</td><td>睡</td></tr><tr><td>sweep</td><td>swept</td><td>swept</td><td>扫</td></tr><tr><td>smell</td><td>smelt</td><td>smelt</td><td>闻；发出气味</td></tr></tbody></table><h3 id="5-变其中一个辅音字母"><a href="#5-变其中一个辅音字母" class="headerlink" title="5.变其中一个辅音字母"></a>5.变其中一个辅音字母</h3><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>build</td><td>built</td><td>built</td><td>建造</td></tr><tr><td>hear</td><td>heard</td><td>heard</td><td>听见</td></tr><tr><td>make</td><td>made</td><td>made</td><td>制造</td></tr><tr><td>mean</td><td>meant</td><td>meant</td><td>意思</td></tr><tr><td>send</td><td>sent</td><td>sent</td><td>送,寄</td></tr><tr><td>spend</td><td>spent</td><td>spent</td><td>花费</td></tr><tr><td>deal</td><td>dealt</td><td>dealt</td><td>处理</td></tr><tr><td>rebuild</td><td>rebuilt</td><td>rebuilt</td><td>重建</td></tr><tr><td>lend</td><td>lent</td><td>lent</td><td>借贷</td></tr></tbody></table><h3 id="6-辅音字母和元音字母都变"><a href="#6-辅音字母和元音字母都变" class="headerlink" title="6.辅音字母和元音字母都变"></a>6.辅音字母和元音字母都变</h3><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>have</td><td>had</td><td>had</td><td>有,吃</td></tr><tr><td>lay</td><td>lain</td><td>lain</td><td>放</td></tr><tr><td>lose</td><td>lost</td><td>lost</td><td>丢失</td></tr><tr><td>pay</td><td>paid</td><td>paid</td><td>付钱</td></tr><tr><td>say</td><td>said</td><td>said</td><td>说</td></tr><tr><td>sell</td><td>sold</td><td>sold</td><td>卖</td></tr><tr><td>tell</td><td>told</td><td>told</td><td>告诉</td></tr><tr><td>stand</td><td>stood</td><td>stood</td><td>站</td></tr><tr><td>misunderstand</td><td>misunderstood</td><td>misunderstood</td><td>误解</td></tr><tr><td>shoot</td><td>shot</td><td>shot</td><td>放炮；开枪</td></tr><tr><td>understand</td><td>understood</td><td>understood</td><td>理解</td></tr></tbody></table><h2 id="五、AAB型"><a href="#五、AAB型" class="headerlink" title="五、AAB型"></a>五、AAB型</h2><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th align="center">汉语意思</th></tr></thead><tbody><tr><td>beat</td><td>beat</td><td>beaten</td><td align="center">打败</td></tr></tbody></table><h2 id="六、有两种形式"><a href="#六、有两种形式" class="headerlink" title="六、有两种形式"></a>六、有两种形式</h2><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>bear</td><td>bore</td><td>born</td><td>生</td></tr><tr><td>bore</td><td>borne</td><td></td><td></td></tr><tr><td>hang</td><td>hanged</td><td>hanged</td><td>吊死</td></tr><tr><td>hung</td><td>hung</td><td>挂</td><td></td></tr><tr><td>learn</td><td>learned</td><td>learned</td><td>学</td></tr><tr><td>learnt</td><td>learnt</td><td></td><td></td></tr><tr><td>lie</td><td>lied</td><td>lied</td><td>说谎</td></tr><tr><td>lay</td><td>lain</td><td>躺</td><td></td></tr><tr><td>show</td><td>showed</td><td>showed</td><td>给……看</td></tr><tr><td>showed</td><td>shown</td><td></td><td></td></tr><tr><td>spell</td><td>spelled</td><td>spelled</td><td>拼写</td></tr><tr><td>spelt</td><td>spelt</td><td></td><td></td></tr><tr><td>burn</td><td>burned</td><td>burned</td><td>烧</td></tr><tr><td>burnt</td><td>burnt</td><td></td><td></td></tr><tr><td>smell</td><td>smelled</td><td>smelled</td><td>闻</td></tr><tr><td>smelt</td><td>smelt</td><td></td><td></td></tr><tr><td>shine</td><td>shined</td><td>shined</td><td>照耀</td></tr><tr><td>shone</td><td>shone</td><td></td><td></td></tr><tr><td>dream</td><td>dreamed</td><td>dreamed</td><td>做梦</td></tr><tr><td>dreamt</td><td>dreamt</td><td></td><td></td></tr><tr><td>wake</td><td>waked</td><td>waked</td><td>醒</td></tr><tr><td>woke</td><td>woken</td><td></td><td></td></tr><tr><td>hide</td><td>hid</td><td>hid</td><td>躲藏</td></tr><tr><td>hid</td><td>hidden</td><td></td><td></td></tr><tr><td>bite</td><td>bit</td><td>bit</td><td>咬</td></tr><tr><td>bit</td><td>bitten</td><td></td><td></td></tr><tr><td>light</td><td>lighted</td><td>iighted</td><td>点着</td></tr><tr><td>lit</td><td>lit</td><td></td><td></td></tr><tr><td>prove</td><td>proved</td><td>proved</td><td>证明</td></tr><tr><td>proved</td><td>proven</td><td></td><td></td></tr><tr><td>quit</td><td>quit</td><td>quit</td><td>放弃</td></tr><tr><td>quited</td><td>quited</td><td></td><td></td></tr><tr><td>rid</td><td>rid</td><td>rid</td><td>免除；去掉</td></tr><tr><td>ridded</td><td>ridded</td><td></td><td></td></tr><tr><td>saw</td><td>sawed</td><td>sawed</td><td>锯</td></tr><tr><td>sawed</td><td>sawn</td><td></td><td></td></tr><tr><td>sew</td><td>sewed</td><td>sewed</td><td>缝纫</td></tr><tr><td>sewed</td><td>sown</td><td></td><td></td></tr><tr><td>shine</td><td>shone</td><td>shone</td><td>发光；闪亮</td></tr><tr><td>shined</td><td>shined</td><td></td><td></td></tr><tr><td>sink</td><td>sank</td><td>sunk</td><td>下沉</td></tr><tr><td>sank</td><td>sunken</td><td></td><td></td></tr><tr><td>sow</td><td>sowed</td><td>sowed</td><td>种植</td></tr><tr><td>sowed</td><td>sown</td><td></td><td></td></tr><tr><td>spit</td><td>spat</td><td>spat</td><td>吐</td></tr><tr><td>spit</td><td>spit</td><td></td><td></td></tr><tr><td>spring</td><td>sprang</td><td>sprung</td><td>跳跃</td></tr><tr><td>sprung</td><td>sprung</td><td></td><td></td></tr><tr><td>wet</td><td>wet</td><td>wet</td><td>浸湿；弄湿</td></tr><tr><td>wetted</td><td>wetted</td><td></td><td></td></tr></tbody></table><h2 id="七、情态动词"><a href="#七、情态动词" class="headerlink" title="七、情态动词"></a>七、情态动词</h2><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>can</td><td>could</td><td>∕</td><td>能</td></tr><tr><td>may</td><td>might</td><td>∕</td><td>也许</td></tr><tr><td>must</td><td>∕</td><td>∕</td><td>必须</td></tr><tr><td>shall</td><td>should</td><td>∕</td><td>将要</td></tr><tr><td>will</td><td>would</td><td>∕</td><td>会</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>不规则动词总结表</tag>
      </tags>
  </entry>
  <entry>
    <title>高数公式</title>
    <url>/archives/29c7973.html</url>
    <content><![CDATA[<!-- build time:Thu Nov 19 2020 09:56:34 GMT+0800 (GMT+08:00) --><h1 id="高数数学所有公式总结"><a href="#高数数学所有公式总结" class="headerlink" title="高数数学所有公式总结"></a>高数数学所有公式总结</h1><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_1.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_2.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_3.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_4.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_5.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_6.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_7.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_8.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_9.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_10.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_11.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_12.png" alt></p><p><img data-src="../images/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F_13.png" alt></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>高数</category>
      </categories>
      <tags>
        <tag>高数公式</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中$event的用法——如何获取当前兄弟元素，子元素，父元素</title>
    <url>/archives/378703a1.html</url>
    <content><![CDATA[<!-- build time:Thu Nov 19 2020 09:56:34 GMT+0800 (GMT+08:00) --><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tempalte&gt;</span><br><span class="line"></span><br><span class="line">   &lt;button @click = “getEvent($event)”&gt;点击&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">      methods:&#123;</span><br><span class="line"></span><br><span class="line">         getEvent(e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(e)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// e.target 是你当前点击的元素</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// e.currentTarget 是你绑定事件的元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           #获得点击元素的前一个元素</span><br><span class="line"></span><br><span class="line">           e.currentTarget.previousElementSibling.innerHTML</span><br><span class="line"></span><br><span class="line">           #获得点击元素的第一个子元素</span><br><span class="line"></span><br><span class="line">           e.currentTarget.firstElementChild</span><br><span class="line"></span><br><span class="line">           # 获得点击元素的下一个元素</span><br><span class="line"></span><br><span class="line">           e.currentTarget.nextElementSibling</span><br><span class="line"></span><br><span class="line">           # 获得点击元素中id为string的元素</span><br><span class="line"></span><br><span class="line">           e.currentTarget.getElementById(<span class="string">"string"</span>)</span><br><span class="line"></span><br><span class="line">           # 获得点击元素的string属性</span><br><span class="line"></span><br><span class="line">           e.currentTarget.getAttributeNode(<span class="string">'string'</span>)</span><br><span class="line"></span><br><span class="line">           # 获得点击元素的父级元素</span><br><span class="line"></span><br><span class="line">           e.currentTarget.parentElement</span><br><span class="line"></span><br><span class="line">           # 获得点击元素的前一个元素的第一个子元素的HTML值</span><br><span class="line"></span><br><span class="line">           e.currentTarget.previousElementSibling.firstElementChild.innerHTML</span><br><span class="line"></span><br><span class="line">         &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>Jsp中的session</title>
    <url>/archives/fdcf16bb.html</url>
    <content><![CDATA[<!-- build time:Mon Dec 06 2021 20:32:43 GMT+0800 (中国标准时间) --><p>Jsp中的session</p><p>1.什么是session:<br>当用户打开浏览器，访问某个网站的时候，服务器就会在服务器的内存为该浏览器分配一个内存空间，该空间被这个浏览器独占，这个空间就是session空间。<br>该空间中的数据默认存在时间为30min,可以修改(session.setMaxInactiveInterval(int seconds))</p><p>2.session可以用来做什么？<br>（1）可以用作网上商城的购物车<br>（2）保存登录用户的信息<br>（3）将某些数据放在session中，供同一用户的各个页面使用（共享数据）<br>（4）防止用户非法登录到某个页面</p><p>3.session的使用：<br>（1）得到session<br>servlet中：HttpSession hs = request.getSession(true);<br>jsp中:session是一个内置对象，可以直接使用<br>(2)向session添加属性：<br>servlet中：hs.setAttribute(String name,Object value)<br>jsp中：session.setAttribute(String name,Object value)<br>(3)从session得到某个属性：<br>servlet中：hs.getAttribute(String name)<br>jsp中：session.getAttribute(String name)<br>(4)从session中删除某个属性：<br>servlet中:hs.removeAttribute(String name)<br>jsp中:hs.removeAttribute(String name)</p><p>4.session注意事项：<br>（1）session默认存在时间是30分钟，在tomcat的web.xml中的<session-out>可以修改<br>（2）上述默认时间指的是“发呆时间”，不是累计时间，就是不访问它的时间超过30分钟就会被回收，期间访问了它的话这个时间就会重新计算<br>（3）当某个浏览器访问服务器时，服务器会给它一个唯一的session id,通过id来区分不痛的浏览器<br>（4）因为session要占用服务器内存，因此在迫不得已的情况下才使用（一般使用：保存用户信息，保存购物车）</session-out></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jsp</tag>
      </tags>
  </entry>
  <entry>
    <title>解决eclipse端口被占用</title>
    <url>/archives/969da7de.html</url>
    <content><![CDATA[<!-- build time:Thu Nov 19 2020 09:56:34 GMT+0800 (GMT+08:00) --><h4 id="解决eclipse端口被占用"><a href="#解决eclipse端口被占用" class="headerlink" title="解决eclipse端口被占用"></a>解决eclipse端口被占用</h4><p><img data-src="https://upload-images.jianshu.io/upload_images/5640239-801d15d118d7c3e5.png" alt="5640239-801d15d118d7c3e5.png"></p><p>问题如图所示，在eclipse中开启tomcat服务器时报错：端口已被占用。</p><p>这是因为在tomcat开启的状态下，eclipse异常关闭，导致tomcat一直占用端口。<br>解决办法如下：</p><p>1： 输入命令netstat -ano|findstr “8080”，查看8080端口是否被占用，且得到了进程号“13384”；</p><p>2： 再输入命令tasklist|findstr “13384”，得到进程映像名javaw.exe；</p><p><img data-src="https://upload-images.jianshu.io/upload_images/5640239-779a4d67255f5cfb.png" alt="5640239-779a4d67255f5cfb.png"></p><p>3： 启动任务管理器，结束javaw.exe进程；</p><ul><li>用鼠标打开任务管理器，首先鼠标放在电脑最下边靠右边的任务栏上，点击右键</li></ul><p><img data-src="https://upload-images.jianshu.io/upload_images/5640239-16874fe86025821b.png" alt="5640239-16874fe86025821b.png"></p><p>选择启动任务管理器，用鼠标左键单击，就打开了任务管理器</p><p><img data-src="https://upload-images.jianshu.io/upload_images/5640239-a6d975126589654c.jpg" alt="5640239-a6d975126589654c.jpg"></p><p>找到13384所对应的程序，结束任务</p><p><img data-src="https://upload-images.jianshu.io/upload_images/5640239-390417a76c06c5c7.png" alt="5640239-390417a76c06c5c7.png"></p><ol start="4"><li>最后再输入命令netstat -ano|findstr “8080”，查看8080端口是否被还占用</li></ol><p><img data-src="https://upload-images.jianshu.io/upload_images/5640239-dbccc1732c77b015.png" alt="5640239-dbccc1732c77b015.png"></p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>eclipse端口被占用解决办法</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue获取节点总结</title>
    <url>/archives/a8f7bb1e.html</url>
    <content><![CDATA[<!-- build time:Thu Nov 19 2020 09:56:34 GMT+0800 (GMT+08:00) --><h2 id="vue获取各个节点的方式"><a href="#vue获取各个节点的方式" class="headerlink" title="vue获取各个节点的方式"></a>vue获取各个节点的方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tempalte&gt;</span><br><span class="line"></span><br><span class="line">   &lt;button @click &#x3D; “getEvent($event)”&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">   export default &#123;</span><br><span class="line"></span><br><span class="line">      methods:&#123;</span><br><span class="line"></span><br><span class="line">         getEvent(e) &#123;</span><br><span class="line"></span><br><span class="line">            console.log(e)</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; e.target 是你当前点击的元素</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; e.currentTarget 是你绑定事件的元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           #获得点击元素的前一个元素</span><br><span class="line"></span><br><span class="line">           e.currentTarget.previousElementSibling.innerHTML</span><br><span class="line"></span><br><span class="line">           #获得点击元素的第一个子元素</span><br><span class="line"></span><br><span class="line">           e.currentTarget.firstElementChild</span><br><span class="line"></span><br><span class="line">           # 获得点击元素的下一个元素</span><br><span class="line"></span><br><span class="line">           e.currentTarget.nextElementSibling</span><br><span class="line"></span><br><span class="line">           # 获得点击元素中id为string的元素</span><br><span class="line"></span><br><span class="line">           e.currentTarget.getElementById(&quot;string&quot;)</span><br><span class="line"></span><br><span class="line">           # 获得点击元素的string属性</span><br><span class="line"></span><br><span class="line">           e.currentTarget.getAttributeNode(&#39;string&#39;)</span><br><span class="line"></span><br><span class="line">           # 获得点击元素的父级元素</span><br><span class="line"></span><br><span class="line">           e.currentTarget.parentElement</span><br><span class="line"></span><br><span class="line">           # 获得点击元素的前一个元素的第一个子元素的HTML值</span><br><span class="line"></span><br><span class="line">           e.currentTarget.previousElementSibling.firstElementChild.innerHTML</span><br><span class="line"></span><br><span class="line">         &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue获取节点总结</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库总结</title>
    <url>/archives/3086330.html</url>
    <content><![CDATA[<!-- build time:Thu Nov 19 2020 09:56:34 GMT+0800 (GMT+08:00) --><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-如何在命令行配置MYSQL数据库"><a href="#1-如何在命令行配置MYSQL数据库" class="headerlink" title="1.如何在命令行配置MYSQL数据库"></a>1.如何在命令行配置MYSQL数据库</h3><p>1）找到MYSQL安装目录的bin目录</p><p>2）放置到path环境变量中</p><h3 id="2-启动停止MYSQL"><a href="#2-启动停止MYSQL" class="headerlink" title="2.启动停止MYSQL"></a>2.启动停止MYSQL</h3><p>启动： netstarmysqla 停止：mysql net stop mysqla</p><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h3><p>binary,int,float,double,char,varchar,text,datetime</p><h3 id="4-添加数据库"><a href="#4-添加数据库" class="headerlink" title="4.添加数据库"></a>4.添加数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database 数据库名;</span><br></pre></td></tr></table></figure><h3 id="5-查看数据库"><a href="#5-查看数据库" class="headerlink" title="5.查看数据库"></a>5.查看数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line">show create database;</span><br></pre></td></tr></table></figure><h3 id="6-删除数据"><a href="#6-删除数据" class="headerlink" title="6.删除数据"></a>6.删除数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database 数据库名;</span><br></pre></td></tr></table></figure><h3 id="7-使用数据库前需要先打开数据表所在的数据库"><a href="#7-使用数据库前需要先打开数据表所在的数据库" class="headerlink" title="7.使用数据库前需要先打开数据表所在的数据库"></a>7.使用数据库前需要先打开数据表所在的数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><h3 id="8-创建表"><a href="#8-创建表" class="headerlink" title="8.创建表"></a>8.创建表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(字段1 类型（长度）,[约束]，.....);</span><br></pre></td></tr></table></figure><h3 id="9-查询当前数据库下有哪些表"><a href="#9-查询当前数据库下有哪些表" class="headerlink" title="9.查询当前数据库下有哪些表"></a>9.查询当前数据库下有哪些表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables</span><br></pre></td></tr></table></figure><h3 id="10-查询表结构"><a href="#10-查询表结构" class="headerlink" title="10.查询表结构"></a>10.查询表结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sesc student</span><br></pre></td></tr></table></figure><h3 id="11-数据库备份与还原"><a href="#11-数据库备份与还原" class="headerlink" title="11.数据库备份与还原"></a>11.数据库备份与还原</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump-uroot-p first-db&gt;C:123456.sql</span><br></pre></td></tr></table></figure><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>1.数据库没有大小写之分</p><p>2.关键词大写，自定义的小写<br>3.修改表内容的关键词</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 （动作）</span><br><span class="line">改表名 动作 rename 新表名</span><br><span class="line">改字段类型 动作 modify 字段名 新类型</span><br><span class="line">改字段名称 动作 change 旧名称 新名称 新类型</span><br><span class="line">增加字段 动作 add 新增字段名 新增字段类型</span><br><span class="line">删除字段 动作 drop 字段名</span><br><span class="line">删除表 drop table 表名;</span><br><span class="line">删除数据库 drop database 数据库名;</span><br></pre></td></tr></table></figure><h3 id="1、数据完整性"><a href="#1、数据完整性" class="headerlink" title="1、数据完整性"></a>1、数据完整性</h3><p>主键约束 primary key 特点是非空且唯一<br>两种写法，直接写在字段后，或者写在创建语句最后 primary key（字段名）<br>联合主键 写在创建语句最后 primary key(字段 1，字段 2)</p><h3 id="2、设置字段自增长-auto-increment"><a href="#2、设置字段自增长-auto-increment" class="headerlink" title="2、设置字段自增长 auto_increment"></a>2、设置字段自增长 auto_increment</h3><p>数据表只有一个自增长列，为主键列</p><h3 id="3、外键约束-foreign-key"><a href="#3、外键约束-foreign-key" class="headerlink" title="3、外键约束 foreign key"></a>3、外键约束 foreign key</h3><p>写在创建语句最后 foreign key (从表字段名) references 主表名<br>（主表字段名）</p><h3 id="4、非空约束-not-null"><a href="#4、非空约束-not-null" class="headerlink" title="4、非空约束 not null"></a>4、非空约束 not null</h3><h3 id="5、默认约束-default-值，注意字符串，需外加单引号"><a href="#5、默认约束-default-值，注意字符串，需外加单引号" class="headerlink" title="5、默认约束 default 值，注意字符串，需外加单引号"></a>5、默认约束 default 值，注意字符串，需外加单引号</h3><h3 id="6、唯一约束-unique"><a href="#6、唯一约束-unique" class="headerlink" title="6、唯一约束 unique"></a>6、唯一约束 unique</h3><p>主键约束和唯一约束的区别，主键无意义，唯一约束可以为 null<br>设计规范<br>1NF（第一范式）保证数据列的原子性<br>家庭住址 可分为省 市 县 具体地址<br>2NF 保证每列都和主键相关（唯一主键，联合主键不满足）<br>学号 姓名 课程 教材 教材内容<br>1 张三 数据库 mysql XXXXX（1 千字）<br>1 张三 java java<br>2 李四 数据库 mysql XXXXX（1 千字）<br>3 王五 数据库 mysql XXXXX（1 千字）<br>数据冗余 更新异常 插入异常 删除异常</p><p>3NF 保证每列都和主键直接相关<br>学号 姓名 班级 辅导员编号 辅导员姓名 辅导员家庭住址</p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="数据库的增删改操作"><a href="#数据库的增删改操作" class="headerlink" title="数据库的增删改操作"></a>数据库的增删改操作</h3><h3 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h3><p>​</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名（列 1，列 2，。。。） values（值 1，值 2，。。。）；</span><br><span class="line">查询数据</span><br><span class="line">select * from 表名;</span><br></pre></td></tr></table></figure><h3 id="2、into-关键字可以省略"><a href="#2、into-关键字可以省略" class="headerlink" title="2、into 关键字可以省略"></a>2、into 关键字可以省略</h3><p>​</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简写形式 insert 表名（列 1，列 2，。。。） values（值 1，值 2，。。。）；</span><br></pre></td></tr></table></figure><h3 id="3、全列插入可省略列明"><a href="#3、全列插入可省略列明" class="headerlink" title="3、全列插入可省略列明"></a>3、全列插入可省略列明</h3><p>​</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简写形式 insert 表名 values（值 1，值 2，。。。）；</span><br></pre></td></tr></table></figure><h3 id="4、自增列和默认列可省略"><a href="#4、自增列和默认列可省略" class="headerlink" title="4、自增列和默认列可省略"></a>4、自增列和默认列可省略</h3><p>注意：自增列只增不减<br>除非：alter table 表名 set auto_increment=值;<br>或者 truncate table 表名; 清空表，自增从 1 开始记数</p><h3 id="5、一次插入多行"><a href="#5、一次插入多行" class="headerlink" title="5、一次插入多行"></a>5、一次插入多行</h3><p>​</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert 表名（列 1，列 2，。。。） values（值 1，值 2，。。。），（值 1，</span><br><span class="line">值 2，。。。），。。。。；</span><br></pre></td></tr></table></figure><h3 id="6、比较运算"><a href="#6、比较运算" class="headerlink" title="6、比较运算"></a>6、比较运算</h3><p>大于&gt;=大于等于&lt;小于&lt;=小于等于 =等于 !=或&lt;&gt;不等于</p><p>is null 为空 is not null 非空 in 在某个范围 not in 不在某个范<br>围 like 模糊查询 between and 在某个范围</p><h3 id="7、逻辑运算"><a href="#7、逻辑运算" class="headerlink" title="7、逻辑运算"></a>7、逻辑运算</h3><p>not 非 and 并且 or 或者</p><h3 id="8、修改数据"><a href="#8、修改数据" class="headerlink" title="8、修改数据"></a>8、修改数据</h3><p>​</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update 表名 set 列名 1&#x3D;值 1，列名 2&#x3D;值 2… where 条件;</span><br></pre></td></tr></table></figure><p>如果没有 where 全更新</p><h3 id="9、删除数据"><a href="#9、删除数据" class="headerlink" title="9、删除数据"></a>9、删除数据</h3><p>​</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from 表名 where 条件;</span><br></pre></td></tr></table></figure><p>注意删除数据不更改自增列的值</p><h3 id="10、清空数据"><a href="#10、清空数据" class="headerlink" title="10、清空数据"></a>10、清空数据</h3><p>truncate table 表名功能同 delete from 表名<br>但是<br>1&gt;Delete 无法修改自增列，truncate 重置自增列<br>2&gt;Delete 可以删除外键约束，truncate 只能清空数据，无法删除外<br>键约束<br>3&gt;Delete 可以通过备份和日子恢复，truncate 无法恢复</p><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p><strong>注意：</strong><br>1、数据库没有双引号，字符一定要用单引号包括<br>2、字段名不用引号，单引号包括的一定是字符<br>``(数字键 1 左边的键)</p><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><p>select 字段 1、字段 2… from 表名 where 条件 order by 字段 1、<br>字段 2.. limit 数字 1,数字 2;<br>*是通配符，表示所有字段<br>使用 as 为字段重命名</p><h3 id="3、where-查询条件"><a href="#3、where-查询条件" class="headerlink" title="3、where 查询条件"></a>3、where 查询条件</h3><h3 id="4、distinct-查询不重复字段"><a href="#4、distinct-查询不重复字段" class="headerlink" title="4、distinct 查询不重复字段"></a>4、distinct 查询不重复字段</h3><h3 id="5、limit-n-m"><a href="#5、limit-n-m" class="headerlink" title="5、limit n,m"></a>5、limit n,m</h3><p>从 n+1 行开始取，取 m 行，行数从 0 开始<br>limit n,取前 n 行</p><h3 id="6、order-by-字段-1"><a href="#6、order-by-字段-1" class="headerlink" title="6、order by 字段 1"></a>6、order by 字段 1</h3><p>通过字段 1 将表从小到大排列<br>order by 字段 1 desc<br>order by 字段 1,字段 2<br>先按照字段 1 排列，在字段 1 相同的情况下按照字段 2 排列</p><p>成绩表，姓名，成绩<br>查询一下第 3 到 6 的女学生姓名<br>select 姓名 from 成绩表 where 性别=’女’ order by 成绩 desc<br>limit 2,4;<br>MySQL 函数<br>concat(‘今天’,’晴天’) 拼接字符串<br>length(‘hello world’) 计算长度，一个字符，符号，数字占 1 位，<br>一个汉字占 3 位<br>upper(‘abcd’) 转成大写<br>ltrim(‘ abc’) 清除左侧空格<br>rtrim(‘abc ‘) 清除右侧空格<br>trim(‘ abc ‘) 清除两侧空格<br>replace(‘abccd’,’c’,’x’) 将 abccd 中的所有 c 替换成 x<br>strcmp(‘a’,’b’) 比较字符串大小<br>substring(‘abcdefg’,3,3) 取子串，从第 3 个开始取，取 3 个<br>数学函数<br>rand(); 取 0~1 的随机小数，取不到 0 和 1<br>ceil();向上取整<br>floor(); 向下取整</p><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="模糊查询和分组查询"><a href="#模糊查询和分组查询" class="headerlink" title="模糊查询和分组查询"></a>模糊查询和分组查询</h3><p>模糊查询使用 like 关键字， _代表一个字符 ，%代表任意长度的字<br>符（0 也是任意长度）<br>between and 关键字，表示大于等于第一个数，小于等于第二个数<br>select * from stuinfo where age between 18 and 20;where age &gt;=18 and age&lt;=20;<br>聚合函数<br>求和 sum，平均 avg，最大 max，最小 min，个数 count(<em>)使用聚合函数只有一行结果分组查询group by 写在 where 后面，order by 前面select \</em> from stuinfo group by age;只有聚合函数和被分组的列有意义使用 having 对分组结果进行条件查询，写在 group by 后面P43 count(*)和 count(列名)<br>count(列名)，如果列里面是 null 的，不计入总数</p><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p>数据库有3中连接方式（MySQL有），其他数据库如（Oracle，SQL Server）<br>有 4 中包括全连接</p><h3 id="1、内连接"><a href="#1、内连接" class="headerlink" title="1、内连接"></a>1、内连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 列名 1,列名 2… FROM 表 1，表 2 WHERE 条件</span><br></pre></td></tr></table></figure><p>另一种写法</p><p>​</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 列名 1,列名 2… FROM 表 1 INNER JOIN 表 2 ON 条件</span><br></pre></td></tr></table></figure><h3 id="2、左连接"><a href="#2、左连接" class="headerlink" title="2、左连接"></a>2、左连接</h3><p>​</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 列名 1,列名 2… FROM 表 1 LEFT JOIN 表 2 ON 条件</span><br></pre></td></tr></table></figure><h3 id="3、右连接"><a href="#3、右连接" class="headerlink" title="3、右连接"></a>3、右连接</h3><p>​</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 列名 1,列名 2… FROM 表 1 RIGHT JOIN 表 2 ON 条件</span><br></pre></td></tr></table></figure><h3 id="4、全连接"><a href="#4、全连接" class="headerlink" title="4、全连接"></a>4、全连接</h3><p>先左连接再右连接</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA面向对象总结</title>
    <url>/archives/4732fab1.html</url>
    <content><![CDATA[<!-- build time:Thu Nov 19 2020 09:56:34 GMT+0800 (GMT+08:00) --><h2 id="第二章：类和对象的创建"><a href="#第二章：类和对象的创建" class="headerlink" title="第二章：类和对象的创建"></a>第二章：类和对象的创建</h2><p>概念：面向对象就是把一个项目，一个事情分成更小的项目，或者说分成一个个更小的部分，每一部分负责什么方面的功能，最后再由这些部分组合而成为一个整体。</p><p>好处：面相对象更接近实物的本质，提高代码的复用更具有扩展性。</p><p>如何使用：通常是创建类的对象再给属性赋值。</p><p>构造方法：构造方法的名称和类名相同，没有返回值类型。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GO g&#x3D;new GO();</span><br></pre></td></tr></table></figure><p>构造方法的重载：方法名相同，参数列表不同，这是构造方法的重载。</p><p>如果一个类中包含了两个或两个以上的方法，他们方法名相同，方法参数个数或者参数类型不同，则称该方法被重载了，这个过程是方法重载。</p><p>Static：可以用来修饰属性，方法和代码块，静态方法中不能使用this和super关键字。</p><h2 id="第三章：封装"><a href="#第三章：封装" class="headerlink" title="第三章：封装"></a>第三章：封装</h2><p>概念：封装指的是将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法来实现对内部信息的操作访问。</p><p>好处：提高了安全性 提高了复用性 提高了实现细节</p><p>注意事项：类的属性中均用private来修饰 定义geter和seter方法</p><h2 id="第四章：继承"><a href="#第四章：继承" class="headerlink" title="第四章：继承"></a>第四章：继承</h2><p>概念：比如FeiGe快递系统中有三个实体类Person（人），Courier（快递员）,Customer（客户）类，Courier,Customer都属于（派生类）Person，所以都继承（extends）自Person类。</p><p>好处：提高了代码的重用性 提高了代码的扩展性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：class 类名 extends父接口&#123;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;属性定义</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;方法定义&#125;</span><br></pre></td></tr></table></figure><p>注意事项：1.子类继承父类所以的属性和方法，只不过只能调用非Private属性和方法2.java中的继承只支持单继承，意思是一个子类只能继承一个父类，但是允许多层继承</p><p>继承中的构造方法：调用父类中的构造方法，</p><p>需用到关键字super super指代父类</p><p>重写的概念：在继承的关系中。子类会自动继承父类中定义的方法，但有时子类中需要对继承的方法进行一些修改，即对父类的方法进行重写。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：void 方法名（）&#123;&#125;</span><br></pre></td></tr></table></figure><p>注意事项：子类重写父类的方法时，不能使用比父类中被重写的方法更严格的访问权限，重写方法和被重写方法必须具有相同的方法名，相同的参数列表和相同的返回值类型，重写方法的访问修饰符必须大于被重写方法的访问修饰符，否则就不能被称为方法的重写。</p><p>异常的处理：在程序执行代码的时候万一发生了异常，程序会按照预定的处理方法对异常进行处理，异常处理完毕之后，程序继续运行。</p><h3 id="语法：5个关键字-try-catch-finally-throw-throws"><a href="#语法：5个关键字-try-catch-finally-throw-throws" class="headerlink" title="语法：5个关键字 try catch finally throw throws"></a>语法：5个关键字 try catch finally throw throws</h3><p>常见的异常类型</p><p>Exception 异常层次的根类 ArithmeticException 算术错误情形，如以零作除数</p><p>ArrayIndexOutOfBoundsException 数组下标越界</p><p>NullPointerException空指针异常</p><p>ClassNotFoundException不能加载所需的类</p><p>InputMismatchException得到的数据类型与实际输入的类型不匹配</p><p>llegalArgumentException方法接收到非法参数</p><p>ClassCastException对象强制类型转换出错</p><p>NumberFormatException数字格式转换异常，如把“abc”转换成数字</p><h2 id="第五章：多态"><a href="#第五章：多态" class="headerlink" title="第五章：多态"></a>第五章：多态</h2><p>概念：指允许不同类的对象对同一消息做出响应即同同一消息可以根据发送对象的不同而采用多种不同的行为方式。</p><p>好处：可替换性 可扩充性 接口性 灵活性 简化性</p><p>多态的使用：</p><p>子类向父类转换称为向上转型</p><h3 id="向上转型：-lt-父类型-gt-lt-引用变量名-gt-new-lt-子类型-gt-（）；"><a href="#向上转型：-lt-父类型-gt-lt-引用变量名-gt-new-lt-子类型-gt-（）；" class="headerlink" title="向上转型：&lt;父类型&gt;&lt;引用变量名&gt;=new&lt;子类型&gt;（）；"></a>向上转型：&lt;父类型&gt;&lt;引用变量名&gt;=new&lt;子类型&gt;（）；</h3><p>将一个指向子类对象的父类引用赋给一个子类的引用，即将父类类型转换子类类型，称为向下转型，此时必须进行强制类型转换。</p><h3 id="向下转型：-lt-子类型-gt-lt-引用变量名-gt-（-lt-子类型-gt-）-lt-父类型的引用变量-gt-；"><a href="#向下转型：-lt-子类型-gt-lt-引用变量名-gt-（-lt-子类型-gt-）-lt-父类型的引用变量-gt-；" class="headerlink" title="向下转型：&lt;子类型&gt;&lt;引用变量名&gt;=（&lt;子类型&gt;）&lt;父类型的引用变量&gt;；"></a>向下转型：&lt;子类型&gt;&lt;引用变量名&gt;=（&lt;子类型&gt;）&lt;父类型的引用变量&gt;；</h3><p>运算符：instanceof 进行类型的判断</p><p>Try-catch-finally 如果try中的所有语句正常执行完毕那么finally块就会被执行</p><p>多重catch 一段代码会出现多种异常这时可以在try语句后写多个catch语句块</p><h2 id="第六章：抽象"><a href="#第六章：抽象" class="headerlink" title="第六章：抽象"></a>第六章：抽象</h2><p>概念：如果一个类没有足够的信息去描述一个具体的对象那我们就称之为抽象类</p><p>语法：public abstract class类名{}</p><p>作用：抽象类是用来继承的比普通类更通用</p><p>抽象方法：abstract修饰没有方法体之声明返回的数据类型 方法名称和所需要的参数</p><p>语法 ：public abstract 返回值类型 方法名（参数列表）；</p><p>注意事项：包含抽象方法的类一定是抽象类 抽象类中不一定都是抽象方法 构造方法不能生命为抽象方法 abstract不能与private static final native 并列修饰同一个方法</p><p>Final 修饰类 被final修饰过的类不能被继承 因为不能被继承所以此类中所有方法都是final修饰 该类如果不需要有子类不需要被扩展类的方法不允许被重写就用final修饰该类</p><p>Throws通过try-catch捕获处理异常</p><h2 id="第七章：接口"><a href="#第七章：接口" class="headerlink" title="第七章：接口"></a>第七章：接口</h2><p>概述：在软件中接口是一种规范和标准他们可以约束类的行为是一些方法特征的集合但是没有方法的实现</p><p>语法：</p><p>【修饰符】interface接口名extends父接口1，父接口2……{//常量定义//方法定义}</p><p>Class类名extends父类名implements接口1，接口2….{//类成员}</p><p>Run（）；方法提供服务</p><p>接口是一种能力接口是一种约定</p><p>抛出异常：throw 除系统自动抛出异常可以用throw自动抛出异常</p><p>Throw在程序中抛出异常throws在方法内抛出异常</p><p>第八章：集合框架</p><p>集合框架使用方便的接口和类都在java.util包中</p><p>集合框架的特点：</p><p>长度 数组长度是固定的集合长度是可变的</p><p>存储对象 数组可以存储基本的数据类型，也可以存储对象的引用 集合只能用于存储对象的引用</p><p>对象类型 数组必须是相同类型的数据 对象可以是不同类型</p><p>接口区别：</p><p>Collection接口存储组 不唯一(允许重复)、 无序的对象。<br>Set接口继承Collection接口，存储-组唯一(不允许重复)、 无序的对象。<br>List接口继承Collection接口，存储组不唯-(允许重复)、 有序(以元素插入的次序来放置无素，不会重新排列)的对象<br>Map接口存储组成对的键 值对象，提供key(键)到value(值)的映射。Map中的key不要求有序，不允许重复。value 同样不要求有序，但允许重复。</p><p>List接口：</p><p>实现List接口的常用类有ArayList和Lnkedist.它们都可以容纳所有类型的对象，包括nll允许重复，并且都保证元素的存储顺序。<br>ArrayList和LinkedList的大致区别:<br>arraylist是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构对于随机访问get和set, ArrayList 优于LinkedList, 因为LinkedList要移动指针。<br>对于新增和删除操作add和remove, LinkedList 比较占优势，因为ArrayList要移动数据。</p><p>list接口定义中的格各种常用方法</p><p>boolean add(Object o)在列表末尾顺序添加元素，起始索引位置从0开始<br>int size()返回列表中的元素个数<br>void add(int index,Objecto)在指定的索 引位置添加元素，原索引位置及其后面的元素依次后移<br>注意:新添加元素的索引位置必须介于0和列表中元素个数之间</p><p>0bject get(int index)返回指定索引位置处的元素<br>注意:取出的元素是Object类型，使用前需要进行强制类型转换<br>boolean contains(Object o)判断列表中是否存在指定元素<br>boolean remove(Object o)从列表中删除元素<br>Object remove(int index)从列表中删除指定位置元素，起始索引位置从0开始</p><p>Linkedlist的一些特殊用法<br>void addFirst(Object o)在列表的首部添加元素<br>void addLast(Object o)在列表的末尾添加元素<br>Object getFirst( )返回列表中的第一” 个元素<br>Object getLast( )返回列表中的最后一个元素<br>Object removeFirst( )删除并返回列表中的第一个元素</p><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>Hashset的优点就是各方面都很快但数据是无序的</p><p>Threeset优点是有序而且可以按照升序方式进行排序，但是其他各方面不突出</p><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>Object put （object key，object value）以“键一值对”的方式进行存储<br>如果武图添加重复的<br>键，那么最后加入的“键-值对”将替换掉原先的“键一道<br>对”<br>Object get (Object key)根据键返回相关联的值，若不存在指定的键，则返回null</p><p>Object remove (Object key)删除指定的键映射的“键一值对”<br>int size()返回元素个数<br>Set keySet()返回键的集合<br>Collection values( )返回值的集合<br>boolean containsKey (Object key)若存在指定的键映射的“键值对”，则返回true<br>boolean isEmpty( )若不存在键一值映射关系，则返回true<br>void clear()从此映射中移除所有映射关系<br>泛型集合：list ArrayList</p><p>ArrayL ist&lt;0bject&gt; list=new ArrayL ist&lt;0bject&gt;() ;</p><p>list. add (0);</p><p>list. add(99.9);</p><p>list. add(false);</p><p>使用泛型集合在创建集合对象时指定集合中元素的类型，从集合中取出元素时无须进行类型强制转换，并且如果把非指定类型对象放入集合，会出现编译错误。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础知识</tag>
      </tags>
  </entry>
</search>
